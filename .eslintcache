[{"D:\\xampp\\htdocs\\cpsi-ems\\src\\index.js":"1","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Dashboard.js":"2","D:\\xampp\\htdocs\\cpsi-ems\\src\\Pagenotfound.js":"3","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Role.js":"4","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Leaves\\AddLeaves.js":"5","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Event\\AddEvent.js":"6","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Event\\EditEvent.js":"7","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\UpcomingEvent\\Upcoming.js":"8","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Services\\Authapi.js":"9","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\Forms\\AuthForms\\LoginForm.js":"10","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\Forms\\UserForms\\EditForm.js":"11","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\CountdownTimer.js":"12","D:\\xampp\\htdocs\\cpsi-ems\\src\\App.js":"13","D:\\xampp\\htdocs\\cpsi-ems\\src\\reportWebVitals.js":"14","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\LeavesTicket\\AddTickets.js":"15","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Event\\Event.js":"16","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\ShowEvent\\Show.js":"17","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Profile\\Profile.js":"18","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\LoadderButton.js":"19","D:\\xampp\\htdocs\\cpsi-ems\\src\\Config.js":"20","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\Nav.js":"21","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\Forms\\UserForms\\AddForm.js":"22","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\UpcomingEvent\\EditUpcomingEvent.js":"23","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Users\\EditUser.js":"24","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\InitComponent.js":"25","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Leaves\\Leaves1.js":"26","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\ProtectedRoute.js":"27","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\LeavesTicket\\EditTicket.js":"28","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\Footer.js":"29","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\PageLoader.js":"30","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\Breadcrumb.js":"31","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\TableComponent.js":"32","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Login.js":"33","D:\\xampp\\htdocs\\cpsi-ems\\src\\ScreenShot.js":"34","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Users\\HandleUser.js":"35","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\FontAwesomeIconComponent.js":"36","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Permission.js":"37","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\LeavesTicket\\Ticket.js":"38","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\UpcomingEvent\\AddUpcomingEvent.js":"39","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Users\\Index.js":"40","D:\\xampp\\htdocs\\cpsi-ems\\src\\TableAction.js":"41","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\DropdownComponent.js":"42"},{"size":578,"mtime":1615966724258,"results":"43","hashOfConfig":"44"},{"size":14513,"mtime":1623313781765,"results":"45","hashOfConfig":"44"},{"size":252,"mtime":1616580503574,"results":"46","hashOfConfig":"44"},{"size":9167,"mtime":1616735560760,"results":"47","hashOfConfig":"44"},{"size":12638,"mtime":1616573538808,"results":"48","hashOfConfig":"44"},{"size":13517,"mtime":1619771068404,"results":"49","hashOfConfig":"44"},{"size":15706,"mtime":1621319473724,"results":"50","hashOfConfig":"44"},{"size":4712,"mtime":1620890144451,"results":"51","hashOfConfig":"44"},{"size":27342,"mtime":1623387466785,"results":"52","hashOfConfig":"44"},{"size":3395,"mtime":1621597989269,"results":"53","hashOfConfig":"44"},{"size":20175,"mtime":1617193839293,"results":"54","hashOfConfig":"44"},{"size":6976,"mtime":1623320950036,"results":"55","hashOfConfig":"44"},{"size":16378,"mtime":1623328505189,"results":"56","hashOfConfig":"44"},{"size":362,"mtime":1611727817135,"results":"57","hashOfConfig":"44"},{"size":14809,"mtime":1616573892132,"results":"58","hashOfConfig":"44"},{"size":7090,"mtime":1620713774563,"results":"59","hashOfConfig":"44"},{"size":9357,"mtime":1620799321247,"results":"60","hashOfConfig":"44"},{"size":36487,"mtime":1623149957331,"results":"61","hashOfConfig":"44"},{"size":2831,"mtime":1615980010962,"results":"62","hashOfConfig":"44"},{"size":2086,"mtime":1623145464175,"results":"63","hashOfConfig":"44"},{"size":819,"mtime":1617109271495,"results":"64","hashOfConfig":"44"},{"size":18194,"mtime":1622704433139,"results":"65","hashOfConfig":"44"},{"size":17988,"mtime":1623394290094,"results":"66","hashOfConfig":"44"},{"size":20405,"mtime":1616565474214,"results":"67","hashOfConfig":"44"},{"size":905,"mtime":1613474243458,"results":"68","hashOfConfig":"44"},{"size":3840,"mtime":1616574537896,"results":"69","hashOfConfig":"44"},{"size":3810,"mtime":1620899339067,"results":"70","hashOfConfig":"44"},{"size":19363,"mtime":1617621748837,"results":"71","hashOfConfig":"44"},{"size":252,"mtime":1617171219296,"results":"72","hashOfConfig":"44"},{"size":551,"mtime":1613474572339,"results":"73","hashOfConfig":"44"},{"size":1090,"mtime":1613474707126,"results":"74","hashOfConfig":"44"},{"size":11370,"mtime":1620713704052,"results":"75","hashOfConfig":"44"},{"size":3771,"mtime":1616740544042,"results":"76","hashOfConfig":"44"},{"size":1130,"mtime":1621862470734,"results":"77","hashOfConfig":"44"},{"size":17968,"mtime":1616503023746,"results":"78","hashOfConfig":"44"},{"size":801,"mtime":1613474634437,"results":"79","hashOfConfig":"44"},{"size":6847,"mtime":1616755870148,"results":"80","hashOfConfig":"44"},{"size":4372,"mtime":1616574636958,"results":"81","hashOfConfig":"44"},{"size":18598,"mtime":1621344044897,"results":"82","hashOfConfig":"44"},{"size":3587,"mtime":1617607448240,"results":"83","hashOfConfig":"44"},{"size":440,"mtime":1622804875249,"results":"84","hashOfConfig":"44"},{"size":1904,"mtime":1616153584220,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"edl8wu",{"filePath":"89","messages":"90","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"93"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"93"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"116"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"108"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"93"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"128"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"132"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"108"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"108"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"93"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"97"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"151","messages":"152","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"132"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"108"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"108"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"108"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"93"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"108"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"108"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"108"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\xampp\\htdocs\\cpsi-ems\\src\\index.js",[],["197","198"],"D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Dashboard.js",["199","200","201","202","203","204","205"],"D:\\xampp\\htdocs\\cpsi-ems\\src\\Pagenotfound.js",[],["206","207"],"D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Role.js",["208","209","210","211","212","213","214","215"],"import React, { Component } from 'react';\r\nimport Header from '../Layouts/Header'\r\nimport Footer from '../Layouts/Footer';\r\nimport Container from '@material-ui/core/Container';\r\nimport AuthApi from '../Services/Authapi';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport swal from 'sweetalert';\r\nimport TableComponent from '../Layouts/TableComponent';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Breadcrumb from '../Layouts/Breadcrumb';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport DropdownComponent from '../Layouts/DropdownComponent';\r\nimport PageLoader from '../Layouts/PageLoader';\r\n\r\nclass Role extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      role: false,\r\n      count: 0,\r\n      pageStatus:false,\r\n      setopen: false,\r\n      roleName: false,\r\n      permission: false,\r\n      isPopup: false,\r\n      checkbox: [],\r\n      tableTh: [\r\n        { id: 'name', numeric: false, disablePadding: true, label: 'Name', sortable: true },\r\n        { id: 'created_at', numeric: false, disablePadding: true, label: 'Created On', sortable: true },\r\n        { id: 'actions', numeric: false, disablePadding: true, label: 'Actions', sortable: false }\r\n      ]\r\n    }\r\n    this.roleData = this.roleData.bind(this);\r\n    this.handleClickOpen = this.handleClickOpen.bind(this);\r\n    this.handleClose = this.handleClose.bind(this);\r\n    this.updatChange = this.updatChange.bind(this);\r\n    this.saveData = this.saveData.bind(this);\r\n    this.removeRole = this.removeRole.bind(this);\r\n    this.updateCheckbox = this.updateCheckbox.bind(this);\r\n    this.handleClickOpenUpdateRole = this.handleClickOpenUpdateRole.bind(this);\r\n    this.updateRoleee = this.updateRoleee.bind(this);\r\n  }\r\n  componentWillMount() {\r\n    if (this.props && this.props.authToken === false) {\r\n      this.props.history.push('/login');\r\n    }\r\n    this.roleData();\r\n  }\r\n\r\n  componentWillReceiveProps(props) {\r\n    if (props && props.authToken === false) {\r\n      props.history.push('/login');\r\n    }\r\n  }\r\n\r\n  roleData = async (e) => {\r\n    let role = await AuthApi.getRole();\r\n    this.setState({\r\n      role: role.data,\r\n      count: role.data.length,\r\n    })\r\n  }\r\n\r\n  async handleClickOpen(row = false) {\r\n    let permission = await AuthApi.getPermission();\r\n    this.setState({\r\n      permission: permission.data,\r\n    })\r\n    this.setState({\r\n      setopen: true,\r\n      isPopup: true,\r\n      roleName: row.name,\r\n    })\r\n  };\r\n\r\n  async updateRoleee(id) {\r\n    let upte = await AuthApi.updateRole(this.state.roleName, this.state.checkBox, id);\r\n    if (upte && upte.status === true) {\r\n      this.setState({ setopen: false }, function () {\r\n        this.roleData();\r\n      })\r\n    }\r\n  }\r\n\r\n  async handleClickOpenUpdateRole(row = false) {\r\n    let permission = await AuthApi.getPermission();\r\n    this.setState({\r\n      permission: permission.data,\r\n    })\r\n    if (Object.keys(row.permissions).length > 0) {\r\n      let permissions = [];\r\n      Object.keys(row.permissions).forEach((key) => {\r\n        permissions.push(row.permissions[key].name)\r\n      })\r\n      this.setState({ rolePermission: permissions })\r\n    }\r\n    await this.setState({\r\n      setopen: true,\r\n      isPopup: false,\r\n      roleName: row.name,\r\n      roleId: row.id\r\n    })\r\n  }\r\n\r\n  handleClose() {\r\n    this.setState({\r\n      setopen: false,\r\n      rolePermission: []\r\n    })\r\n  };\r\n\r\n  async saveData() {\r\n    if (this.state.isPopup) {\r\n      let currentRole = await AuthApi.createRole(this.state.roleName, this.state.checkBox);\r\n      if (currentRole && currentRole.status === true) {\r\n        this.setState({ setopen: false }, function () {\r\n          this.roleData();\r\n        });\r\n      } else {\r\n        // axios popup result  \r\n      }\r\n    } else {\r\n      this.updateRoleee(this.state.roleId)\r\n    }\r\n  }\r\n  \r\n  async removeRole(id) {\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      icon: \"warning\",\r\n      buttons: [\"Cancel\", \"Yes\"],\r\n    }).then(async (confirm) => {\r\n      if (confirm) {\r\n        let currentRole = await AuthApi.deleteRole(id);\r\n        if (currentRole && currentRole.status === true) {\r\n          this.setState({\r\n            pageStatus:true\r\n          })\r\n          this.roleData();\r\n          setTimeout(\r\n            () => this.setState({  pageStatus:false }), \r\n            500\r\n          );\r\n        } else {\r\n        }\r\n      }\r\n      // console.log(this.props.page);\r\n    });\r\n  }\r\n\r\n\r\n  updatChange(e) {\r\n    this.setState({ roleName: e.target.value })\r\n  }\r\n\r\n  updateCheckbox(value) {\r\n    this.setState({ checkBox: value })\r\n  }\r\n\r\n  render() {\r\n    const classes = this.props;\r\n    return (\r\n      <div>\r\n        <Header\r\n          {...this.props}\r\n          authUser={this.props.authUser}\r\n          setAutUser={this.props.setAutUser}\r\n          component={\r\n            <div>\r\n              <Card className={classes.root} style={{ marginBottom: '3%' }}>\r\n                <CardContent>\r\n                  <Breadcrumb\r\n                    {...this.props}\r\n                    primaryPageName=\"Roles\"\r\n                    primaryPageLink=\"/role\"\r\n                    isSecondaryPage={false}\r\n                    secondaryPageName=\"\" />\r\n                </CardContent>\r\n              </Card>\r\n              <TableComponent\r\n                {...this.props}\r\n                tableTh={this.state.tableTh}\r\n                tableData={this.state.role}\r\n                tableCount={this.state.count}\r\n                tablePage={this.state.page}\r\n                tablePagestatus={this.state.pageStatus}\r\n                colNameToShow={['name', 'created_at']}\r\n                openPopUp={this.handleClickOpen}\r\n                openPopUpUpdate={this.handleClickOpenUpdateRole}\r\n                removeRow={this.removeRole}\r\n                actionBtns={['update', 'delete']}\r\n                modelName={'Role'}\r\n              /></div>\r\n          } />\r\n        <Footer />\r\n        <PopUp\r\n          isPopup={this.state.isPopup}\r\n          {...this.props}\r\n          handleClose={this.handleClose}\r\n          setopen={this.state.setopen}\r\n          roleName={this.state.roleName}\r\n          saveData={this.saveData}\r\n          updatChange={this.updatChange}\r\n          permission={this.state.permission}\r\n          inputHandleChange={this.inputHandleChange}\r\n          checkbox={this.state.checkbox}\r\n          updateCheckbox={this.updateCheckbox}\r\n          updateRoleee={this.updateRoleee}\r\n          rolePermission={this.state.rolePermission}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Role;\r\n\r\nclass PopUp extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      permission: false,\r\n      value: true,\r\n      loading: true\r\n    }\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleChange(value) {\r\n    this.props.updateCheckbox(value);\r\n  }\r\n\r\n  componentWillReceiveProps() {\r\n    if (typeof this.props.rolePermission !== 'undefined' && Object.keys(this.props.rolePermission).length > 0) {\r\n      this.setState({ loading: false })\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(props) {\r\n    if (typeof props.rolePermission !== 'undefined' && Object.keys(props.rolePermission).length > 0) {\r\n      this.setState({ loading: false })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Dialog open={this.props.setopen}>\r\n          <DialogTitle>{(this.props.isPopup) ? \"Add Role\" : \" Update Role\"}</DialogTitle>\r\n          {/* {\r\n            this.state.loading === true\r\n              ?\r\n              <PageLoader />\r\n              : */}\r\n              <div><DialogContent>\r\n                {/* <DialogContentText> */}\r\n                  <TextField autoFocus name=\"name\" label=\"Name\" type=\"text\" value={(this.props.roleName && this.props.roleName !== false) ? this.props.roleName : \"\"} onChange={(e) => { this.props.updatChange(e) }} />\r\n                {/* </DialogContentText> */}\r\n              </DialogContent>\r\n\r\n                <DialogContent>\r\n                  <DropdownComponent inputValue={this.props.rolePermission} inputOptions={this.props.permission} inputName=\"Permission\" inputTypeMultiple={true} handleChange={this.handleChange} />\r\n                </DialogContent></div>\r\n          {/* } */}\r\n          <DialogActions>\r\n            <Button color=\"primary\" onClick={(e) => { this.props.saveData() }} >\r\n              Save\r\n            </Button>\r\n            <Button onClick={(e) => { this.props.handleClose() }} color=\"primary\">\r\n              Close\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </div>\r\n    )\r\n  }\r\n}",["216","217"],"D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Leaves\\AddLeaves.js",["218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239"],"import React, { useState, useEffect } from 'react';\r\nimport Header from '../../Layouts/Header';\r\nimport Footer from '../../Layouts/Footer';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Breadcrumb from '../../Layouts/Breadcrumb';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { TextField } from '@material-ui/core';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport LoadderButton from '../../Layouts/LoadderButton';\r\nimport AuthApi from '../../Services/Authapi';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport FontAwesomeIconComponent from '../../Layouts/FontAwesomeIconComponent';\r\nimport { SignalCellularNull } from '@material-ui/icons';\r\nimport Authapi from '../../Services/Authapi';\r\nimport swal from 'sweetalert';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport { now } from 'moment';\r\nimport moment from 'moment';\r\n\r\n\r\nconst inileaves = {\r\n    leaveName: \"\",\r\n    dateRange: \"\",\r\n    startDate: \"\",\r\n    endDate: \"\",\r\n    noOfDays: \"\"\r\n}\r\n\r\n// const inilea = {\r\n//     leaveName: \"dsfsd\",\r\n//     dateRange: [\"14-01-2021\",\"15-01-2021\"],\r\n//     // startDate: null,\r\n//     // endDate: null,\r\n//     noOfDays:2\r\n// }\r\n\r\n\r\n\r\n\r\n\r\nconst AddLeaves = (props) => {\r\n    const classes = props;\r\n    const [leaveValues, setLeaveValues] = useState(inileaves);\r\n    const [formErrors, setFormErrors] = useState({});\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n\r\n\r\n   \r\n    \r\n\r\n      useEffect(() => {\r\n        if (props && props.authToken === false) {\r\n            props.history.push('/login');\r\n          }\r\n        });\r\n\r\n\r\n    //   componentWillReceiveProps(props) {\r\n    //     if (props && props.authToken === false) {\r\n    //       props.history.push('/login');\r\n    //     }\r\n    //   }\r\n    \r\n\r\n\r\n\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setLeaveValues({ ...leaveValues, [name]: value });\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    function dateDiffInDays(startDate, endDate) {\r\n        // round to the nearest whole number\r\n        return Math.round((endDate - startDate) / (1000 * 60 * 60 * 24));\r\n    }\r\n    const daysDiff = dateDiffInDays(new Date(leaveValues.startDate), new Date(leaveValues.endDate));\r\n    const dsp = dateDiffInDays(new Date(), new Date(leaveValues.startDate));\r\n\r\n\r\n\r\n    const validate = (values) => {\r\n        let errors = {};\r\n        const regex = /^[a-zA-Z]/;\r\n        const dateR = /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/;\r\n\r\n\r\n\r\n\r\n        if (!values.leaveName) {\r\n            errors.leaveName = \"Cannot be blank\";\r\n        } else if (!regex.test(values.leaveName)) {\r\n            errors.leaveName = \"Invalid firstName format\";\r\n        }\r\n\r\n        if (!values.startDate) {\r\n            errors.startDate = \"Cannot be  blank\";\r\n        } else if (!dateR.test(values.startDate)) {\r\n            errors.startDate = \"Invalid dob format\"\r\n        }\r\n        else {\r\n\r\n\r\n            if (dsp < 0) {\r\n                errors.startDate = \"you can chooes only Current and future Date\";\r\n\r\n            }\r\n        }\r\n\r\n        if (!values.endDate) {\r\n            errors.endDate = \"Cannot be  blank\";\r\n        } else if (!dateR.test(values.endDate)) {\r\n            errors.endDate = \"Invalid dob format\"\r\n        } else {\r\n\r\n\r\n            if (daysDiff < 0) {\r\n                errors.endDate = \"you can chooes only Current and future Date\";\r\n\r\n            }\r\n        }\r\n\r\n\r\n\r\n        return errors;\r\n    };\r\n\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n\r\n        setFormErrors(validate(leaveValues));\r\n        setIsSubmitting(true);\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    useEffect(async () => {\r\n        if (Object.keys(formErrors).length === 0 && isSubmitting) {\r\n            await createLeaves();\r\n        }\r\n    }, [formErrors]);\r\n\r\n\r\n    const createLeaves = async () => {\r\n        console.log(\"test\");\r\n        let create = await AuthApi.createHoliday(leaveValues)\r\n        console.log(create);\r\n\r\n        if (create && create.status === true) {\r\n            props.history.push('/leaves');\r\n        } else {\r\n            swal({\r\n                title: \"OOPS!\",\r\n                icon: \"fail\",\r\n                message: \"Something went wrong, Please try later!\"\r\n            })\r\n        }\r\n    }\r\n\r\n    function diffday() {\r\n        const a = moment(leaveValues.startDate);\r\n        const b = moment(leaveValues.endDate);\r\n        const dateRangeArr = [];\r\n\r\n        // if(e.target.name == \"startDate\"){\r\n        var startDate = leaveValues.startDate;\r\n        dateRangeArr.push(startDate);\r\n        // }\r\n        // if(e.target.name == \"endDate\"){\r\n        var endDate = leaveValues.endDate;\r\n        dateRangeArr.push(endDate);\r\n        // }\r\n\r\n        leaveValues.dateRange = dateRangeArr;\r\n        leaveValues.noOfDays = b.diff(a, 'days')\r\n\r\n    }\r\n    console.log(leaveValues);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // function convertDate(userDate) {\r\n    //     var date = userDate;\r\n    //     var newdate = date.split(\"-\").reverse().join(\"-\");\r\n    //     return newdate;\r\n    // }\r\n\r\n    //   console.log(convertDate(todaysDate)); // Returns: 2015-08-25\r\n\r\n    return (\r\n        <div>\r\n            <Header\r\n                {...props}\r\n                authUser={props.authUser}\r\n                component={\r\n                    <div>\r\n                        <Card className={classes.root} style={{ marginBottom: '3%' }}>\r\n                            <CardContent>\r\n                                <Breadcrumb\r\n                                    {...props}\r\n                                    primaryPageName=\"Leaves\"\r\n                                    primaryPageLink=\"/leaves\"\r\n                                    isSecondaryPage={true}\r\n                                    secondaryPageName=\"Add\" />\r\n                            </CardContent>\r\n                        </Card>\r\n                        <Grid container className={classes.root} spacing={2}>\r\n                            <Grid item xs={12}>\r\n                                <Card className={classes.root}>\r\n                                    <CardContent>\r\n                                        <Typography variant=\"h2\">Add leave</Typography>\r\n                                        <form className={classes.form} onSubmit={handleSubmit} >\r\n                                            <Grid container className={classes.root} spacing={5}>\r\n                                                <Grid item xs={3}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"leaveName\"\r\n                                                        name=\"leaveName\"\r\n                                                        label=\"LeaveName\"\r\n                                                        variant=\"outlined\"\r\n                                                        error={formErrors.leaveName && true}\r\n                                                        value={leaveValues.leaveName}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.leaveName && \"input-error\"}\r\n\r\n                                                    />\r\n                                                    {formErrors.leaveName && (\r\n                                                        <span className=\"error\">{formErrors.leaveName}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n                                                <Grid item xs={4}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"date\"\r\n                                                        variant=\"outlined\"\r\n                                                        label=\"Start-date\"\r\n                                                        name=\"startDate\"\r\n                                                        type=\"date\"\r\n                                                        error={formErrors.startDate && true}\r\n                                                        value={leaveValues.startDate}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.startDate && \"input-error\"}\r\n                                                        className={classes.textField}\r\n                                                        InputLabelProps={{\r\n                                                            shrink: true,\r\n                                                        }}\r\n                                                    />\r\n                                                    {formErrors.startDate && (\r\n                                                        <span className=\"error\">{formErrors.startDate}</span>\r\n                                                    )}\r\n\r\n                                                </Grid>\r\n                                                <h3 style={{ marginTop: \"30px\" }}>To</h3>\r\n                                                <Grid item xs={4}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"date\"\r\n                                                        variant=\"outlined\"\r\n                                                        label=\"End-date\"\r\n                                                        name=\"endDate\"\r\n                                                        type=\"date\"\r\n                                                        error={formErrors.endDate && true}\r\n                                                        value={leaveValues.endDate}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.endDate && \"input-error\"}\r\n                                                        className={classes.textField}\r\n                                                        InputLabelProps={{\r\n                                                            shrink: true,\r\n                                                        }}\r\n                                                    />\r\n                                                    {formErrors.endDate && (\r\n                                                        <span className=\"error\">{formErrors.endDate}</span>\r\n                                                    )}\r\n\r\n                                                </Grid>\r\n\r\n\r\n\r\n                                            </Grid>\r\n\r\n\r\n\r\n\r\n\r\n                                            <Grid container className={classes.root} spacing={3}>\r\n                                                <Grid item xs={4} style={{ display: 'flex' }}>\r\n                                                    <Button type=\"submit\" onClick={(e) => { diffday() }} style={{marginTop : \"10px\"}} variant=\"contained\" color=\"primary\">Save</Button>\r\n                                                    <Button type=\"button\"  style={{marginTop : \"10px\"}} onClick={(e) => { e.preventDefault(); props.history.push('/leaves') }}>Cancel</Button>\r\n                                                </Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                            </Grid>\r\n                                        </form>\r\n\r\n                                    </CardContent>\r\n                                </Card>\r\n                            </Grid>\r\n                            <Grid item xs={6}></Grid>\r\n                        </Grid>\r\n                    </div>\r\n                } />\r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddLeaves;","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Event\\AddEvent.js",["240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"import React, { useState, useEffect } from 'react';\r\nimport Header from '../../Layouts/Header';\r\nimport Footer from '../../Layouts/Footer';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Breadcrumb from '../../Layouts/Breadcrumb';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { colors, TextField } from '@material-ui/core';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport LoadderButton from '../../Layouts/LoadderButton';\r\nimport AuthApi from '../../Services/Authapi';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport FontAwesomeIconComponent from '../../Layouts/FontAwesomeIconComponent';\r\nimport { SignalCellularNull } from '@material-ui/icons';\r\nimport Authapi from '../../Services/Authapi';\r\nimport swal from 'sweetalert';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport { now } from 'moment';\r\nimport moment from 'moment';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\n\r\n\r\n\r\n\r\nconst iniEvent = {\r\n    eventName: \"\",\r\n    eventdate: \"\",\r\n\r\n}\r\n\r\n\r\nconst AddEvent = (props) => {\r\n    const classes = props;\r\n\r\n    const [eventValues, setEventsValues] = useState(iniEvent);\r\n    const [selectedImages, setSelectedImages] = useState([]);\r\n    const [stringImages, setStringImages] = useState({ images: [] });\r\n    const [formErrors, setFormErrors] = useState({});\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        if (props && props.authToken === false) {\r\n            props.history.push('/login');\r\n        }\r\n    });\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setEventsValues({ ...eventValues, [name]: value });\r\n        // console.log(eventValues);\r\n    };\r\n\r\n\r\n\r\n\r\n    const imageHandleChange = (e) => {\r\n        const files = e.target.files\r\n        const stringFiles = [];\r\n        if (e.target.files) {\r\n            for (let i = 0; i < files.length; i++) {\r\n                const reader = new FileReader();\r\n                reader.onloadend = () => {\r\n                    stringFiles.push(reader.result.replace(\"data:\", \"\").replace(/^.+,/, \"\"));\r\n                };\r\n                reader.readAsDataURL(files[i]);\r\n            }\r\n\r\n            const fileArray1 = Array.from(e.target.files).map((file) => URL.createObjectURL(file))\r\n            setSelectedImages((prevImages) => prevImages.concat(fileArray1))\r\n            setStringImages({ ...stringImages, images: stringFiles });\r\n\r\n            Array.from(e.target.files).map(\r\n                (file) => URL.revokeObjectURL(file)\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    const renderPhotos = (source) => {\r\n        return source.map((photo, index) => {\r\n            return <div key={Math.random()} style={{ float: \"left\" }}>\r\n                <img src={photo} key={photo} alt=\"User profile image\" style={{ padding: \"20px\" }} width=\"200px\" height=\"200px\" />\r\n                <Button style={{ marginTop: \"-20rem\" }} onClick={(e) => { removeImage(index) }}>x</Button>\r\n            </div>\r\n        })\r\n    }\r\n\r\n    const removeImage = (e) => {\r\n        const stringImages1 = stringImages.images\r\n        const selectedImages1 = selectedImages\r\n        stringImages1.splice(e, 1)\r\n        selectedImages1.splice(e, 1)\r\n\r\n\r\n        setSelectedImages((prevImages) => prevImages = selectedImages1)\r\n        setStringImages({ ...stringImages, images: stringImages1 });\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const validate = (values) => {\r\n        let errors = {};\r\n        const regex = /^[a-zA-Z]/;\r\n        const dateR = /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/;\r\n\r\n\r\n\r\n        if (!values.eventName) {\r\n            errors.eventName = \"Cannot be blank\";\r\n        } else if (!regex.test(values.eventName)) {\r\n            errors.eventName = \"Invalid ticketMesasge format\";\r\n        }\r\n\r\n        if (!values.eventdate) {\r\n            errors.eventdate = \"Cannot be  blank\";\r\n        } else if (!dateR.test(values.eventdate)) {\r\n            errors.eventdate = \"Invalid dob format\"\r\n        }\r\n\r\n\r\n\r\n        return errors;\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        setFormErrors(validate(eventValues));\r\n        setIsSubmitting(true);\r\n    }\r\n\r\n    useEffect(async () => {\r\n        if (Object.keys(formErrors).length === 0 && isSubmitting) {\r\n            await event();\r\n        }\r\n    }, [formErrors])\r\n\r\n\r\n\r\n\r\n    const event = async () => {\r\n        console.log(stringImages)\r\n        let create1 = await AuthApi.createEvent(eventValues, stringImages.images);\r\n        console.log(create1)\r\n        if (create1 && create1.status === true) {\r\n            props.history.push('/event');\r\n        } else {\r\n            swal({\r\n                title: \"OOPS!\",\r\n                icon: \"fail\",\r\n                message: \"Something went wrong, Please try later!\"\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Header\r\n                {...props}\r\n                authUser={props.authUser}\r\n                component={\r\n                    <div>\r\n                        <Card className={classes.root} style={{ marginBottom: '3%' }}>\r\n                            <CardContent>\r\n                                <Breadcrumb\r\n                                    {...props}\r\n                                    primaryPageName=\"Event\"\r\n                                    primaryPageLink=\"/event\"\r\n                                    isSecondaryPage={true}\r\n                                    secondaryPageName=\"Add\" />\r\n                            </CardContent>\r\n                        </Card>\r\n                        <Grid container className={classes.root} spacing={2}>\r\n                            <Grid item xs={12}>\r\n                                <Card className={classes.root}>\r\n                                    <CardContent>\r\n                                        <Typography variant=\"h2\">Add Event</Typography>\r\n                                        <form className={classes.form} onSubmit={handleSubmit} >\r\n                                            <Grid container className={classes.root} spacing={5}>\r\n                                                <Grid item xs={6}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"EventName\"\r\n                                                        name=\"eventName\"\r\n                                                        label=\"Event-Name\"\r\n                                                        variant=\"outlined\"\r\n                                                        error={formErrors.eventName && true}\r\n                                                        value={eventValues.eventName}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.eventName && \"input-error\"}\r\n\r\n                                                    />\r\n                                                    {formErrors.eventName && (\r\n                                                        <span className=\"error\">{formErrors.eventName}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n\r\n\r\n                                                <Grid item xs={6}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"date\"\r\n                                                        variant=\"outlined\"\r\n                                                        label=\"Event-Date\"\r\n                                                        name=\"eventdate\"\r\n                                                        type=\"date\"\r\n                                                        error={formErrors.eventdate && true}\r\n                                                        value={eventValues.eventdate}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.eventdate && \"input-error\"}\r\n                                                        className={classes.textField}\r\n                                                        InputLabelProps={{\r\n                                                            shrink: true,\r\n                                                        }}\r\n                                                    />\r\n                                                    {formErrors.eventdate && (\r\n                                                        <span className=\"error\">{formErrors.eventdate}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n\r\n\r\n                                            </Grid>\r\n\r\n                                            <Grid container className={classes.root} spacing={5}>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                            </Grid>\r\n\r\n                                            <Grid container className={classes.root} spacing={5} >\r\n                                                <Grid item xs={12} style={{ display: 'flex' }} >\r\n\r\n                                                    <div>\r\n                                                        <input\r\n                                                            accept=\"image/*\"\r\n                                                            // className={classes.input}\r\n                                                            id=\"contained-button-file\"\r\n                                                            multiple\r\n                                                            type=\"file\"\r\n                                                            onChange={(e) => { imageHandleChange(e) }}\r\n                                                            style={{ display: 'none' }}\r\n                                                        />\r\n                                                        <label htmlFor=\"contained-button-file\">\r\n                                                            <Button style={{ float: \"left\" }} variant=\"contained\" color=\"primary\" component=\"span\" > Upload Event Picture </Button>\r\n                                                        </label>\r\n                                                    </div>\r\n                                                </Grid>\r\n\r\n\r\n\r\n                                            </Grid>\r\n\r\n                                            <Grid container className={classes.root} spacing={5} >\r\n                                                <Grid item xs={12}>\r\n                                                    <div style={{ float: \"left\" }}>\r\n                                                        <Card className={classes.root}>\r\n                                                            <Grid item xs={12}>\r\n                                                                {renderPhotos(selectedImages)}\r\n                                                            </Grid>\r\n                                                        </Card>\r\n                                                    </div>\r\n                                                </Grid>\r\n                                            </Grid>\r\n\r\n                                            <Grid container className={classes.root} spacing={3}>\r\n                                                <Grid item xs={4} style={{ display: 'flex' }}>\r\n                                                    <Button type=\"submit\" variant=\"contained\" color=\"primary\">Save</Button>\r\n                                                    <Button type=\"button\" style={{ marginTop: \"10px\" }} onClick={(e) => { e.preventDefault(); props.history.push('/event') }}>Cancel</Button>\r\n                                                </Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                            </Grid>\r\n                                        </form>\r\n\r\n                                    </CardContent>\r\n                                </Card>\r\n                            </Grid>\r\n                            <Grid item xs={6}></Grid>\r\n                        </Grid>\r\n                    </div>\r\n                } />\r\n            <Footer />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default AddEvent;\r\n\r\n\r\n\r\n","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Event\\EditEvent.js",["268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293"],"D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\UpcomingEvent\\Upcoming.js",[],["294","295"],"D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Services\\Authapi.js",[],"D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\Forms\\AuthForms\\LoginForm.js",[],"D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\Forms\\UserForms\\EditForm.js",["296","297","298","299","300","301","302","303","304"],"import React, { useState, useEffect } from 'react';\r\nimport './AddForm.css';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { TextField } from '@material-ui/core';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport AuthApi from '../../../Services/Authapi';\r\nimport FontAwesomeIconComponent from '../../../Layouts/FontAwesomeIconComponent';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nconst iniuser = {\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    email: \"\",\r\n    gender: \"\",\r\n    dob: \"\",\r\n    photo: \"\",\r\n    qualification: \"\",\r\n    last_organization: \"\",\r\n    roleName: \"\",\r\n    uploadedImgName: \"\",\r\n    user: false,\r\n    user_id: 0,\r\n    role: []\r\n\r\n}\r\n\r\nconst EditForm = (props) => {\r\n    const classes = props;\r\n    const [editValues, setEditValues] = useState(iniuser);\r\n    const [formErrors, setFormErrors] = useState({});\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n    const [roleOptions] = React.useState([]);\r\n\r\n\r\n\r\n    const handleChange1 = (e) => {\r\n        const { name, value } = e.target;\r\n        // console.log(value);\r\n        setEditValues({ ...editValues, [name]: value });\r\n        console.log(editValues);\r\n    };\r\n\r\n\r\n    const validate = (values) => {\r\n        let errors = {};\r\n        const regex = /^[a-zA-Z]/;\r\n        const emailRegx = /^[a-zA-Z0-9]+@+[a-zA-Z0-9]+.+[A-z]/;\r\n        const dobRegx = /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/;\r\n\r\n\r\n        if (!values.firstName) {\r\n            errors.firstName = \"Cannot be blank\";\r\n        } else if (!regex.test(values.firstName)) {\r\n            errors.firstName = \"Invalid firstName format\";\r\n        }\r\n\r\n        if (!values.lastName) {\r\n            errors.lastName = \"Cannot be blank\";\r\n        } else if (!regex.test(values.lastName)) {\r\n            errors.lastName = \"Invalid lastName format\";\r\n        }\r\n\r\n        if (!values.email) {\r\n            errors.email = \"Cannot be  blank\";\r\n        } else if (!emailRegx.test(values.email)) {\r\n            errors.email = \"Invalid email format\"\r\n        }\r\n\r\n        if (!values.dob) {\r\n            errors.dob = \"Cannot be  blank\";\r\n        } else if (!dobRegx.test(values.dob)) {\r\n            errors.dob = \"Invalid dob format\"\r\n        }\r\n\r\n        if (!values.qualification) {\r\n            errors.qualification = \"Cannot be blank\";\r\n        } else if (!regex.test(values.qualification)) {\r\n            errors.qualification = \"Invalid qualification format\";\r\n        }\r\n\r\n        if (!values.last_organization) {\r\n            errors.last_organization = \"Cannot be blank\";\r\n        } else if (!regex.test(values.last_organization)) {\r\n            errors.last_organization = \"Invalid last_organization format\";\r\n        }\r\n\r\n        if (!values.roleName) {\r\n            errors.roleName = \"Cannot be blank\";\r\n        }\r\n\r\n        return errors;\r\n    };\r\n\r\n\r\n    const getFormData = async () => {\r\n        let userId = props.history.location.pathname.split('/')[props.history.location.pathname.split('/').length - 1];\r\n        let user = await AuthApi.singleUser(userId);\r\n        // editUser = editValues;\r\n\r\n        let user_id = userId;\r\n        let firstName = (user.status === true && user.data && user.data.firstName && (user.data.firstName !== null || user.data.firstName !== false)) ? user.data.firstName : null;\r\n        let lastName = (user.status === true && user.data && user.data.lastName) ? user.data.lastName : null;\r\n        let email = (user.status === true && user.data && user.data.email) ? user.data.email : null;\r\n        let gender = (user.status === true && user.data && user.data.gender) ? user.data.gender : null;\r\n        let dob = (user.status === true && user.data && user.data.dob) ? user.data.dob : null;\r\n        let photo = (user.status === true && user.data && user.data.photo) ? user.data.photo : null;\r\n        let qualification = (user.status === true && user.data && user.data.qualification) ? user.data.qualification : null;\r\n        let last_organization = (user.status === true && user.data && user.data.last_organization) ? user.data.last_organization : null;\r\n        let userRole = (user.status === true && user.data && user.data.roles && Object.keys(user.data.roles).length > 0) ? user.data.roles : [];\r\n        let roleName = (Object.keys(userRole).length > 0) ? userRole[0].name : null;\r\n        let imageName =  user.data.photo !== null ? user.data.photo.substr(user.data.photo.lastIndexOf('/') + 1) : '';\r\n        let uploadedImgName = imageName;\r\n        setEditValues({\r\n            firstName: firstName,\r\n            lastName: lastName,\r\n            email: email,\r\n            gender: gender,\r\n            dob: dob,\r\n            photo: photo,\r\n            qualification: qualification,\r\n            last_organization: last_organization,\r\n            roleName: roleName,\r\n            uploadedImgName: uploadedImgName,\r\n            user_id: user_id,\r\n\r\n        })\r\n         \r\n      \r\n\r\n    }\r\n    useEffect(\r\n        () =>\r\n            setTimeout(\r\n                () => getFormData(),\r\n                1000), []);\r\n\r\n\r\n\r\n    const imgUpload = async (e) => {\r\n        const postData = new FormData();\r\n        postData.append('file', e.target.files[0]);\r\n        let updateImg = await AuthApi.updateImg(postData);\r\n        console.log(updateImg);\r\n        // return false;\r\n        if (updateImg && updateImg.status === true) {\r\n            setEditValues({\r\n                    ...editValues,\r\n                photo: updateImg.data.image_url,\r\n                uploadedImgName: updateImg.data.image_name\r\n            })\r\n            //   console.log(editValues)\r\n        }\r\n    }\r\n\r\n    const removeImg = async (e) => {\r\n        let imageLink = editValues.photo;\r\n        imageLink = imageLink.substr(imageLink.indexOf('/', 7) + 1)\r\n        let remImg = await AuthApi.deleteImg(imageLink);\r\n        if (remImg && remImg.status === true) {\r\n            // setEditValues({\r\n            //     // ...setEditValues,\r\n            //     photo: null,\r\n            //     imageName: null\r\n            // })\r\n            getFormData()\r\n\r\n        } else {\r\n\r\n        }\r\n        // setEditValues({\r\n        //     photo: null,\r\n        //     uploadedImgName: null\r\n        // })\r\n\r\n    }\r\n\r\n\r\n    async function RoleData() {\r\n        let role = await AuthApi.getRole();\r\n\r\n        //    console.log(editValues); \r\n\r\n        if (role && role.status === true) {\r\n            if (Object.keys(role.data).length > 0) {\r\n                Object.keys(role.data).forEach((key) => {\r\n                    roleOptions.push(<MenuItem key={key} value={role.data[key].name}>{role.data[key].name}</MenuItem>)\r\n                })\r\n            }\r\n            else {\r\n                roleOptions.push(<MenuItem value=\"\"><em>Select Role</em></MenuItem>);\r\n            }\r\n\r\n        }\r\n    }\r\n    React.useEffect(() => RoleData(), []);\r\n\r\n    //    const  addRole =(e) =>{\r\n    //         let user = editValues;\r\n    //         console.log(user);\r\n    //         user.roleName = e.target.value;\r\n    //         setEditValues({\r\n    //             editValues: user\r\n    //         })\r\n    //     }\r\n\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setFormErrors(validate(editValues));\r\n        setIsSubmitting(true);\r\n    }\r\n\r\n    useEffect(async () => {\r\n        if (Object.keys(formErrors).length === 0 && isSubmitting) {\r\n            // submitForm();\r\n            await editUser1();\r\n        }\r\n    }, [formErrors]);\r\n\r\n    const editUser1 = async (id) => {\r\n        let status = await AuthApi.updateUser(editValues, editValues.user_id);\r\n        console.log(status);\r\n        if (status && status.status === true) {\r\n            props.history.push('/users');\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // console.log(editValues);\r\n\r\n    return (\r\n        <div>\r\n            <form className={classes.root} onSubmit={handleSubmit}>\r\n                <Grid container className={classes.root} spacing={5}>\r\n                    <Grid item xs={4}><TextField\r\n                        fullWidth\r\n                        id=\"outlined-basic\"\r\n                        name=\"firstName\"\r\n                        label=\"First name\"\r\n                        variant=\"outlined\"\r\n                        error={formErrors.firstName && true}\r\n                        value={(editValues && editValues.firstName !== null) ? editValues.firstName : null}\r\n                        // focused={(editValues && editValues.firstName !== null) ? true : false}\r\n                        onChange={handleChange1}\r\n                        className={formErrors.firstName && \"input-error\"}\r\n                    />\r\n                        {formErrors.firstName && (\r\n                            <span className=\"error\">{formErrors.firstName}</span>\r\n                        )}\r\n                    </Grid>\r\n                    <Grid item xs={4}><TextField\r\n                        fullWidth\r\n                        id=\"outlined-basic\"\r\n                        name=\"lastName\"\r\n                        label=\"Last name\"\r\n                        variant=\"outlined\"\r\n                        value={(editValues && editValues.lastName !== null) ? editValues.lastName : null}\r\n                        // focused={(editValues && editValues.lastName !== null) ? true : false}\r\n                        onChange={handleChange1}\r\n                        className={formErrors.lastName && \"input-error\"}\r\n                        error={formErrors.lastName && true}\r\n                    />\r\n                        {formErrors.lastName && (\r\n                            <span className=\"error\">{formErrors.lastName}</span>\r\n                        )}\r\n                    </Grid>\r\n                    <Grid item xs={4}><TextField\r\n                        fullWidth\r\n                        id=\"outlined-basic\"\r\n                        name=\"email\"\r\n                        label=\"Email-address\"\r\n                        variant=\"outlined\"\r\n                        value={(editValues && editValues.email !== null) ? editValues.email : null}\r\n                        // focused={(editValues && editValues.email !== null) ? true : false}\r\n                        error={formErrors.email && true}\r\n                        onChange={handleChange1}\r\n                        className={formErrors.email && \"input-error\"}\r\n                    />\r\n                        {formErrors.email && (\r\n                            <span className=\"error\">{formErrors.email}</span>\r\n                        )}\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container className={classes.root} spacing={5}>\r\n                    <Grid item xs={4}></Grid>\r\n                    <Grid item xs={4}></Grid>\r\n                    <Grid item xs={4}></Grid>\r\n                </Grid>\r\n                <Grid container className={classes.root} spacing={5} >\r\n                    <Grid item xs={4} style={{ display: 'flex' }}>\r\n                        <FormControl component=\"fieldset\">\r\n                            <Grid container className={classes.root} spacing={4} >\r\n                                <Grid item xs={12} style={{ display: 'flex' }}>\r\n                                    <FormLabel component=\"legend\">Gender</FormLabel>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <RadioGroup aria-label=\"gender\" name=\"gender\"  onChange={handleChange1} value={editValues.gender} \r\n                            // focused={(editValues && editValues.gender !== null) ? true : false}\r\n                            >\r\n                                <Grid container className={classes.root} spacing={2}>\r\n                                    <Grid item xs={6}><FormControlLabel value=\"Female\" control={<Radio />} label=\"Female\" /></Grid>\r\n                                    <Grid item xs={6}><FormControlLabel value=\"Male\" control={<Radio />} label=\"Male\" /></Grid>\r\n                                </Grid>\r\n                            </RadioGroup>\r\n                        </FormControl></Grid>\r\n                    <Grid item xs={4}>\r\n                        <TextField\r\n                            fullWidth\r\n                            id=\"date\"\r\n                            label=\"Birthday\"\r\n                            name=\"dob\"\r\n                            type=\"date\"\r\n                            variant=\"outlined\"\r\n                            // defaultValue=\"2017-05-24\"\r\n                            error={formErrors.dob && true}\r\n                            value={(editValues && editValues.dob !== null) ? editValues.dob : null}\r\n                            // focused={(editValues && editValues.dob !== null) ? true : false}\r\n                            onChange={handleChange1}\r\n                            className={formErrors.dob && \"input-error\"}\r\n                            className={classes.textField}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                        />\r\n                        {formErrors.dob && (\r\n                            <span className=\"error\">{formErrors.dob}</span>\r\n                        )}\r\n                    </Grid>\r\n\r\n\r\n                    <Grid item xs={4} style={{ display: 'flex' }}>\r\n                        {\r\n\r\n                            (editValues.photo === null) ?\r\n                                <div>\r\n                                    <input\r\n                                        accept=\"image/*\"\r\n                                        className={classes.input}\r\n                                        name=\"photo\"\r\n                                        id=\"contained-button-file\"\r\n                                        type=\"file\"\r\n                                        onChange={(e) => imgUpload(e)}\r\n                                        style={{ display: 'none' }}\r\n                                    />\r\n                                    <label htmlFor=\"contained-button-file\">\r\n                                        <Button variant=\"contained\" color=\"primary\" component=\"span\" > Upload Profile Picture </Button>\r\n                                    </label>\r\n                                </div>\r\n                                :\r\n                                <div>\r\n                                    <Card className={classes.root}>\r\n                                        <CardContent>\r\n                                            <Grid container className={classes.root} spacing={5}>\r\n                                                <Grid item xs={4}>\r\n                                                    <img src={editValues.photo} alt=\"User profile imagelllll\" width=\"35\" height=\"35\" />\r\n                                                </Grid>\r\n                                                <Grid item xs={4}>\r\n                                                    <Typography variant=\"subtitle1\" gutterBottom>\r\n                                                        {editValues.uploadedImgName}\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                                <Grid item xs={4}>\r\n                                                    <Button onClick={(e) => { removeImg(e) }} >\r\n                                                        <FontAwesomeIconComponent classes=\"fa fa-trash\" colorName=\"primary\" fontSize={\"small\"} /></Button>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </CardContent>\r\n                                    </Card>\r\n                                </div>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container className={classes.root} spacing={5}>\r\n                    <Grid item xs={4}><TextField\r\n                        fullWidth\r\n                        id=\"outlined-basic\"\r\n                        name=\"qualification\"\r\n                        label=\"Qualification\"\r\n                        variant=\"outlined\"\r\n                        value={(editValues && editValues.qualification !== null) ? editValues.qualification : null}\r\n                        // focused={(editValues && editValues.qualification !== null) ? true : false}\r\n                        error={formErrors.qualification && true}\r\n                        onChange={handleChange1}\r\n                        className={formErrors.dob && \"input-error\"}\r\n                    />\r\n                        {formErrors.qualification && (\r\n                            <span className=\"error\">{formErrors.qualification}</span>\r\n                        )}\r\n                    </Grid>\r\n                    <Grid item xs={4}><TextField\r\n                        fullWidth\r\n                        id=\"outlined-basic\"\r\n                        name=\"last_organization\"\r\n                        label=\"Last Organization\"\r\n                        variant=\"outlined\"\r\n                        value={(editValues && editValues.last_organization !== null) ? editValues.last_organization : null}\r\n                        // focused={(editValues && editValues.last_organization !== null) ? true : false}\r\n                        error={formErrors.last_organization && true}\r\n                        onChange={handleChange1}\r\n                        className={formErrors.last_organization && \"input-error\"}\r\n                    />\r\n                        {formErrors.last_organization && (\r\n                            <span className=\"error\">{formErrors.last_organization}</span>\r\n                        )}\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <FormControl variant=\"outlined\" style={{ width: '100%' }}>\r\n                            <InputLabel id=\"demo-simple-select-outlined-label\">Role</InputLabel>\r\n                            <Select\r\n                                labelId=\"demo-simple-select-outlined-label\"\r\n                                id=\"demo-simple-select-outlined\"\r\n                                name=\"roleName\"\r\n                                label=\"Role\"\r\n                                error={formErrors.roleName && true}\r\n                                className={formErrors.roleName && \"input-error\"}\r\n                                onChange={handleChange1}\r\n                                value={(editValues && editValues.roleName && editValues.roleName !== null) ? editValues.roleName : \"\"}\r\n                                // focused={(editValues && editValues.roleName && editValues.roleName !== null) ? true : false}\r\n\r\n                            >{roleOptions}\r\n                            </Select>\r\n                        </FormControl>\r\n                        {formErrors.roleName && (\r\n                            <span className=\"error\">{formErrors.roleName}</span>\r\n                        )}\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container className={classes.root} spacing={3}>\r\n                    <Grid item xs={4} style={{ display: 'flex' }}>\r\n                        <Button type=\"submit\" variant=\"contained\" color=\"primary\" >Edit User </Button>\r\n                        <Button type=\"button\" onClick={(e) => { e.preventDefault(); props.history.push('/users') }}>Cancel</Button>\r\n                    </Grid>\r\n                    <Grid item xs={4}></Grid>\r\n                    <Grid item xs={4}></Grid>\r\n                </Grid>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EditForm;",["305","306"],"D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\CountdownTimer.js",["307","308","309","310","311","312","313","314"],"import React, { Component } from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport moment, { min } from 'moment';\r\nimport AuthApi from './../Services/Authapi';\r\nimport LoadderButton from '../Layouts/LoadderButton';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport ls from \"local-storage\";\r\n\r\nexport default class CountdownTimer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            count: parseInt(props.count, 10),\r\n            min: 0,\r\n            sec: 0,\r\n            startTime: this.props.startTime,\r\n            stopTime: this.props.stopTime,\r\n        };\r\n\r\n\r\n        if (this.props.timerOn === false) {\r\n            this.scnd();\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    // componentWillUnmount() {\r\n    //     this.props.updateCounter(this.state.count);\r\n    //     // this.unlisten();\r\n    // }\r\n\r\n    // componentWillMount() {\r\n    //     this.unlisten = this.props.history.listen((location, action) => { });\r\n    // }\r\n\r\n    // handleCountdown = seconds => {\r\n    //     this.setState({\r\n    //         count: seconds,\r\n    //     });\r\n    //     console.log(this.state.count);\r\n    // };\r\n\r\n\r\n    scnd = async () => {\r\n        let timeCount = await AuthApi.durTime();\r\n        // console.log(timeCount);\r\n        this.props.updateCounterOnload(parseInt(timeCount.totalDurationInSec));\r\n    }\r\n\r\n\r\n\r\n    format = time => {\r\n\r\n        const {\r\n            border,\r\n            showTitle,\r\n            direction,\r\n            noPoints,\r\n            color,\r\n            backgroundColor,\r\n            responsive,\r\n            size,\r\n            hideDay,\r\n            hideHours,\r\n            dayTitle,\r\n            hourTitle,\r\n            minuteTitle,\r\n            secondTitle,\r\n            labelSize,\r\n        } = this.props;\r\n\r\n        let seconds = time % 60;\r\n        let minutes = Math.floor(time / 60) % 60;\r\n        let hours = Math.floor(time / 3600) % 24;\r\n        minutes = minutes < 10 ? `0${minutes}` : minutes;\r\n        seconds = seconds < 10 ? `0${seconds}` : seconds;\r\n        hours = hours < 10 ? `0${hours}` : hours;\r\n        // if(this.props.startTime && this.props.startTime > 0){\r\n        //     let startTime = Date.now() - this.props.startTime;\r\n        //     minutes = (\"0\" + (Math.floor(startTime / 60000) % 60)).slice(-2);\r\n        //     hours = (\"0\" + Math.floor(startTime / 3600000)).slice(-2);\r\n        // }\r\n\r\n        if (showTitle) {\r\n            const borderClass = border ? 'border' : '';\r\n            const responsiveClass = responsive ? 'responsive' : '';\r\n            const classBox = `countBox ${direction}`;\r\n            return (\r\n                <div style={{ fontSize: '20px' }} className={`${classBox} ${borderClass} ${responsiveClass}`}>\r\n                    <div className=\"countBoxItem\">\r\n                        <div style={{ fontSize: `${labelSize}px` }} className={\"label\"}>{secondTitle}</div>\r\n                        <div className={\"count\"} style={{ color, backgroundColor }}>\r\n                            {seconds}\r\n                        </div>\r\n                    </div>\r\n                    {!noPoints && <span className={\"split\"}>:</span>}\r\n                    <div className={\"countBoxItem\"}>\r\n                        <div style={{ fontSize: `${labelSize}px` }} className={\"label\"}>{minuteTitle}</div>\r\n                        <div className={\"count\"} style={{ color, backgroundColor }}>\r\n                            {minutes}\r\n                        </div>\r\n                    </div>\r\n                    {!hideHours && !noPoints && <span className={\"split\"}>:</span>}\r\n                    {!hideHours && (\r\n                        <div className={\"countBoxItem\"}>\r\n                            <div style={{ fontSize: `${labelSize}px` }} className={\"label\"}>{hourTitle}</div>\r\n                            <div className={\"count\"} style={{ color, backgroundColor }}>\r\n                                {hours}\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n\r\n                </div>\r\n            )\r\n        }\r\n\r\n\r\n        const borderClass = border ? 'border' : '';\r\n        const responsiveClass = responsive ? 'responsive' : '';\r\n        const classBox = `inline ${direction}`;\r\n        return (\r\n            <div style={{ fontSize: '100px' }} className={`${classBox} ${borderClass} ${responsiveClass}`}>\r\n                {!hideHours && (\r\n                    <span className={\"count\"} style={{ color, backgroundColor }}>\r\n                        {hours}\r\n                    </span>\r\n                )}\r\n                {!hideHours && !noPoints && <span className={\"split\"}>:</span>}\r\n                <span className={\"count\"} style={{ color, backgroundColor }}>\r\n                    {minutes}\r\n                </span>\r\n                {!noPoints && <span className={\"split\"}>:</span>}\r\n                <span className={\"count\"} style={{ color, backgroundColor }}>\r\n                    {seconds}\r\n                </span>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    render() {\r\n        const { count } = this.props;\r\n        const { className, id } = this.props;\r\n\r\n        return (\r\n            <Grid container spacing={2} >\r\n                <Grid item xs={12}>\r\n                    <div className=\"displayedTime\">{this.format(count)}</div>\r\n                </Grid>\r\n                <Grid item xs={5}></Grid>\r\n                <Grid item xs={2}>\r\n                    {this.props.timerOn === false && (\r\n                        <LoadderButton onClickFn={this.props.startTimer} btnText=\"In\" />\r\n                    )}\r\n                    {this.props.timerOn !== false && (\r\n                        <LoadderButton onClickFn={this.props.stopTimer} btnText=\"Out\" />\r\n                    )}\r\n                </Grid>\r\n                <Grid item xs={5}></Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nCountdownTimer.propTypes = {\r\n    className: PropTypes.string,\r\n    id: PropTypes.string,\r\n    count: PropTypes.number,\r\n    border: PropTypes.bool,\r\n    showTitle: PropTypes.bool,\r\n    direction: PropTypes.oneOf(['right', 'left']),\r\n    noPoints: PropTypes.bool,\r\n    responsive: PropTypes.bool,\r\n    color: PropTypes.string,\r\n    backgroundColor: PropTypes.string,\r\n    size: PropTypes.number,\r\n    labelSize: PropTypes.number,\r\n    hideDay: PropTypes.bool,\r\n    hideHours: PropTypes.bool,\r\n    dayTitle: PropTypes.string,\r\n    hourTitle: PropTypes.string,\r\n    minuteTitle: PropTypes.string,\r\n    secondTitle: PropTypes.string,\r\n    onEnd: PropTypes.func,\r\n};\r\n\r\nCountdownTimer.defaultProps = {\r\n    count: 0,\r\n    border: false,\r\n    showTitle: false,\r\n    direction: 'left',\r\n    noPoints: false,\r\n    color: '#000',\r\n    backgroundColor: '#fff',\r\n    responsive: false,\r\n    size: 18,\r\n    labelSize: 12,\r\n    hideDay: false,\r\n    hideHours: false,\r\n    dayTitle: 'Day',\r\n    hourTitle: 'Hour',\r\n    minuteTitle: 'Min',\r\n    secondTitle: 'Sec',\r\n    className: '',\r\n    id: '',\r\n    onEnd: () => { },\r\n};","D:\\xampp\\htdocs\\cpsi-ems\\src\\App.js",["315","316","317","318","319"],"import React, { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\nimport Dashboard from './components/Pages/Dashboard';\nimport Login from './components/Pages/Login';\nimport Pagenotfound from './Pagenotfound';\nimport InitComponent from './components/Pages/InitComponent';\nimport ls from \"local-storage\";\nimport User from './components/Pages/Users/Index';\nimport Permission from './components/Pages/Permission';\nimport AuthApi from './components/Services/Authapi';\nimport Role from \"./components/Pages/Role\";\nimport AddForm from './components/Pages/Users/HandleUser';\nimport green from '@material-ui/core/colors/green';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport EditUser from './components/Pages/Users/EditUser';\nimport Leaves from './components/Pages/Leaves/Leaves1';\nimport AddLeaves from './components/Pages/Leaves/AddLeaves';\nimport EditLeaves from './components/Pages/Leaves/EditLeaves';\nimport LeavesTicket from './components/Pages/LeavesTicket/Ticket';\nimport AddTickets from './components/Pages/LeavesTicket/AddTickets';\nimport EditTicket from './components/Pages/LeavesTicket/EditTicket';\nimport ProtectedRoute from './components/ProtectedRoute';\nimport Profile from './components/Pages/Profile/Profile';\nimport Event from './components/Pages/Event/Event';\nimport AddEvent from './components/Pages/Event/AddEvent'\nimport EditEvent from './components/Pages/Event/EditEvent'\nimport ShowEvent from './components/Pages/ShowEvent/Show'\nimport Upcoming from './components/Pages/UpcomingEvent/Upcoming'\nimport AddUpcomingEvent from './components/Pages/UpcomingEvent/AddUpcomingEvent'\nimport EditUpcomingEvent from './components/Pages/UpcomingEvent/EditUpcomingEvent'\nimport Button from '@material-ui/core/Button';\nimport { capture } from './ScreenShot';\n\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      authToken: (ls.get(\"authToken\") && ls.get(\"authToken\") !== null && ls.get(\"authToken\") !== false) ? ls.get(\"authToken\") : false,\n      roles: (ls.get(\"roles\") && ls.get(\"roles\") !== null && ls.get(\"roles\") !== false) ? ls.get(\"roles\") : false,\n      user: (ls.get(\"user\") && ls.get(\"user\") !== null && ls.get(\"user\") !== false) ? ls.get(\"user\") : false,\n      authUser: false,\n      location: document.location.pathname,\n      count: (ls.get('count')) ? ls.get('count') : 0,\n      timerOn: (ls.get('timerOn')) ? ls.get('timerOn') : false,\n      startTime: (ls.get('startTime')) ? ls.get('startTime') : 0,\n      stopTime: (ls.get('stopTime')) ? ls.get('stopTime') : 0,\n      startTimeStat: false,\n    }\n    this.setAutUser = this.setAutUser.bind(this);\n    this.updateCounterOnload = this.updateCounterOnload.bind(this);\n    this.startTimer = this.startTimer.bind(this);\n    this.stopTimer = this.stopTimer.bind(this);\n\n  }\n\n  saveStateToLocalStorage() {\n    ls.set('startTime', this.state.startTime);\n    ls.set('count', this.state.count);\n    ls.set('timerOn', this.state.timerOn);\n    ls.set('stopTime', this.state.stopTime);\n  }\n\n  componentDidMount() {\n    window.addEventListener(\n      \"beforeunload\",\n      this.saveStateToLocalStorage.bind(this)\n    );\n    // if (this.state.timerOn) {\n    //   this.runCycle()\n    // }\n  }\n\n\n\n\n\n  componentWillUnmount() {\n    window.removeEventListener(\n      \"beforeunload\",\n      this.saveStateToLocalStorage.bind(this)\n    );\n    // saves if component has a chance to unmount\n    this.saveStateToLocalStorage();\n  }\n\n  runCycle() {\n    this.timer = setInterval(async () => {\n      const newCount = this.state.count + parseInt(1);\n      this.setState({ count: newCount >= 0 ? newCount : 0 }, function (param) {\n        // this.updateCounterOnload(newCount);\n      });\n      this.saveStateToLocalStorage();\n    }, 1000);\n\n    // window.addEventListener(\n    //   \"beforeunload\",\n    //   this.saveStateToLocalStorage.bind(this)\n    // );\n\n  }\n\n  async startTimer() {\n    await AuthApi.inTime();\n    this.setState({ timerOn: true }, function () {\n      this.setState({ startTime: Date.now() - this.state.startTime });\n      this.runCycle();\n    });\n  }\n\n  async stopTimer() {\n    await AuthApi.outTime();\n    this.setState({ timerOn: false }, function () {\n      this.setState({ stopTime: Date.now() });\n      clearInterval(this.timer);\n    });\n    this.saveStateToLocalStorage();\n\n  }\n\n  updateCounterOnload(count) {\n    this.setState({ count: count });\n    // console.log(this.state.count)\n  }\n\n  // updateCounter(count) {\n  //   this.setState({ count: count });\n  //   console.log(this.state.count)\n  // }\n\n  async getAuth() {\n    let checkLogin = await AuthApi.checkAuth();\n    if (checkLogin && checkLogin.status !== false) {\n      this.setAutUser({ authUser: checkLogin.data });\n\n    } else {\n      ls.set('roles', false)\n      ls.set('authToken', false)\n      ls.set('user', false)\n      this.setAutUser({ authUser: false, authToken: false, roles: false, user: false });\n    }\n\n    // if (this.state.authToken !== false) {\n    //   setInterval(() => { console.log(capture()) }, 1000)\n    // }\n\n  }\n\n\n  setAutUser(authData) {\n    this.setState(authData);\n  }\n\n  componentDidMount() {\n    setInterval(() => { capture() }, 1000)\n  }\n\n  componentDidMount() {\n    if (this.state.timerOn) {\n      this.runCycle()\n    }\n  }\n\n  componentWillMount() {\n    this.getAuth();\n  }\n\n\n\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <Router>\n          <Switch>\n            <Route exact path='/dashboard' render={(props) => (\n              <Dashboard\n                {...props}\n                authUser={this.state.authUser}\n                authToken={this.state.authToken}\n                roles={this.state.roles}\n                user={this.state.user}\n                setAutUser={this.setAutUser}\n                count={this.state.count}\n                timerOn={this.state.timerOn}\n                // updateCounter={this.updateCounter}\n                updateCounterOnload={this.updateCounterOnload}\n                startTimer={this.startTimer}\n                stopTimer={this.stopTimer}\n                startTime={this.state.startTime}\n                stopTime={this.state.stopTime}\n              />\n            )} />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/permission\"\n              component={Permission}\n              authUser={this.state.authUser}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/role\"\n              component={Role}\n              authUser={this.state.authUser}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/users\"\n              component={User}\n              authUser={this.state.authUser}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/users/add\"\n              component={AddForm}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/users/edit/:id\"\n              component={EditUser}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/leaves\"\n              component={Leaves}\n              authUser={this.state.authUser}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/leaves/add\"\n              component={AddLeaves}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/leaves/edit/:id\"\n              component={EditLeaves}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/tickets\"\n              component={LeavesTicket}\n              authUser={this.state.authUser}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/tickets/add\"\n              component={AddTickets}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/tickets/edit/:id\"\n              component={EditTicket}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/profile\"\n              component={Profile}\n              authUser={this.state.authUser}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/event\"\n              component={Event}\n              authUser={this.state.authUser}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/event/add\"\n              component={AddEvent}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/event/edit/:id\"\n              component={EditEvent}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/show/:id\"\n              component={ShowEvent}\n              authUser={this.state.authUser}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/upcoming\"\n              component={Upcoming}\n              authUser={this.state.authUser}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/upcoming/add\"\n              component={AddUpcomingEvent}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/upcoming/edit/:id\"\n              component={EditUpcomingEvent}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            {/* <Button onclick={this.capture}>capture</Button>\n            <Button onclick={this.revokeAccess}>Revoke Access</Button> */}\n\n            {/* {ls('roles') === 'Super Admin' ?\n              <Route exact path='/permission' render={(props) => (\n                <Permission\n                  {...props}\n                  authUser={this.state.authUser}\n                  authToken={this.state.authToken}\n                  setAutUser={this.setAutUser} />\n              )} /> : null}\n            {ls('roles') === 'Super Admin' ?\n              <Route exact path='/role' render={(props) => (\n                <Role\n                  {...props}\n                  authUser={this.state.authUser}\n                  authToken={this.state.authToken}\n                  setAutUser={this.setAutUser} />\n              )} /> : null}\n            {ls('roles') === 'Super Admin' ?\n              <Route exact path='/users' render={(props) => (\n                <User\n                  {...props}\n                  authUser={this.state.authUser}\n                  authToken={this.state.authToken}\n                  setAutUser={this.setAutUser} />\n              )} /> : null}\n            <Route exact path='/users/add' render={(props) => (\n              <AddForm\n                {...props}\n                authToken={this.state.authToken}\n                setAutUser={this.setAutUser} />\n            )} /> */}\n            {/* <Route exact path='/users/edit/:id' render={(props) => (\n              <EditUser\n                {...props}\n                authToken={this.state.authToken}\n                setAutUser={this.setAutUser} />\n            )} /> */}\n            {/*{ls('roles') === 'Super Admin' ?\n              <Route exact path='/leaves' render={(props) => (\n                <Leaves\n                  {...props}\n                  authUser={this.state.authUser}\n                  authToken={this.state.authToken}\n                  setAutUser={this.setAutUser} />\n              )} /> : null}\n            <Route exact path='/leaves/add' render={(props) => (\n              <AddLeaves\n                {...props}\n                authToken={this.state.authToken}\n                setAutUser={this.setAutUser} />\n            )} />\n            <Route exact path='/leaves/edit/:id' render={(props) => (\n              <EditLeaves\n                {...props}\n                authToken={this.state.authToken}\n                setAutUser={this.setAutUser} />\n            )} />\n            <Route exact path='/tickets' render={(props) => (\n              <LeavesTicket\n                {...props}\n                authUser={this.state.authUser}\n                authToken={this.state.authToken}\n                setAutUser={this.setAutUser} />\n            )} />\n            <Route exact path='/tickets/add' render={(props) => (\n              <AddTickets\n                {...props}\n                authToken={this.state.authToken}\n                setAutUser={this.setAutUser} />\n            )} />\n            <Route exact path='/tickets/edit/:id' render={(props) => (\n              <EditTicket\n                {...props}\n                authToken={this.state.authToken}\n                setAutUser={this.setAutUser} />\n            )} /> */}\n\n\n\n            <Route exact path='/' render={(props) => (\n              <InitComponent\n                {...props}\n                authUser={this.state.authUser}\n                setAutUser={this.setAutUser}\n                authToken={this.state.authToken} />\n            )} />\n            <Route exact path='/login' render={(props) => (\n              <Login\n                {...props}\n                authUser={this.state.authUser}\n                setAutUser={this.setAutUser}\n                authToken={this.state.authToken} />\n            )} />\n\n            <Route exact path='*' exact={true} component={Pagenotfound} />\n\n          </Switch>\n        </Router>\n      </div>\n    )\n  };\n}\n\nexport default function CustomStyles() {\n  return (\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  );\n}\n\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#1B6E95',\n      light: '#1b6e9582',\n      dark: '#1B6E95'\n    },\n    secondary: {\n      main: green[500],\n      light: green[100],\n      dark: green[900],\n      contrastText: green[600]\n    },\n  },\n  typography: {\n    fontFamily: [\n      '-apple-system',\n      'BlinkMacSystemFont',\n      '\"Segoe UI\"',\n      'Roboto',\n      '\"Helvetica Neue\"',\n      'Arial',\n      'sans-serif',\n      '\"Apple Color Emoji\"',\n      '\"Segoe UI Emoji\"',\n      '\"Segoe UI Symbol\"',\n    ].join(','),\n    subtitle1: {\n      fontSize: 12,\n    },\n    body1: {\n      fontWeight: 500,\n    },\n    button: {\n      fontStyle: 'italic',\n    },\n    h2: {\n      fontSize: '1.2rem',\n      '@media (min-width:600px)': {\n        fontSize: '1.5rem',\n      },\n      float: 'left',\n      padding: '1%',\n      marginTop: '5px',\n      fontWeight: '500',\n      color: '#1B6E95'\n    }\n  }\n});","D:\\xampp\\htdocs\\cpsi-ems\\src\\reportWebVitals.js",[],"D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\LeavesTicket\\AddTickets.js",["320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338"],"import React, { useState, useEffect } from 'react';\r\nimport Header from '../../Layouts/Header';\r\nimport Footer from '../../Layouts/Footer';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Breadcrumb from '../../Layouts/Breadcrumb';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { TextField } from '@material-ui/core';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport LoadderButton from '../../Layouts/LoadderButton';\r\nimport AuthApi from '../../Services/Authapi';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport FontAwesomeIconComponent from '../../Layouts/FontAwesomeIconComponent';\r\nimport { SignalCellularNull } from '@material-ui/icons';\r\nimport Authapi from '../../Services/Authapi';\r\nimport swal from 'sweetalert';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport { now } from 'moment';\r\nimport moment from 'moment';\r\nimport ls from \"local-storage\";\r\n\r\nconst iniTickets = {\r\n    leaveType: \"\",\r\n    ticketMesasge: \"\",\r\n    dateRange: \"\",\r\n    startDate: \"\",\r\n    endDate: \"\",\r\n    noOfDays: \"\",\r\n\r\n}\r\n\r\n\r\nconst AddTickets = (props) => {\r\n    const classes = props;\r\n    const [ticketValues, setTicketsValues] = useState(iniTickets);\r\n    const [formErrors, setFormErrors] = useState({});\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        if (props && props.authToken === false) {\r\n            props.history.push('/login');\r\n        }\r\n    });\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setTicketsValues({ ...ticketValues, [name]: value });\r\n        // console.log(ticketValues);\r\n    };\r\n\r\n\r\n\r\n    function dateDiffInDays(startDate, endDate) {\r\n        // round to the nearest whole number\r\n        return Math.round((endDate - startDate) / (1000 * 60 * 60 * 24));\r\n    }\r\n    const daysDiff = dateDiffInDays(new Date(ticketValues.startDate), new Date(ticketValues.endDate));\r\n    const today = new Date();\r\n    const date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\r\n    const dsp = dateDiffInDays(new Date(date), new Date(ticketValues.startDate));\r\n    // console.log(\"date only==\"+new Date());\r\n    // console.log(\"UTC date==\"+new Date(ticketValues.startDate));\r\n   \r\n\r\n\r\n    const validate = (values) => {\r\n        let errors = {};\r\n        const regex = /^[a-zA-Z]/;\r\n        const dateR = /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/;\r\n\r\n\r\n        if (!values.leaveType) {\r\n            errors.leaveType = \"Cannot be blank\";\r\n        }\r\n\r\n\r\n        if (!values.ticketMesasge) {\r\n            errors.ticketMesasge = \"Cannot be blank\";\r\n        } else if (!regex.test(values.ticketMesasge)) {\r\n            errors.ticketMesasge = \"Invalid ticketMesasge format\";\r\n        }\r\n\r\n        if (!values.startDate) {\r\n            errors.startDate = \"Cannot be  blank\";\r\n        } else if (!dateR.test(values.startDate)) {\r\n            errors.startDate = \"Invalid dob format\"\r\n        } else {\r\n            if (dsp < 0) {\r\n                errors.startDate = \"You can chooes only current and future Date\";\r\n            }\r\n        }\r\n\r\n        if (!values.endDate) {\r\n            errors.endDate = \"Cannot be  blank\";\r\n        } else if (!dateR.test(values.endDate)) {\r\n            errors.endDate = \"Invalid dob format\"\r\n        } else {\r\n            if (daysDiff < 0) {\r\n                errors.endDate = \"You can chooes only current and future Date\";\r\n            }\r\n        }\r\n        return errors;\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        setFormErrors(validate(ticketValues));\r\n        setIsSubmitting(true);\r\n    }\r\n\r\n    useEffect(async () => {\r\n        if (Object.keys(formErrors).length === 0 && isSubmitting) {\r\n            await Tickets();\r\n        }\r\n    }, [formErrors])\r\n\r\n    const Tickets = async () => {\r\n        let create1 = await AuthApi.createTicket(ticketValues);\r\n        console.log(create1)\r\n        if (create1 && create1.status === true) {\r\n            props.history.push('/tickets');\r\n        } else {\r\n            swal({\r\n                title: \"OOPS!\",\r\n                icon: \"fail\",\r\n                message: \"Something went wrong, Please try later!\"\r\n            })\r\n        }\r\n    }\r\n\r\n    function diffday() {\r\n        const a = moment(ticketValues.startDate);\r\n        const b = moment(ticketValues.endDate);\r\n        const dateRangeArr = [];\r\n\r\n        // if(e.target.name == \"startDate\"){\r\n        var startDate = ticketValues.startDate;\r\n        dateRangeArr.push(startDate);\r\n        // }\r\n        // if(e.target.name == \"endDate\"){\r\n        var endDate = ticketValues.endDate;\r\n        dateRangeArr.push(endDate);\r\n        // }\r\n\r\n        ticketValues.dateRange = dateRangeArr;\r\n        ticketValues.noOfDays = b.diff(a, 'days')\r\n        // console.log(ticketValues.noOfDays);\r\n        // console.log( ticketValues.dateRange);\r\n\r\n    }\r\n\r\n    // console.log(ticketValues);\r\n    // const clientTimezoneOffset = new Date().getTimezoneOffset()/60;\r\n   \r\n\r\n\r\n    return (\r\n        <div>\r\n            <Header\r\n                {...props}\r\n                authUser={props.authUser}\r\n                component={\r\n                    <div>\r\n                        <Card className={classes.root} style={{ marginBottom: '3%' }}>\r\n                            <CardContent>\r\n                                <Breadcrumb\r\n                                    {...props}\r\n                                    primaryPageName=\"LeavesTicket\"\r\n                                    primaryPageLink=\"/tickets\"\r\n                                    isSecondaryPage={true}\r\n                                    secondaryPageName=\"Add\" />\r\n                            </CardContent>\r\n                        </Card>\r\n                        <Grid container className={classes.root} spacing={2}>\r\n                            <Grid item xs={12}>\r\n                                <Card className={classes.root}>\r\n                                    <CardContent>\r\n                                        <Typography variant=\"h2\">Add Tickets</Typography>\r\n                                        <form className={classes.form} onSubmit={handleSubmit} >\r\n                                            <Grid container className={classes.root} spacing={5}>\r\n                                                <Grid item xs={3}>\r\n                                                    <FormControl variant=\"outlined\" style={{ width: '100%' }} >\r\n                                                        <InputLabel id=\"demo-simple-select-outlined-label\">Leave-Type</InputLabel>\r\n                                                        <Select\r\n                                                            labelId=\"demo-simple-select-outlined-label\"\r\n                                                            id=\"demo-simple-select-outlined\"\r\n                                                            label=\"leave-Type\"\r\n                                                            name=\"leaveType\"\r\n                                                            error={formErrors.leaveType && true}\r\n                                                            value={ticketValues.leaveType}\r\n                                                            onChange={handleChange}\r\n                                                            className={formErrors.leaveType && \"input-error\"}\r\n                                                        >\r\n                                                            <MenuItem value=\"full-leave\">Full leave</MenuItem>\r\n                                                            <MenuItem value=\"half-leave\">Half leave</MenuItem>\r\n                                                            <MenuItem value=\"sick-leave\">Sick leave</MenuItem>\r\n                                                            <MenuItem value=\"early-leave\">Early leave</MenuItem>\r\n                                                        </Select>\r\n                                                    </FormControl>\r\n                                                    {formErrors.leaveType && (\r\n                                                        <span className=\"error\">{formErrors.leaveType}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n\r\n\r\n                                                <Grid item xs={4}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"date\"\r\n                                                        variant=\"outlined\"\r\n                                                        label=\"Start-date\"\r\n                                                        name=\"startDate\"\r\n                                                        type=\"date\"\r\n                                                        error={formErrors.startDate && true}\r\n                                                        value={ticketValues.startDate}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.startDate && \"input-error\"}\r\n                                                        className={classes.textField}\r\n                                                        InputLabelProps={{\r\n                                                            shrink: true,\r\n                                                        }}\r\n                                                    />\r\n                                                    {formErrors.startDate && (\r\n                                                        <span className=\"error\">{formErrors.startDate}</span>\r\n                                                    )}\r\n\r\n                                                </Grid>\r\n                                                <h3 style={{ marginTop: \"30px\" }}>To</h3>\r\n                                                <Grid item xs={4}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"date\"\r\n                                                        variant=\"outlined\"\r\n                                                        label=\"End-date\"\r\n                                                        name=\"endDate\"\r\n                                                        type=\"date\"\r\n                                                        error={formErrors.endDate && true}\r\n                                                        value={ticketValues.endDate}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.endDate && \"input-error\"}\r\n                                                        className={classes.textField}\r\n                                                        InputLabelProps={{\r\n                                                            shrink: true,\r\n                                                        }}\r\n                                                    />\r\n                                                    {formErrors.endDate && (\r\n                                                        <span className=\"error\">{formErrors.endDate}</span>\r\n                                                    )}\r\n\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={7}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        multiline\r\n                                                        rows={4}\r\n                                                        id=\"ticketMesasge\"\r\n                                                        name=\"ticketMesasge\"\r\n                                                        label=\"Reason for leave\"\r\n                                                        variant=\"outlined\"\r\n                                                        error={formErrors.ticketMesasge && true}\r\n                                                        value={ticketValues.ticketMesasge}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.ticketMesasge && \"input-error\"}\r\n\r\n                                                    />\r\n                                                    {formErrors.ticketMesasge && (\r\n                                                        <span className=\"error\">{formErrors.ticketMesasge}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n\r\n\r\n                                            </Grid>\r\n\r\n\r\n\r\n\r\n\r\n                                            <Grid container className={classes.root} spacing={3}>\r\n                                                <Grid item xs={4} style={{ display: 'flex' }}>\r\n                                                    <Button type=\"submit\" onClick={(e) => {diffday()}} style={{ marginTop: \"10px\" }} variant=\"contained\" color=\"primary\">Save</Button>\r\n                                                    <Button type=\"button\" style={{ marginTop: \"10px\" }} onClick={(e) => { e.preventDefault(); props.history.push('/tickets') }}>Cancel</Button>\r\n                                                </Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                            </Grid>\r\n                                        </form>\r\n\r\n                                    </CardContent>\r\n                                </Card>\r\n                            </Grid>\r\n                            <Grid item xs={6}></Grid>\r\n                        </Grid>\r\n                    </div>\r\n                } />\r\n            <Footer />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default AddTickets;\r\n\r\n\r\n\r\n",["339","340"],"D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Event\\Event.js",["341","342","343"],"import React, { Component } from 'react';\r\nimport Header from '../../Layouts/Header'\r\nimport Footer from '../../Layouts/Footer';\r\nimport AuthApi from '../../Services/Authapi';\r\nimport TableComponent from '../../Layouts/TableComponent';\r\nimport Breadcrumb from '../../Layouts/Breadcrumb';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport swal from 'sweetalert';\r\nimport ls from \"local-storage\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FontAwesomeIconComponent from '../../Layouts/FontAwesomeIconComponent';\r\n\r\nclass Event extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            event: [],\r\n            count: 0,\r\n            pageStatus: false,\r\n            tableTh: [\r\n                { id: 'name', numeric: false, disablePadding: true, label: 'Name', sortable: true },\r\n                { id: 'date', numeric: false, disablePadding: true, label: 'Date', sortable: true },\r\n                { id: 'created_at', numeric: false, disablePadding: true, label: 'Created On', sortable: true },\r\n                { id: 'actions', numeric: false, disablePadding: true, label: 'Actions', sortable: false }\r\n            ]\r\n        }\r\n        this.eventData = this.eventData.bind(this);\r\n        this.removeEvent = this.removeEvent.bind(this);\r\n\r\n    }\r\n\r\n    componentWillMount() {\r\n        if (this.props && this.props.authToken === false) {\r\n            this.props.history.push('/login');\r\n        }\r\n        this.eventData();\r\n    }\r\n\r\n    // componentWillReceiveProps(props) {\r\n    //     if (props && props.authToken === false) {\r\n    //         props.history.push('/login');\r\n    //     }\r\n    // }\r\n\r\n    eventData = async (e) => {\r\n        let get = new Date();\r\n        let Select = get.getMonth() + 1;\r\n        let year = get.getFullYear();\r\n        let event = await AuthApi.getEvent(Select, year);\r\n\r\n\r\n        if (event && event.status === true) {\r\n            this.setState({\r\n                event: event.data,\r\n                count: event.data.length\r\n            })\r\n        }\r\n    }\r\n\r\n    handleMonthChange = async (e) => {\r\n        let select = e.target.value;\r\n        let get = new Date(select);\r\n        let month = get.getMonth() + 1;\r\n        let year = get.getFullYear();\r\n        let event = await AuthApi.getEvent(month, year);\r\n\r\n\r\n        if (event && event.status === true) {\r\n            this.setState({\r\n                event: event.data,\r\n                count: event.data.length\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    async removeEvent(id) {\r\n        swal({\r\n            title: \"Are you sure?\",\r\n            icon: \"warning\",\r\n            buttons: [\"Cancel\", \"Yes\"]\r\n        }).then(async (confirm) => {\r\n            if (confirm) {\r\n                let currentEvent = await AuthApi.eventDelete(id);\r\n                if (currentEvent && currentEvent.status === true) {\r\n                    this.setState({\r\n                        pageStatus: true\r\n                    })\r\n                    this.eventData();\r\n                    setTimeout(\r\n                        () => this.setState({ pageStatus: false }),\r\n                        500\r\n                    );\r\n                } else {\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    // ds() {\r\n    //     return <div style={{ display: 'none' }}> </div>\r\n    // }\r\n\r\n    render() {\r\n        const classes = this.props;\r\n        var month = new Array();\r\n        month[0] = \"01\";\r\n        month[1] = \"02\";\r\n        month[2] = \"03\";\r\n        month[3] = \"04\";\r\n        month[4] = \"05\";\r\n        month[5] = \"06\";\r\n        month[6] = \"07\";\r\n        month[7] = \"08\";\r\n        month[8] = \"09\";\r\n        month[9] = \"10\";\r\n        month[10] = \"11\";\r\n        month[11] = \"12\";\r\n\r\n        var d = new Date();\r\n        var dateString = d.getFullYear() + '-' + (month[d.getMonth()])\r\n\r\n        return (\r\n            <div>\r\n                <Header\r\n                    {...this.props}\r\n                    authUser={this.props.authUser}\r\n                    setAutUser={this.props.setAutUser}\r\n                    component={\r\n                        <div>\r\n                            <Card className={classes.root} style={{ marginBottom: '3%' }}>\r\n                                <CardContent>\r\n                                    <Breadcrumb\r\n                                        {...this.props}\r\n                                        primaryPageName=\"Event\"\r\n                                        primaryPageLink=\"/event\"\r\n                                        isSecondaryPage={false}\r\n                                        secondaryPageName=\"\" />\r\n                                </CardContent>\r\n                            </Card>\r\n                            <Grid container style={{ top: '20px', paddingBottom: '10px', float: 'left' }}>\r\n                                <TextField\r\n                                    id=\"datetime-local\"\r\n                                    label=\"Select Month/Year\"\r\n                                    views={[\"year\", \"month\"]}\r\n                                    variant=\"outlined\"\r\n                                    // format=\"yyyy/mm\"                          \r\n                                    defaultValue={dateString}\r\n                                    type=\"Month\"\r\n                                    // openTo=\"month\"\r\n                                    // value={this.state.selectedDate}\r\n                                    onChange={this.handleMonthChange}\r\n                                    className={classes.textField}\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                    inputProps={{ min: \"2020-01\", max: dateString }}\r\n                                />\r\n                            </Grid>\r\n\r\n                            <TableComponent\r\n                                {...this.props}\r\n                                tableTh={this.state.tableTh}\r\n                                tableData={this.state.event}\r\n                                tableCount={this.state.count}\r\n                                tablePagestatus={this.state.pageStatus}\r\n                                colNameToShow={['name', 'date', 'created_at']}\r\n                                openPopUp={false}\r\n                                removeRow={this.removeEvent}\r\n                                actionBtns={ls('roles') === 'Super Admin' ? ['update', 'delete'] : ['show']}\r\n                                modelName={'Event'}\r\n                                addRoute={'/event/add'}\r\n                                updateRoute={'/event/edit'}\r\n                                openPopUpUpdate={false}\r\n                            /></div>\r\n                    } />\r\n                <Footer {...this.props} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Event;",["344","345"],"D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\ShowEvent\\Show.js",["346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365","366","367","368"],"import React, { useState, useEffect } from 'react';\r\nimport Header from '../../Layouts/Header';\r\nimport Footer from '../../Layouts/Footer';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Breadcrumb from '../../Layouts/Breadcrumb';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport Input from '@material-ui/core/Input'\r\nimport { TextField } from '@material-ui/core';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport LoadderButton from '../../Layouts/LoadderButton';\r\nimport AuthApi from '../../Services/Authapi';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport FontAwesomeIconComponent from '../../Layouts/FontAwesomeIconComponent';\r\nimport { SignalCellularNull } from '@material-ui/icons';\r\nimport Authapi from '../../Services/Authapi';\r\nimport swal from 'sweetalert';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport { now } from 'moment';\r\nimport moment from 'moment';\r\nimport ls from \"local-storage\";\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'space-around',\r\n        overflow: 'hidden',\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n    gridList: {\r\n        width: 500,\r\n        height: 450,\r\n    },\r\n    details: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    content: {\r\n        flex: '1 0 auto',\r\n    },\r\n    cover: {\r\n        width: 151,\r\n    },\r\n    controls: {\r\n        display: 'flex',\r\n        alignItems: 'left',\r\n        paddingLeft: theme.spacing(1),\r\n        paddingBottom: theme.spacing(1),\r\n    },\r\n    playIcon: {\r\n        height: 38,\r\n        width: 38,\r\n    },\r\n    hr: {\r\n        borderTop: \"3px solid #1B6E95\",\r\n    }\r\n\r\n}));\r\n\r\nconst iniEvent = {\r\n    eventName: \"\",\r\n    eventdate: \"\",\r\n    event_Id: 0,\r\n}\r\n\r\n\r\n\r\n\r\nconst Show = (props) => {\r\n    const classes1 = useStyles();\r\n    const classes = props;\r\n    const [editValues, setEditValues] = useState(iniEvent);\r\n    const [apiImages, setApiImages] = useState({ images: [] })\r\n    // const [stringImages, setStringImages] = useState({ images: [] });\r\n\r\n\r\n\r\n    const getEventData = async () => {\r\n        let eventId = props.history.location.pathname.split('/')[props.history.location.pathname.split('/').length - 1];\r\n        console.log(eventId)\r\n        let event = await AuthApi.singleEvent(eventId);\r\n        console.log(event)\r\n        let event_Id = eventId\r\n\r\n        let eventName = (event.status === true && event.data && event.data.name && (event.data.name !== null || event.data.name !== false)) ? event.data.name : null;\r\n        let eventdate = (event.status === true && event.data && event.data.date) ? event.data.date : null;\r\n        let images = (event.status === true && event.data && event.data.images) ? event.data.images : null;\r\n        // console.log(images)\r\n        let ds = JSON.parse(images)\r\n        // console.log(ds);\r\n\r\n\r\n        setEditValues({\r\n            eventName: eventName,\r\n            eventdate: eventdate,\r\n            event_Id: event_Id,\r\n\r\n\r\n        });\r\n\r\n\r\n        setApiImages({\r\n            images: ds\r\n        })\r\n\r\n\r\n    }\r\n    useEffect(\r\n        () =>\r\n            setTimeout(\r\n                () => getEventData(),\r\n                500), []);\r\n\r\n\r\n    // const renderApiPhotos = (source) => {\r\n    //     return source.map((photo, index) => {\r\n    //         // stringImages.images.push(selectedImages)\r\n    //         return <div key={Math.random()} style={{ float: \"left\" }}>\r\n    //             <img src={photo} key={photo} alt=\"User profile image\" style={{ padding: \"10px\" }} width=\"150px\" height=\"150px\" />\r\n\r\n    //         </div>\r\n    //     })\r\n\r\n\r\n    // }\r\n\r\n    const renderApiPhotos = (source) => {\r\n        return <GridList cellHeight={160} className={classes.gridList} cols={3}>\r\n            {source.map((photo, index) => (\r\n                <GridListTile key={photo} cols={index.cols || 1} >\r\n                    <img src={photo} alt=\"User profile image\" width=\"250px\" height=\"250px\" />\r\n                </GridListTile>\r\n            ))}\r\n        </GridList>\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Header\r\n                {...props}\r\n                authUser={props.authUser}\r\n                component={\r\n                    <div>\r\n                        <Card className={classes.root} style={{ marginBottom: '3%' }}>\r\n                            <CardContent>\r\n                                <Breadcrumb\r\n                                    {...props}\r\n                                    primaryPageName=\"Event\"\r\n                                    primaryPageLink=\"/event\"\r\n                                    isSecondaryPage={true}\r\n                                    secondaryPageName=\"View Event\" />\r\n                            </CardContent>\r\n                        </Card>\r\n                        <Grid container className={classes.root} spacing={2} >\r\n                            <Grid item xs={6} >\r\n                                <Card className={classes.root}>\r\n                                    <CardContent>\r\n                                        <Grid container className={classes1.controls} spacing={3}  >\r\n                                            <Grid container item xs={12} spacing={3}>\r\n                                                <Typography style={{ color: \"#1B6E95\" }} variant=\"h4\"> View Event</Typography>\r\n                                            </Grid>\r\n                                        </Grid>\r\n\r\n                                        <Grid container className={classes.root} spacing={5}>\r\n                                            <Grid item xs={4}></Grid>\r\n                                            <Grid item xs={4}></Grid>\r\n                                            <Grid item xs={4}></Grid>\r\n                                        </Grid>\r\n                                        <Grid container className={classes1.controls} spacing={3}>\r\n                                            <Grid item xs={4}>\r\n\r\n                                                <Typography style={{ float: 'left' }} variant=\"h6\">Event-Name  :</Typography>\r\n\r\n                                            </Grid>\r\n                                            <Grid item xs={6}>\r\n\r\n                                                <Typography style={{ float: 'left' }} display=\"block\">\r\n                                                    {editValues.eventName}\r\n                                                </Typography>\r\n\r\n                                            </Grid>\r\n\r\n                                        </Grid>\r\n                                        <Grid container className={classes1.controls} spacing={3}>\r\n                                            <Grid item xs={4}>\r\n                                                <Typography style={{ float: 'left' }} variant=\"h6\">Event-Date  :</Typography>\r\n                                            </Grid>\r\n                                            <Grid item xs={6}>\r\n\r\n                                                <Typography style={{ float: 'left' }} display=\"block\">{editValues.eventdate}</Typography>\r\n\r\n                                            </Grid>\r\n\r\n                                        </Grid>\r\n\r\n                                        <Grid container className={classes1.controls} spacing={5} >\r\n                                            <Grid item xs={4}>\r\n                                                <Typography style={{ float: 'left' }} variant=\"h6\">Event Iamges  :</Typography>\r\n                                            </Grid>\r\n                                            <Grid item xs={6}>\r\n                                                {/* <div style={{ float: \"left\" }}> */}\r\n                                                {/* <Card> */}\r\n                                                {/* <GridList cellHeight={135} className={classes.gridList} cols={3}> */}\r\n                                                {renderApiPhotos(apiImages.images)}\r\n                                                {/* </GridList> */}\r\n\r\n                                                {/* </Card> */}\r\n                                                {/* </div> */}\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </CardContent>\r\n                                </Card>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                    </div>\r\n                } />\r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Show;","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Profile\\Profile.js",["369","370","371","372","373","374","375","376","377","378","379","380","381","382","383"],"D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\LoadderButton.js",["384"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { green } from '@material-ui/core/colors';\r\nimport Button from '@material-ui/core/Button';\r\nimport { Component } from 'react';\r\n\r\n\r\nclass LoadderButton extends Component {\r\n \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        loading: false,\r\n    }\r\n    \r\n  } \r\n  \r\n   handleButtonClick = async () => {\r\n      this.setState({\r\n        loading: true\r\n      })\r\n      if(this.props && typeof this.props.onClickFn === 'function') {\r\n        await this.props.onClickFn();\r\n      }\r\n  }\r\n\r\n  render() {\r\n    const classes = {\r\n      root: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n      },\r\n      wrapper: {\r\n        margin: '10% auto',\r\n        position: 'relative',\r\n      },\r\n      buttonSuccess: {\r\n        backgroundColor: green[500],\r\n        '&:hover': {\r\n          backgroundColor: green[700],\r\n        },\r\n      },\r\n      fabProgress: {\r\n        color: green[500],\r\n        position: 'absolute',\r\n        top: -6,\r\n        left: -6,\r\n        zIndex: 1,\r\n      },\r\n      buttonProgress: {\r\n        color: green[500],\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        marginTop: -12,\r\n        marginLeft: -12,\r\n      },\r\n    };\r\n    return(\r\n    \r\n             <div className={classes.root}>\r\n                  <div className={classes.wrapper}>\r\n     <Button\r\n          type={(this.props && this.props.btnType) ? this.props.btnType : 'button'}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          disabled={this.state.loading}\r\n          onClick={this.handleButtonClick}\r\n        >\r\n          {this.props.btnText}\r\n        </Button>\r\n        {this.state.loading && <CircularProgress size={20} />}\r\n      </div>\r\n    </div>\r\n      \r\n    )\r\n  }\r\n}\r\n\r\nexport default LoadderButton;\r\n\r\n// export default function LoadderButton(props) {\r\n//   const classes = useStyles();\r\n//   const [loading, setLoading] = React.useState(false);\r\n\r\n//   const handleButtonClick = async () => {\r\n//     setLoading(true);\r\n//     if (props && typeof props.onClickFn === 'function') {\r\n//       await props.onClickFn();\r\n//     }\r\n//     setLoading(false);\r\n//   };\r\n\r\n//   return (\r\n//     <div className={classes.root}>\r\n//       <div className={classes.wrapper}>\r\n//         <Button\r\n//           type={(props && props.btnType) ? props.btnType : 'button'}\r\n//           variant=\"contained\"\r\n//           color=\"primary\"\r\n//           disabled={loading}\r\n//           onClick={handleButtonClick}\r\n//         >\r\n//           {props.btnText}\r\n//         </Button>\r\n//         {loading && <CircularProgress size={24} className={classes.buttonProgress} />}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n","D:\\xampp\\htdocs\\cpsi-ems\\src\\Config.js",["385"],"export default {\r\n    apiurl: (process.env.NODE_ENV === 'development') ? \"http://cspi-ems-api.localhost.com/\" : \"https://emsapi.cherrypiksoftware.com/\",\r\n    authApis: {\r\n        login: \"api/auth/login\",\r\n        logout: \"api/auth/logout\",\r\n        refreshToken: \"api/auth/refresh\",\r\n    },\r\n    apis: {\r\n        userList: \"api/users\",\r\n        authUser: \"api/users/me\",\r\n        userInTime: \"api/emp/in-time\",\r\n        userOutTime: \"api/emp/out-time\",\r\n        getPermission: \"api/permission\",\r\n        createPermission: \"api/permission\",\r\n        updatePermission: \"api/permission/\",\r\n        deletePermission: \"api/permission/remove/\",\r\n        getRole: \"api/role\",\r\n        createRole: \"api/role\",\r\n        deleteRole: \"api/role/remove/\",\r\n        deleteUser: \"api/users/remove/\",\r\n        updateRole: \"api/role/\",\r\n        updateImg: \"api/upload\",\r\n        deleteImg: \"api/remove-file\",\r\n        createUser: \"api/users/create\",\r\n        editUser: \"api/users/update/\",\r\n        singleUser: \"api/users/\",\r\n        dureTime: \"api/emp/totalDurationTime\",\r\n        holidayLeave: \"api/holiday-leave\",\r\n        removeLeave: \"api/holiday-leave/\",\r\n        eidtLeave: \"api/holiday-leave/\",\r\n        singleLeave: \"api/holiday-leave/\",\r\n        createTicket: \"api/leave\",\r\n        EditTicket: \"api/leave/update-status/\",\r\n        singleTicket: \"api/leave/edit-status/\",\r\n        getAttandance: \"api/users/get-working-duration/\",\r\n        getEvent: \"api/event/\",\r\n        createEvent: \"api/event\",\r\n        DeleteEvent: \"api/event/\",\r\n        singleEvent: \"api/event/\",\r\n        editEvent: \"api/event/\",\r\n        removeImage: \"api/removeEventImage/\",\r\n        createUpcomingEvent: \"api/upcomingevent\",\r\n        uploadEventImg: \"api/uploadEventFile\",\r\n        getAllEvent: \"api/upcomingevent\",\r\n        AllDeleteEvent: \"api/upcomingevent/\",\r\n        singleUpcomingEvent: \"api/upcomingevent/\",\r\n        EditupcomingEvent: \"api/upcomingevent/\",\r\n        deleteUpcomingImage: \"api/removeEventFile\",\r\n        addSalary: \"api/users/add-salary/\",\r\n        AllSalarydata: \"api/user/salary/\"\r\n    }\r\n};","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\Nav.js",[],"D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\Forms\\UserForms\\AddForm.js",["386","387","388","389","390","391","392","393","394","395","396"],"import React, { useState, useEffect } from 'react';\r\nimport './AddForm.css';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport AuthApi from '../../../Services/Authapi';\r\nimport swal from 'sweetalert';\r\nimport ls from \"local-storage\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport FontAwesomeIconComponent from '../../../Layouts/FontAwesomeIconComponent';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nconst iniuservalid = {\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    email: \"\",\r\n    gender: \"\",\r\n    dob: \"\",\r\n    photo: null,\r\n    imageName: \"\",\r\n    qualification: \"\",\r\n    last_organization: \"\",\r\n    password: \"\",\r\n    roleName: \"\",\r\n    role: false\r\n\r\n}\r\n\r\n\r\nconst Addform = (props) => {\r\n    const classes = props;\r\n    const [roleOptions] = React.useState([]);\r\n    const [formValues, setFormValues] = useState(iniuservalid);\r\n    const [formErrors, setFormErrors] = useState({});\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n\r\n\r\n    const submitForm = () => {\r\n        console.log(formValues);\r\n    };\r\n\r\n\r\n    const handleChange1 = (e) => {\r\n        const { name, value } = e.target;\r\n        // console.log(value);\r\n        setFormValues({ ...formValues, [name]: value });\r\n        // console.log(formValues);\r\n    };\r\n\r\n\r\n    const validate = (values) => {\r\n        let errors = {};\r\n        const regex = /^[a-zA-Z]/;\r\n        const emailRegx = /^[a-zA-Z0-9]+@+[a-zA-Z0-9]+.+[A-z]/;\r\n        const dobRegx = /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/;\r\n        const passRegx = /^[#\\w@_-]{8,20}$/;\r\n\r\n\r\n        if (!values.firstName) {\r\n            errors.firstName = \"Cannot be blank\";\r\n        } else if (!regex.test(values.firstName)) {\r\n            errors.firstName = \"Invalid firstName format\";\r\n        }\r\n\r\n        if (!values.lastName) {\r\n            errors.lastName = \"Cannot be blank\";\r\n        } else if (!regex.test(values.lastName)) {\r\n            errors.lastName = \"Invalid lastName format\";\r\n        }\r\n\r\n        if (!values.email) {\r\n            errors.email = \"Cannot be  blank\";\r\n        } else if (!emailRegx.test(values.email)) {\r\n            errors.email = \"Invalid email format\"\r\n        }\r\n\r\n        if (!values.dob) {\r\n            errors.dob = \"Cannot be  blank\";\r\n        } else if (!dobRegx.test(values.dob)) {\r\n            errors.dob = \"Invalid dob format\"\r\n        }\r\n\r\n        if (!values.qualification) {\r\n            errors.qualification = \"Cannot be blank\";\r\n        } else if (!regex.test(values.qualification)) {\r\n            errors.qualification = \"Invalid qualification format\";\r\n        }\r\n\r\n        if (!values.last_organization) {\r\n            errors.last_organization = \"Cannot be blank\";\r\n        } else if (!regex.test(values.last_organization)) {\r\n            errors.last_organization = \"Invalid last_organization format\";\r\n        }\r\n\r\n        if (!values.password) {\r\n            errors.password = \"Cannot be blank\";\r\n        } else if (!passRegx.test(values.password)) {\r\n            errors.password = \"Password must be require\";\r\n        }\r\n\r\n        if (!values.roleName) {\r\n            errors.roleName = \"Cannot be blank\";\r\n        }\r\n\r\n        return errors;\r\n    };\r\n\r\n\r\n\r\n\r\n    async function RoleData() {\r\n        let role = await AuthApi.getRole();\r\n        //    console.log(rolee); \r\n        if (role && role.status === true) {\r\n            if (Object.keys(role.data).length > 0) {\r\n                Object.keys(role.data).forEach((key) => {\r\n                    roleOptions.push(<MenuItem key={key} value={role.data[key].name}>{role.data[key].name}</MenuItem>)\r\n                })\r\n            }\r\n            else {\r\n                roleOptions.push(<MenuItem value=\"\"><em>Select Role</em></MenuItem>);\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n    }\r\n    React.useEffect(() => RoleData(), []);\r\n\r\n\r\n\r\n\r\n    const imgUpload = async (e) => {\r\n        const postData = new FormData();\r\n        postData.append('file', e.target.files[0]);\r\n        console.log(postData);\r\n        let updaImg = await AuthApi.updateImg(postData);\r\n        if (updaImg && updaImg.status === true) {\r\n\r\n            setFormValues({\r\n                ...formValues,\r\n                photo: updaImg.data.image_url,\r\n                imageName: updaImg.data.image_name\r\n            })\r\n\r\n        }\r\n\r\n    }\r\n\r\n    const removeImg = async (e) => {\r\n        let imageLink = formValues.photo;\r\n        imageLink = imageLink.substr(imageLink.indexOf('/', 7) + 1)\r\n        let remImg = await AuthApi.deleteImg(imageLink);\r\n        if (remImg && remImg.status === true) {\r\n            setFormValues({\r\n                ...formValues,\r\n                photo: null,\r\n                imageName: null\r\n            })\r\n\r\n        } else {\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        setFormErrors(validate(formValues));\r\n        setIsSubmitting(true);\r\n\r\n\r\n\r\n    }\r\n\r\n    useEffect(async () => {\r\n        if (Object.keys(formErrors).length === 0 && isSubmitting) {\r\n            await createUser();\r\n        }\r\n    }, [formErrors]);\r\n\r\n\r\n\r\n    const createUser = async () => {\r\n        let create = await AuthApi.createUser(formValues)\r\n\r\n        if (create && create.status === true) {\r\n            props.history.push('/users');\r\n        } else {\r\n            swal({\r\n                title: \"OOPS!\",\r\n                icon: \"fail\",\r\n                message: \"Something went wrong, Please try later!\"\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n\r\n            <form className={classes.form} onSubmit={handleSubmit} >\r\n                <Grid container className={classes.root} spacing={5}>\r\n                    <Grid item xs={4}>\r\n                        <TextField\r\n                            fullWidth\r\n                            id=\"firstName\"\r\n                            name=\"firstName\"\r\n                            label=\"FirstName\"\r\n                            variant=\"outlined\"\r\n                            error={formErrors.firstName && true}\r\n                            value={formValues.firstName}\r\n                            onChange={handleChange1}\r\n                            className={formErrors.firstName && \"input-error\"}\r\n\r\n                        />\r\n                        {formErrors.firstName && (\r\n                            <span className=\"error\">{formErrors.firstName}</span>\r\n                        )}\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <TextField\r\n                            fullWidth\r\n                            id=\"lastName\"\r\n                            name=\"lastName\"\r\n                            label=\"LastName\"\r\n                            variant=\"outlined\"\r\n                            error={formErrors.lastName && true}\r\n                            value={formValues.lastName}\r\n                            onChange={handleChange1}\r\n                            className={formErrors.lastName && \"input-error\"}\r\n\r\n                        />\r\n                        {formErrors.lastName && (\r\n                            <span className=\"error\">{formErrors.lastName}</span>\r\n                        )}\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <TextField\r\n                            fullWidth\r\n                            id=\"email\"\r\n                            name=\"email\"\r\n                            label=\"Email\"\r\n                            variant=\"outlined\"\r\n                            error={formErrors.email && true}\r\n                            value={formValues.email}\r\n                            onChange={handleChange1}\r\n                            className={formErrors.email && \"input-error\"}\r\n\r\n                        />\r\n                        {formErrors.email && (\r\n                            <span className=\"error\">{formErrors.email}</span>\r\n                        )}\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container className={classes.root} spacing={5}>\r\n                    <Grid item xs={4}></Grid>\r\n                    <Grid item xs={4}></Grid>\r\n                    <Grid item xs={4}></Grid>\r\n                </Grid>\r\n                <Grid container className={classes.root} spacing={5} >\r\n                    <Grid item xs={4} style={{ display: 'flex' }}>\r\n                        <FormControl component=\"fieldset\">\r\n                            <Grid container className={classes.root} spacing={4} >\r\n                                <Grid item xs={12} style={{ display: 'flex' }}>\r\n                                    <FormLabel component=\"legend\">Gender</FormLabel>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <RadioGroup aria-label=\"gender\" name=\"gender\" defaultValue=\"female\" onChange={handleChange1}>\r\n                                <Grid container className={classes.root} spacing={2}>\r\n                                    <Grid textalign='left' item xs={6}><FormControlLabel value=\"female\" control={<Radio />} label=\"Female\" /></Grid>\r\n                                    <Grid item xs={6}><FormControlLabel value=\"male\" control={<Radio />} label=\"Male\" /></Grid>\r\n\r\n                                </Grid>\r\n                            </RadioGroup>\r\n                        </FormControl></Grid>\r\n                    <Grid item xs={4}>\r\n                        <TextField\r\n                            fullWidth\r\n                            id=\"date\"\r\n                            variant=\"outlined\"\r\n                            label=\"Birthday\"\r\n                            name=\"dob\"\r\n                            type=\"date\"\r\n                            error={formErrors.dob && true}\r\n                            value={formValues.dob}\r\n                            onChange={handleChange1}\r\n                            className={formErrors.dob && \"input-error\"}\r\n                            className={classes.textField}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                        />\r\n                        {formErrors.dob && (\r\n                            <span className=\"error\">{formErrors.dob}</span>\r\n                        )}\r\n                    </Grid>\r\n                    <Grid item xs={4} style={{ display: 'flex' }}>\r\n                        {\r\n                            (formValues.photo === null) ?\r\n                                <div>\r\n                                    <input\r\n                                        accept=\"image/*\"\r\n                                        className={classes.input}\r\n                                        name=\"photo\"\r\n                                        id=\"contained-button-file\"\r\n                                        type=\"file\"\r\n                                        onChange={(e) => imgUpload(e)}\r\n                                        style={{ display: 'none' }}\r\n                                    />\r\n                                    <label htmlFor=\"contained-button-file\">\r\n                                        <Button variant=\"contained\" color=\"primary\" component=\"span\" > Upload Profile Picture </Button>\r\n                                    </label>\r\n                                </div>\r\n                                :\r\n                                <div>\r\n                                    <Card className={classes.root}>\r\n                                        <CardContent>\r\n                                            <Grid container className={classes.root} spacing={5}>\r\n                                                <Grid item xs={4}>\r\n                                                    <img src={formValues.photo} alt=\"User profile image\" width=\"35\" height=\"35\" />\r\n                                                </Grid>\r\n                                                <input\r\n                                                    className={classes.input}\r\n                                                    name=\"photo\"\r\n                                                    id=\"photo\"\r\n                                                    type=\"hidden\"\r\n                                                    value={formValues.photo ? formValues.photo : \"\"}\r\n                                                />\r\n                                                <Grid item xs={4}>\r\n                                                    <Typography variant=\"subtitle1\" gutterBottom>\r\n                                                        {formValues.imageName}\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                                <Grid item xs={4}>\r\n                                                    <Button onClick={(e) => removeImg(e)}>\r\n                                                        <FontAwesomeIconComponent classes=\"fa fa-trash\" colorName=\"primary\" fontSize={\"small\"} /></Button>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </CardContent>\r\n                                    </Card>\r\n                                </div>\r\n                        }\r\n\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container className={classes.root} spacing={5}>\r\n                    <Grid item xs={4}><TextField\r\n                        fullWidth id=\"outlined-basic\"\r\n                        name=\"qualification\"\r\n                        label=\"Qualification\"\r\n                        variant=\"outlined\"\r\n                        error={formErrors.qualification && true}\r\n                        value={formValues.qualification}\r\n                        onChange={handleChange1}\r\n                        className={formErrors.dob && \"input-error\"}\r\n\r\n\r\n                    />\r\n                        {formErrors.qualification && (\r\n                            <span className=\"error\">{formErrors.qualification}</span>\r\n                        )}\r\n                    </Grid>\r\n                    <Grid item xs={4}><TextField\r\n                        fullWidth id=\"outlined-basic\"\r\n                        name=\"last_organization\"\r\n                        label=\"Last Organization\"\r\n                        variant=\"outlined\"\r\n                        error={formErrors.last_organization && true}\r\n                        value={formValues.last_organization}\r\n                        onChange={handleChange1}\r\n                        className={formErrors.last_organization && \"input-error\"}\r\n\r\n                    />\r\n                        {formErrors.last_organization && (\r\n                            <span className=\"error\">{formErrors.last_organization}</span>\r\n                        )}\r\n                    </Grid>\r\n                    <Grid item xs={4}><TextField\r\n                        fullWidth id=\"outlined-basic\"\r\n                        name=\"password\"\r\n                        type=\"password\"\r\n                        label=\"Password\"\r\n                        variant=\"outlined\"\r\n                        error={formErrors.password && true}\r\n                        value={formValues.password}\r\n                        onChange={handleChange1}\r\n                        className={formErrors.password && \"input-error\"}\r\n\r\n                    />\r\n                        {formErrors.password && (\r\n                            <span className=\"error\">{formErrors.password}</span>\r\n                        )}\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container className={classes.root} spacing={5}>\r\n                    <Grid item xs={4}>\r\n                        <FormControl variant=\"outlined\" style={{ width: '100%' }}>\r\n                            <InputLabel id=\"demo-simple-select-outlined-label\">Role</InputLabel>\r\n                            <Select\r\n                                labelId=\"demo-simple-select-outlined-label\"\r\n                                id=\"demo-simple-select-outlined\"\r\n                                name=\"roleName\"\r\n                                label=\"Role\"\r\n                                error={formErrors.roleName && true}\r\n                                value={formValues.roleName}\r\n                                onChange={handleChange1}\r\n                                className={formErrors.roleName && \"input-error\"}\r\n\r\n\r\n                            >\r\n                                {roleOptions}\r\n\r\n                            </Select>\r\n\r\n                        </FormControl>\r\n                        {formErrors.roleName && (\r\n                            <span className=\"error\">{formErrors.roleName}</span>\r\n                        )}\r\n\r\n                    </Grid>\r\n                    <Grid item xs={4} ></Grid>\r\n                    <Grid item xs={4} ></Grid>\r\n                </Grid>\r\n                <Grid container className={classes.root} spacing={3}>\r\n                    <Grid item xs={4} style={{ display: 'flex' }}>\r\n                        <Button type=\"submit\" variant=\"contained\" color=\"primary\">Save</Button>\r\n                        <Button type=\"button\" onClick={(e) => { e.preventDefault(); props.history.push('/users') }}>Cancel</Button>\r\n                    </Grid>\r\n                    <Grid item xs={4}></Grid>\r\n                    <Grid item xs={4}></Grid>\r\n                </Grid>\r\n\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Addform;","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\UpcomingEvent\\EditUpcomingEvent.js",["397","398","399","400","401","402","403","404","405","406","407","408","409","410","411","412","413","414","415","416","417","418","419","420","421","422"],"D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Users\\EditUser.js",["423","424","425","426","427","428","429","430","431","432","433","434","435"],"D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\InitComponent.js",[],"D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Leaves\\Leaves1.js",[],"D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\ProtectedRoute.js",[],"D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\LeavesTicket\\EditTicket.js",["436","437","438","439","440","441","442","443","444","445","446","447","448","449","450","451","452"],"import React, { useState, useEffect } from 'react';\r\nimport Header from '../../Layouts/Header';\r\nimport Footer from '../../Layouts/Footer';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Breadcrumb from '../../Layouts/Breadcrumb';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { TextField } from '@material-ui/core';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport LoadderButton from '../../Layouts/LoadderButton';\r\nimport AuthApi from '../../Services/Authapi';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport FontAwesomeIconComponent from '../../Layouts/FontAwesomeIconComponent';\r\nimport { SignalCellularNull } from '@material-ui/icons';\r\nimport Authapi from '../../Services/Authapi';\r\nimport swal from 'sweetalert';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport { now } from 'moment';\r\nimport moment from 'moment';\r\nimport ls from \"local-storage\";\r\n\r\n\r\nconst inileaves = {\r\n    leaveType: \"\",\r\n    ticketMesasge: \"\",\r\n    dateRange: \"\",\r\n    startDate: \"\",\r\n    endDate: \"\",\r\n    leaveStatus: \"\",\r\n    ticket_Id: 0,\r\n}\r\n\r\n\r\n\r\nconst EditTicket = (props) => {\r\n    const classes = props;\r\n    const [editValues, setEditValues] = useState(inileaves);\r\n    const [formErrors, setFormErrors] = useState({});\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n \r\n\r\n    useEffect(() => {\r\n        if (props && props.authToken === false) {\r\n            props.history.push('/login');\r\n        }\r\n    });\r\n\r\n\r\n\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        // console.log(value);\r\n        setEditValues({ ...editValues, [name]: value });\r\n        // console.log(editValues);\r\n    }\r\n\r\n\r\n    // function dateDiffInDays(startDate, endDate) {\r\n    //     // round to the nearest whole number\r\n    //     return Math.round((endDate - startDate) / (1000 * 60 * 60 * 24));\r\n    // }\r\n    // const daysDiff = dateDiffInDays(new Date(editValues.startDate), new Date(editValues.endDate));\r\n    // const dsp = dateDiffInDays(new Date(), new Date(editValues.startDate));\r\n\r\n    const validate = (values) => {\r\n        let errors = {};\r\n        const regex = /^[a-zA-Z]/;\r\n        // const dateR = /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/;\r\n\r\n\r\n\r\n\r\n        // if (!values.leaveType) {\r\n        //     errors.leaveType = \"Cannot be blank\";\r\n        // } else if (!regex.test(values.leaveType)) {\r\n        //     errors.leaveType = \"Invalid firstName format\";\r\n        // }\r\n\r\n\r\n        // if (!values.ticketMesasge) {\r\n        //     errors.ticketMesasge = \"Cannot be blank\";\r\n        // } else if (!regex.test(values.ticketMesasge)) {\r\n        //     errors.ticketMesasge = \"Invalid ticketMesasge format\";\r\n        // }\r\n\r\n        // if (!values.startDate) {\r\n        //     errors.startDate = \"Cannot be  blank\";\r\n        // } else if (!dateR.test(values.startDate)) {\r\n        //     errors.startDate = \"Invalid dob format\"\r\n        // }\r\n        // else {\r\n\r\n\r\n        //     if (dsp < 0) {\r\n        //         errors.startDate = \"you can chooes only Current and future Date\";\r\n\r\n        //     }\r\n        // }\r\n\r\n        // if (!values.endDate) {\r\n        //     errors.endDate = \"Cannot be  blank\";\r\n        // } else if (!dateR.test(values.endDate)) {\r\n        //     errors.endDate = \"Invalid dob format\"\r\n        // } else {\r\n\r\n\r\n        //     if (daysDiff < 0) {\r\n        //         errors.endDate = \"you can chooes only Current and future Date\";\r\n\r\n        //     }\r\n        // }\r\n\r\n        if (!values.leaveStatus) {\r\n            errors.leaveStatus = \"Cannot be blank\";\r\n        } else if (!regex.test(values.leaveStatus)) {\r\n            errors.leaveStatus = \"Invalid firstName format\";\r\n        }\r\n\r\n\r\n\r\n        return errors;\r\n    };\r\n\r\n    const getTicketData = async () => {\r\n        let ticketId = props.history.location.pathname.split('/')[props.history.location.pathname.split('/').length - 1];\r\n        let ticket = await AuthApi.singleTicket(ticketId);\r\n        let ticket_Id = ticketId\r\n\r\n        let leaveType = (ticket.status === true && ticket.data[0] && ticket.data[0].leaveType && (ticket.data[0].leaveType !== null || ticket.data[0].leaveType !== false)) ? ticket.data[0].leaveType : null;\r\n        let ticketMesasge = (ticket.status === true && ticket.data[0] && ticket.data[0].ticket_mesasge) ? ticket.data[0].ticket_mesasge : null;\r\n        let dateRangeArr = (ticket.status === true && ticket.data[0] && ticket.data[0].date_range) ? ticket.data[0].date_range : null;\r\n        let Status = (ticket.status === true && ticket.data[0] && ticket.data[0].status) ? ticket.data[0].status : null;\r\n\r\n        setEditValues({\r\n            leaveType: leaveType,\r\n            ticketMesasge: ticketMesasge,\r\n            startDate: dateRangeArr[0],\r\n            endDate: dateRangeArr[1],\r\n            leaveStatus: Status,\r\n            ticket_Id: ticket_Id,\r\n        });\r\n\r\n\r\n    }\r\n    useEffect(\r\n        () =>\r\n            setTimeout(\r\n                () => getTicketData(),\r\n                500), []);\r\n\r\n\r\n\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        setFormErrors(validate(editValues));\r\n        setIsSubmitting(true);\r\n\r\n    }\r\n\r\n    useEffect(async () => {\r\n        if (Object.keys(formErrors).length === 0 && isSubmitting) {\r\n            await editTickets();\r\n        }\r\n    }, [formErrors]);\r\n\r\n\r\n    // function  diffday() {\r\n    //     const a = moment(editValues.startDate);\r\n    //     const b = moment(editValues.endDate);\r\n    //     const dateRangeArr = [];\r\n\r\n\r\n    //         var startDate = editValues.startDate; \r\n    //         dateRangeArr.push(startDate);\r\n\r\n    //         var endDate = editValues.endDate; \r\n    //         dateRangeArr.push(endDate);\r\n\r\n\r\n    //     editValues.dateRange = dateRangeArr;\r\n    //     editValues.noOfDays = b.diff(a, 'days')\r\n\r\n    // }\r\n\r\n    const editTickets = async (id) => {\r\n        let status = await AuthApi.updateTicket(editValues, editValues.ticket_Id);\r\n        if (status && status.status === true) {\r\n            props.history.push('/tickets');\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Header\r\n                {...props}\r\n                authUser={props.authUser}\r\n                component={\r\n                    <div>\r\n                        <Card className={classes.root} style={{ marginBottom: '3%' }}>\r\n                            <CardContent>\r\n                                <Breadcrumb\r\n                                    {...props}\r\n                                    primaryPageName=\"LeavesTicket\"\r\n                                    primaryPageLink=\"/tickets\"\r\n                                    isSecondaryPage={true}\r\n                                    secondaryPageName=\"edit\" />\r\n                            </CardContent>\r\n                        </Card>\r\n                        <Grid container className={classes.root} spacing={2}>\r\n                            <Grid item xs={12}>\r\n                                <Card className={classes.root}>\r\n                                    <CardContent>\r\n                                        <Typography variant=\"h2\">Edit Ticket</Typography>\r\n                                        <form className={classes.form} onSubmit={handleSubmit} >\r\n                                            <Grid container className={classes.root} spacing={5}>\r\n                                                <Grid item xs={3}>\r\n                                                    <FormControl variant=\"outlined\" style={{ width: '100%' }} disabled >\r\n                                                        <InputLabel id=\"demo-simple-select-outlined-label\">Leave-Type</InputLabel>\r\n                                                        <Select\r\n                                                            labelId=\"demo-simple-select-outlined-label\"\r\n                                                            id=\"demo-simple-select-outlined\"\r\n                                                            label=\"leave-Type\"\r\n                                                            name=\"leaveType\"\r\n                                                            // error = {formErrors.leaveType && true}\r\n                                                            value={(editValues && editValues.leaveType !== null) ? editValues.leaveType : \"\"}\r\n                                                            // focused={(editValues && editValues.leaveType !== null) ? true : false}\r\n                                                            className={formErrors.leaveType && \"input-error\"}\r\n                                                        >\r\n\r\n                                                            <MenuItem value=\"full-leave\">Full leave</MenuItem>\r\n                                                            <MenuItem value=\"half-leave\">Half leave</MenuItem>\r\n                                                            <MenuItem value=\"sick-leave\">Sick leave</MenuItem>\r\n                                                            <MenuItem value=\"early-leave\">Early leave</MenuItem>\r\n\r\n\r\n                                                        </Select>\r\n                                                    </FormControl>\r\n                                                    {/* {formErrors.leaveType && (\r\n                                                            <span className=\"error\">{formErrors.leaveType}</span>\r\n                                                        )} */}\r\n                                                </Grid>\r\n\r\n\r\n                                                <Grid item xs={4}>\r\n                                                    <TextField\r\n                                                        disabled\r\n                                                        fullWidth\r\n                                                        id=\"date\"\r\n                                                        variant=\"outlined\"\r\n                                                        label=\"Start-date\"\r\n                                                        name=\"startDate\"\r\n                                                        type=\"date\"\r\n                                                        // error={formErrors.startDate && true}\r\n                                                        value={(editValues && editValues.startDate !== null) ? editValues.startDate : null}\r\n                                                        // focused={(editValues && editValues.startDate !== null) ? true : false}\r\n                                                        // onChange={handleChange}\r\n                                                        className={formErrors.startDate && \"input-error\"}\r\n                                                        className={classes.textField}\r\n                                                        InputLabelProps={{\r\n                                                            shrink: true,\r\n                                                        }}\r\n\r\n                                                    />\r\n                                                    {/* {formErrors.startDate && (\r\n                                                        <span className=\"error\">{formErrors.startDate}</span>\r\n                                                    )} */}\r\n\r\n                                                </Grid>\r\n                                                <h3 style={{ marginTop: \"30px\" }}>To</h3>\r\n                                                <Grid item xs={4}>\r\n                                                    <TextField\r\n                                                        disabled\r\n                                                        fullWidth\r\n                                                        id=\"date\"\r\n                                                        variant=\"outlined\"\r\n                                                        label=\"End-date\"\r\n                                                        name=\"endDate\"\r\n                                                        type=\"date\"\r\n                                                        // error={formErrors.endDate && true}\r\n                                                        value={(editValues && editValues.endDate !== null) ? editValues.endDate : null}\r\n                                                        // focused={(editValues && editValues.endDate !== null) ? true : false}\r\n                                                        // onChange={handleChange}\r\n                                                        className={formErrors.endDate && \"input-error\"}\r\n                                                        className={classes.textField}\r\n                                                        InputLabelProps={{\r\n                                                            shrink: true,\r\n                                                        }}\r\n                                                    />\r\n                                                    {/* {formErrors.endDate && (\r\n                                                        <span className=\"error\">{formErrors.endDate}</span>\r\n                                                    )} */}\r\n\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={7}>\r\n                                                    <TextField\r\n                                                        disabled\r\n                                                        fullWidth\r\n                                                        multiline\r\n                                                        rows={4}\r\n                                                        id=\"ticketMesasge\"\r\n                                                        name=\"ticketMesasge\"\r\n                                                        label=\"Reason for leave\"\r\n                                                        variant=\"outlined\"\r\n                                                        // defaultValue\r\n                                                        // error={formErrors.ticketMesasge && true}\r\n                                                        value={(editValues && editValues.ticketMesasge !== null) ? editValues.ticketMesasge : null}\r\n                                                        // focused={(editValues && editValues.ticketMesasge !== null) ? true : false}\r\n                                                        // onChange={handleChange}\r\n                                                        className={formErrors.ticketMesasge && \"input-error\"}\r\n\r\n                                                    />\r\n                                                    {/* {formErrors.ticketMesasge && (\r\n                                                        <span className=\"error\">{formErrors.ticketMesasge}</span>\r\n                                                    )} */}\r\n                                                </Grid>\r\n\r\n                                                               \r\n                                                <Grid item xs={3}>\r\n                                             \r\n                                                 <FormControl  variant=\"outlined\" style={{ width: '100%' }} disabled={ls('roles') === 'Super Admin'  ? false : true }> \r\n                                                        <InputLabel id=\"demo-simple-select-outlined-label1\">Leave-Status</InputLabel> \r\n                                                        <Select\r\n                                                            autoFocus\r\n                                                            labelId=\"demo-simple-select-outlined-label1\"\r\n                                                            id=\"demo-simple-select-outlined1\"\r\n                                                            label=\"leave-status\"\r\n                                                            name=\"leaveStatus\"\r\n                                                            error={formErrors.leaveStatus && true}\r\n                                                            value={(editValues && editValues.leaveStatus !== null) ? editValues.leaveStatus : \"\"}\r\n                                                            // focused={(editValues && editValues.leaveStatus !== null) ? true : false}\r\n                                                            onChange={handleChange}\r\n                                                            className={formErrors.leaveStatus && \"input-error\"}\r\n                                                        > \r\n                                                            <MenuItem value=\"pending\">Pending</MenuItem>\r\n                                                            <MenuItem value=\"approved\">Approved</MenuItem>\r\n                                                            <MenuItem value=\"declined\">Declined</MenuItem>\r\n                                                            <MenuItem value=\"canceled\">Canceled</MenuItem>\r\n                                                        </Select>\r\n                                                    </FormControl> \r\n                                                    {formErrors.leaveStatus && (\r\n                                                        <span className=\"error\">{formErrors.leaveStatus}</span>\r\n                                                    )} \r\n                                                </Grid>\r\n\r\n\r\n                                            </Grid>\r\n\r\n\r\n\r\n\r\n\r\n                                            <Grid container className={classes.root} spacing={3}>\r\n                                                <Grid item xs={4} style={{ display: 'flex' }}>\r\n                                                    <Button type=\"submit\" style={{ marginTop: \"10px\" }} variant=\"contained\" color=\"primary\">Edit</Button>\r\n                                                    <Button type=\"button\" style={{ marginTop: \"10px\" }} onClick={(e) => { e.preventDefault(); props.history.push('/tickets') }}>Cancel</Button>\r\n                                                </Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                            </Grid>\r\n                                        </form>\r\n\r\n                                    </CardContent>\r\n                                </Card>\r\n                            </Grid>\r\n                            <Grid item xs={6}></Grid>\r\n                        </Grid>\r\n                    </div>\r\n                } />\r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EditTicket;","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\Footer.js",["453"],"import React, { Component } from \"react\";\r\n\r\nclass Footer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return <div className=\"footer\"> <p> Developed By: Dhaval Shah</p></div>\r\n  }\r\n}\r\n\r\nexport default Footer;","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\PageLoader.js",["454"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    '& > * + *': {\r\n      marginLeft: theme.spacing(2),\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function PageLoader() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div style={{ display: 'grid', height: '100vh' }}><div style={{ margin: 'auto', verticalAlign: 'middle' }}> <CircularProgress /></div></div>\r\n  );\r\n}\r\n","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\Breadcrumb.js",[],"D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\TableComponent.js",["455","456","457","458","459","460"],"import React, { useEffect } from 'react';\r\nimport { withStyles, makeStyles, useTheme, lighten } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\nimport PropTypes from 'prop-types';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Button from '@material-ui/core/Button';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport FontAwesomeIconComponent from '../Layouts/FontAwesomeIconComponent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ls from \"local-storage\";\r\n\r\n\r\nexport default function TableComponent(props) {\r\n  const classes = useStyles();\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n  const [order, setOrder] = React.useState(props.tableTh[0]);\r\n  const [orderBy, setOrderBy] = React.useState(props.tableTh[0]);\r\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, props.tableData.length - page * rowsPerPage);\r\n\r\n  const handleRequestSort = (property) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleChangePage = (newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const getActionBtns = (props, row) => {\r\n    return <div>\r\n      <Grid container spacing={3}>\r\n        {(props.actionBtns.indexOf('update') > -1) ? <Grid item xs={1}> <IconButton variant=\"contained\" color=\"primary\" onClick={(e) => { (props.openPopUpUpdate !== false) ? props.openPopUpUpdate(row) : props.history.push(props.updateRoute + '/' + row.id) }}><FontAwesomeIconComponent classes=\"fa fa-edit\" colorName=\"primary\" fontSize={\"small\"} /></IconButton> </Grid> : \"\"}\r\n        {(props.actionBtns.indexOf('delete') > -1) ? <Grid item xs={1}> <IconButton variant=\"contained\" color=\"primary\" onClick={(e) => { props.removeRow(row.id) }}><FontAwesomeIconComponent classes=\"fa fa-trash\" colorName=\"primary\" fontSize={\"small\"} /></IconButton> </Grid> : \"\"}\r\n        {(props.actionBtns.indexOf('show') > -1) ? <Grid item xs={1}> <IconButton variant=\"contained\" color=\"primary\" onClick={(e) => { e.preventDefault(); props.history.push('/show' + '/' + row.id) }} ><FontAwesomeIconComponent classes=\"far fa-eye\" colorName=\"primary\" fontSize={\"small\"} /></IconButton> </Grid> : \"\"}\r\n      </Grid>\r\n    </div>\r\n  };\r\n\r\n  // let th = [];\r\n  useEffect(() => {\r\n    if (props.tablePagestatus === true) {\r\n      let rawCount = props.tableCount\r\n      let perPage = rowsPerPage\r\n      let answer = rawCount / perPage;\r\n      let page2 = page\r\n      if (page2 > (rawCount % perPage)) {\r\n        if ((rawCount % perPage) === 0) {\r\n          handleChangePage(answer - 1)\r\n        } else {\r\n          handleChangePage(Math.floor(answer))\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  let td = [];\r\n  let tr = [];\r\n  if (Object.keys(props.tableData).length > 0) {\r\n    let tableRows = props.tableData;\r\n\r\n    if (rowsPerPage > 0) {\r\n      tableRows = props.tableData.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage);\r\n    }\r\n    tableRows = stableSort(tableRows, getComparator(order, orderBy))\r\n    Object.keys(tableRows).forEach((key) => {\r\n      Object.keys(tableRows[key]).forEach((i) => {\r\n        if (props.colNameToShow.indexOf(i) > -1) {\r\n          td.push(<TableCell key={i} align=\"left\">{tableRows[key][i]}</TableCell>)\r\n        }\r\n      })\r\n      // td.push()\r\n      tr.push(<StyledTableRow key={key}>{td}<TableCell align=\"left\">{getActionBtns(props, tableRows[key])}</TableCell></StyledTableRow>);\r\n      td = [];\r\n    })\r\n\r\n    // if (emptyRows > 0) {\r\n    //   tr.push(<TableRow style={{ height: 67 * emptyRows }}> <TableCell colSpan={Object.keys(props.tableTh).length} /> </TableRow>)\r\n    // }\r\n  }\r\n  else {\r\n    // td.push(<TableCell colSpan={Object.keys(props.tableTh).length} align=\"center\">No data found</TableCell>)\r\n    tr.push(<StyledTableRow key={1}><TableCell colSpan={Object.keys(props.tableTh).length} align=\"center\">No   found</TableCell></StyledTableRow>);\r\n\r\n  }\r\n\r\n  const url = window.location.href;\r\n\r\n\r\n\r\n  return (\r\n    <TableContainer component={Paper} style={{ marginBottom: '5%' }}>\r\n      <Typography variant=\"h2\">Manage {props.modelName}</Typography>\r\n      <Button variant=\"contained\" color=\"primary\" style={{ float: \"right\", margin: \"22px\", display: url == 'http://localhost:3000/event' ? ls('roles') === 'Super Admin' ? 'block' : 'none' : 'block' }} onClick={(e) => { (props.openPopUp !== false) ? props.openPopUp() : props.history.push(props.addRoute) }} >Add</Button>\r\n      <Table className={classes.table} aria-label=\"customized table\" style={{ tableLayout: 'fixed', width: '100%' }}>\r\n        <TableHead>\r\n          <EnhancedTableHead\r\n            classes={classes}\r\n            order=\"desc\"\r\n            orderBy=\"asc\"\r\n            onRequestSort={handleRequestSort}\r\n            rowCount={props.tableTh.length}\r\n            tableTh={props.tableTh}\r\n          />\r\n        </TableHead>\r\n        <TableBody>\r\n          {tr}\r\n        </TableBody>\r\n        <TableFooter>\r\n          <TableRow>\r\n            <TablePagination\r\n              rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\r\n              colSpan={3}\r\n              // count={props.tableData.length}\r\n              count={props.tableCount}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              SelectProps={{\r\n                inputProps: { 'aria-label': 'rows per page' },\r\n                native: true,\r\n              }}\r\n              onChangePage={handleChangePage}\r\n              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n              ActionsComponent={TablePaginationActions}\r\n            />\r\n          </TableRow>\r\n        </TableFooter>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    '&:nth-of-type(odd)': {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 700,\r\n  },\r\n  head: {\r\n    backgroundColor: '#1B6E95',\r\n    color: '#fff',\r\n    margin: '0 auto',\r\n    '& th': {\r\n      color: '#fff',\r\n    },\r\n    '& th > span:hover': {\r\n      color: '#fff',\r\n    },\r\n    '& th:hover': {\r\n      color: '#fff',\r\n    },\r\n    '& th:active': {\r\n      color: '#fff',\r\n    },\r\n    '& th > span:active': {\r\n      color: '#fff',\r\n    }\r\n  }\r\n});\r\n\r\nconst useStyles1 = makeStyles((theme) => ({\r\n  root: {\r\n    flexShrink: 0,\r\n    marginLeft: theme.spacing(2.5),\r\n  },\r\n}));\r\n\r\n\r\n\r\nfunction TablePaginationActions(props) {\r\n  // console.log(props.tablePage)\r\n  const classes = useStyles1();\r\n  const theme = useTheme();\r\n  const { count, page, rowsPerPage, onChangePage } = props;\r\n\r\n\r\n  const handleFirstPageButtonClick = () => {\r\n    onChangePage(0);\r\n  };\r\n\r\n  const handleBackButtonClick = () => {\r\n    onChangePage(page - 1);\r\n  };\r\n\r\n  const handleNextButtonClick = () => {\r\n    onChangePage(page + 1);\r\n  };\r\n\r\n  const handleLastPageButtonClick = () => {\r\n    onChangePage(Math.max(0, Math.ceil(count / rowsPerPage) - 1));\r\n  };\r\n\r\n  // console.log(props.count)\r\n  return (\r\n    <div className={classes.root}>\r\n      <IconButton\r\n        onClick={handleFirstPageButtonClick}\r\n        disabled={page === 0}\r\n        aria-label=\"first page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\r\n      </IconButton>\r\n      <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\r\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleNextButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"next page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleLastPageButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"last page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n\r\nTablePaginationActions.propTypes = {\r\n  count: PropTypes.number.isRequired,\r\n  onChangePage: PropTypes.func.isRequired,\r\n  page: PropTypes.number.isRequired,\r\n  rowsPerPage: PropTypes.number.isRequired,\r\n};\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const { classes, order, orderBy, onRequestSort } = props;\r\n  const createSortHandler = (property) => () => {\r\n    onRequestSort(property);\r\n  };\r\n\r\n  return (\r\n    <TableRow className={classes.head}>\r\n      {props.tableTh.map((headCell) => (\r\n        <TableCell\r\n          key={headCell.id}\r\n          align={headCell.numeric ? 'right' : 'left'}\r\n          // padding=\"10%\"\r\n          maxwidth=\"300px\"\r\n          whitespace=\"normal\"\r\n          sortDirection={orderBy === headCell.id ? order : false}\r\n        >\r\n          {\r\n            (headCell.sortable === true) ? <TableSortLabel\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {(orderBy === headCell.id) ? (\r\n                <span className={classes.visuallyHidden}>\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel> : headCell.label\r\n          }\r\n        </TableCell>\r\n      ))}\r\n    </TableRow>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  // onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Login.js",["461","462","463","464","465","466","467","468","469","470","471","472","473"],"D:\\xampp\\htdocs\\cpsi-ems\\src\\ScreenShot.js",[],"D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Users\\HandleUser.js",["474","475","476","477","478","479","480","481","482","483","484","485","486","487","488","489","490"],"import React, { Component } from 'react';\r\nimport Header from '../../Layouts/Header';\r\nimport Footer from '../../Layouts/Footer';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Breadcrumb from '../../Layouts/Breadcrumb';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { TextField } from '@material-ui/core';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport LoadderButton from '../../Layouts/LoadderButton';\r\nimport AuthApi from '../../Services/Authapi';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport FontAwesomeIconComponent from '../../Layouts/FontAwesomeIconComponent';\r\nimport { SignalCellularNull } from '@material-ui/icons';\r\nimport Authapi from '../../Services/Authapi';\r\nimport swal from 'sweetalert';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport AddForm from '../../Layouts/Forms/UserForms/AddForm';\r\n\r\n\r\nclass HandleUser extends Component {\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     this.state = {\r\n    //         users: {\r\n    //             firstName: null,\r\n    //             lastName: null,\r\n    //             email: null,\r\n    //             gender: null,\r\n    //             dob: null,\r\n    //             photo: null,\r\n    //             qualification: null,\r\n    //             last_organization: null,\r\n    //             password: null,\r\n    //             roleName: null,\r\n    //         },\r\n    //         role: false,\r\n    //     }\r\n    // //     this.handleSubmit = this.handleSubmit.bind(this);\r\n    // //     this.updateChange = this.updateChange.bind(this);\r\n    // //     this.imgUpload = this.imgUpload.bind(this);\r\n    // //     this.removeImg = this.removeImg.bind(this);\r\n    // //     this.createUser = this.createUser.bind(this);\r\n    // //    this.roleData_class = this.roleData_class.bind(this);\r\n    // //     this.addRole = this.addRole.bind(this);\r\n    // //    this.roleData_class();\r\n    // }\r\n\r\n    componentWillMount() {\r\n        if (this.props && this.props.authToken === false) {\r\n          this.props.history.push('/login');\r\n        }\r\n       \r\n      }\r\n    \r\n      componentWillReceiveProps(props) {\r\n        if (props && props.authToken === false) {\r\n          props.history.push('/login');\r\n        }\r\n      }\r\n\r\n\r\n    // async handleSubmit(e) {\r\n    //     await this.createUser();\r\n\r\n    // }\r\n\r\n    // addRole(e) {\r\n    //     let roleName = [];\r\n    //     roleName.push(e.target.value)\r\n    //     this.setState({\r\n    //         users: { ...this.state.users, roleName: e.target.value }\r\n    //     })\r\n    // }\r\n\r\n    // updateChange(e) {\r\n    //     this.setState({\r\n    //         users: { ...this.state.users, [e.target.name]: e.target.value }\r\n    //     })\r\n\r\n    // }\r\n\r\n\r\n    // roleData_class = async () => {\r\n    //     let role = await AuthApi.getRole();\r\n    //     this.setState({\r\n    //         role: role.data\r\n    //     })\r\n    //     console.log(this.state.role)\r\n    // }\r\n\r\n    // async imgUpload(e) {\r\n    //     const postData = new FormData();\r\n    //     postData.append('file', e.target.files[0]);\r\n    //     let updateImg = await AuthApi.updateImg(postData);\r\n    //     if (updateImg && updateImg.status === true) {\r\n    //         this.setState({\r\n    //             users: { ...this.state.users, photo: updateImg.data.image_url }\r\n    //         })\r\n    //         this.setState({ uploadedImgName: updateImg.data.image_name })\r\n    //     }\r\n    // }\r\n\r\n    // async removeImg(e) {\r\n    //     let imageLink = this.state.users.photo;\r\n    //     imageLink = imageLink.substr(imageLink.indexOf('/', 7) + 1)\r\n    //     let remImg = await AuthApi.deleteImg(imageLink);\r\n    //     if (remImg && remImg.status === true) {\r\n    //         this.setState({\r\n    //             users: { ...this.state.users, photo: null }\r\n    //         })\r\n    //         this.setState({ uploadedImgName: null })\r\n    //     } else {\r\n\r\n    //     }\r\n\r\n    // }\r\n\r\n    // async createUser() {\r\n    //     let create = await Authapi.createUser(this.state.users)\r\n    //     if (create && create.status === true) {\r\n    //         this.props.history.push('/users');\r\n    //     } else {\r\n    //         swal({\r\n    //             title: \"OOPS!\",\r\n    //             icon: \"fail\",\r\n    //             message: \"Something went wrong, Please try later!\"\r\n    //         })\r\n    //     }\r\n    // }\r\n\r\n    render() {\r\n        const classes = this.props;\r\n        // let roleOptions = [];\r\n        // if (Object.keys(this.state.role).length > 0) {\r\n        //     Object.keys(this.state.role).forEach((key) => {\r\n        //         roleOptions.push(<MenuItem value={this.state.role[key].name}>{this.state.role[key].name}</MenuItem>)\r\n        //     })\r\n        // }\r\n        // else {\r\n        //     roleOptions.push(<MenuItem value=\"\"><em>Select Role</em></MenuItem>);\r\n        // }\r\n        return (\r\n            <div>\r\n                <Header\r\n                    {...this.props}\r\n                    authUser={this.props.authUser}\r\n                    component={\r\n                        <div>\r\n                            <Card className={classes.root} style={{ marginBottom: '3%' }}>\r\n                                <CardContent>\r\n                                    <Breadcrumb\r\n                                        {...this.props}\r\n                                        primaryPageName=\"Users\"\r\n                                        primaryPageLink=\"/users\"\r\n                                        isSecondaryPage={true}\r\n                                        secondaryPageName=\"Add\" />\r\n                                </CardContent>\r\n                            </Card>\r\n                            <Grid container className={classes.root} spacing={2}>\r\n                                <Grid item xs={12}>\r\n                                    <Card className={classes.root}>\r\n                                        <CardContent>\r\n                                            <Typography variant=\"h2\">Add User</Typography>\r\n                                            <AddForm  {...this.props} />\r\n                                            {/* <form className={classes.root} noValidate autoComplete=\"off\">\r\n                                                <Grid container className={classes.root} spacing={5}>\r\n                                                    <Grid item xs={4}><TextField fullWidth id=\"outlined-basic\" name=\"firstName\" label=\"First name\" variant=\"outlined\" onChange={(e) => { this.updateChange(e) }} /></Grid>\r\n                                                    <Grid item xs={4}><TextField fullWidth id=\"outlined-basic\" name=\"lastName\" label=\"Last name\" variant=\"outlined\" onChange={(e) => { this.updateChange(e) }} /></Grid>\r\n                                                    <Grid item xs={4}><TextField fullWidth id=\"outlined-basic\" name=\"email\" label=\"Email-address\" variant=\"outlined\" onChange={(e) => { this.updateChange(e) }} /></Grid>\r\n                                                </Grid>\r\n                                                <Grid container className={classes.root} spacing={5}>\r\n                                                    <Grid item xs={4}></Grid>\r\n                                                    <Grid item xs={4}></Grid>\r\n                                                    <Grid item xs={4}></Grid>\r\n                                                </Grid>\r\n                                                <Grid container className={classes.root} spacing={5} >\r\n                                                    <Grid item xs={4} style={{ display: 'flex' }}>\r\n                                                        <FormControl component=\"fieldset\">\r\n                                                            <Grid container className={classes.root} spacing={4} >\r\n                                                                <Grid item xs={12} style={{ display: 'flex' }}>\r\n                                                                    <FormLabel component=\"legend\">Gender</FormLabel>\r\n                                                                </Grid>\r\n                                                            </Grid>\r\n                                                            <RadioGroup aria-label=\"gender\" name=\"gender\" onChange={(e) => { this.updateChange(e) }} fullWidth>\r\n                                                                <Grid container className={classes.root} spacing={2}>\r\n                                                                    <Grid textAlign=\"left\" item xs={6}><FormControlLabel value=\"female\" control={<Radio />} label=\"Female\" /></Grid>\r\n                                                                    <Grid item xs={6}><FormControlLabel value=\"male\" control={<Radio />} label=\"Male\" /></Grid>\r\n                                                                </Grid>\r\n                                                            </RadioGroup>\r\n                                                        </FormControl></Grid>\r\n                                                    <Grid item xs={4}>\r\n                                                        <TextField\r\n                                                            fullWidth\r\n                                                            id=\"date\"\r\n                                                            label=\"Birthday\"\r\n                                                            name=\"dob\"\r\n                                                            type=\"date\"\r\n                                                            onChange={(e) => { this.updateChange(e) }}\r\n                                                            defaultValue=\"2017-05-24\"\r\n                                                            className={classes.textField}\r\n                                                            InputLabelProps={{\r\n                                                                shrink: true,\r\n                                                            }}\r\n                                                        />\r\n                                                    </Grid>\r\n                                                    <Grid item xs={4} style={{ display: 'flex' }}>\r\n                                                        {\r\n                                                            (this.state.users.photo === null) ?\r\n                                                                <div>\r\n                                                                    <input\r\n                                                                        accept=\"image/*\"\r\n                                                                        className={classes.input}\r\n                                                                        id=\"contained-button-file\"\r\n                                                                        type=\"file\"\r\n                                                                        onChange={(e) => this.imgUpload(e)}\r\n                                                                        style={{ display: 'none' }}\r\n                                                                    />\r\n                                                                    <label htmlFor=\"contained-button-file\">\r\n                                                                        <Button variant=\"contained\" color=\"primary\" component=\"span\" > Upload Profile Picture </Button>\r\n                                                                    </label>\r\n                                                                </div>\r\n                                                                :\r\n                                                                <div>\r\n                                                                    <Card className={classes.root}>\r\n                                                                        <CardContent>\r\n                                                                            <Grid container className={classes.root} spacing={5}>\r\n                                                                                <Grid item xs={4}>\r\n                                                                                    <img src={this.state.users.photo} alt=\"User profile image\" width=\"35\" height=\"35\" />\r\n                                                                                </Grid>\r\n                                                                                <Grid item xs={4}>\r\n                                                                                    <Typography variant=\"subtitle1\" gutterBottom>\r\n                                                                                        {this.state.uploadedImgName}\r\n                                                                                    </Typography>\r\n                                                                                </Grid>\r\n                                                                                <Grid item xs={4}>\r\n                                                                                    <Button onClick={(e) => { this.removeImg(e) }}>\r\n                                                                                        <FontAwesomeIconComponent classes=\"fa fa-trash\" colorName=\"primary\" fontSize={\"small\"} /></Button>\r\n                                                                                </Grid>\r\n                                                                            </Grid>\r\n                                                                        </CardContent>\r\n                                                                    </Card>\r\n                                                                </div>\r\n                                                        }\r\n\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                                <Grid container className={classes.root} spacing={5}>\r\n                                                    <Grid item xs={4}><TextField fullWidth id=\"outlined-basic\" name=\"qualification\" label=\"Qualification\" variant=\"outlined\" onChange={(e) => { this.updateChange(e) }} /></Grid>\r\n                                                    <Grid item xs={4}><TextField fullWidth id=\"outlined-basic\" name=\"last_organization\" label=\"Last Organization\" variant=\"outlined\" onChange={(e) => { this.updateChange(e) }} /></Grid>\r\n                                                    <Grid item xs={4}><TextField fullWidth id=\"outlined-basic\" name=\"password\" type=\"password\" label=\"Password\" variant=\"outlined\" onChange={(e) => { this.updateChange(e) }} /></Grid>\r\n                                                </Grid>\r\n                                                <Grid container className={classes.root} spacing={5}>\r\n                                                    <Grid item xs={4}>\r\n                                                        <FormControl variant=\"outlined\" style={{ width: '100%' }}>\r\n                                                            <InputLabel id=\"demo-simple-select-outlined-label\">Role</InputLabel>\r\n                                                            <Select\r\n                                                                labelId=\"demo-simple-select-outlined-label\"\r\n                                                                id=\"demo-simple-select-outlined\"\r\n                                                                label=\"Role\"\r\n                                                                onChange={(e) => { this.addRole(e) }}\r\n                                                            >{roleOptions}\r\n                                                            </Select>\r\n                                                        </FormControl>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={4} true></Grid>\r\n                                                    <Grid item xs={4} true></Grid>\r\n                                                </Grid>\r\n                                                <Grid container className={classes.root} spacing={3}>\r\n                                                    <Grid item xs={4} style={{ display: 'flex' }}>\r\n                                                        <LoadderButton btnType=\"button\" btnText=\"Save User\" onClickFn={this.handleSubmit} />\r\n                                                        <Button type=\"button\" onClick={(e) => { e.preventDefault(); this.props.history.push('/users') }}>Cancel</Button>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={4}></Grid>\r\n                                                    <Grid item xs={4}></Grid>\r\n                                                </Grid>\r\n                                            </form> */}\r\n                                        </CardContent>\r\n                                    </Card>\r\n                                </Grid>\r\n                                <Grid item xs={6}></Grid>\r\n                            </Grid>\r\n                        </div>\r\n                    } />\r\n                <Footer />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HandleUser;\r\n\r\n","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\FontAwesomeIconComponent.js",["491"],"import React from 'react';\r\nimport { loadCSS } from 'fg-loadcss';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Icon from '@material-ui/core/Icon';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > .fa': {\r\n      margin: theme.spacing(2),\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function FontAwesomeIconComponent(props) {\r\n  const classes = useStyles();\r\n\r\n  React.useEffect(() => {\r\n    const node = loadCSS(\r\n      'https://use.fontawesome.com/releases/v5.12.0/css/all.css',\r\n      document.querySelector('#font-awesome-css'),\r\n    );\r\n\r\n    return () => {\r\n      node.parentNode.removeChild(node);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <Icon className={props.classes} color={(props.colorName) ? \"primary\" : \"\"} fontSize={(props.fontSize) ? \"small\" : \"\"} />\r\n  );\r\n}","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Permission.js",["492","493"],"D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\LeavesTicket\\Ticket.js",["494"],"import React, { Component } from 'react';\r\nimport Header from '../../Layouts/Header'\r\nimport Footer from '../../Layouts/Footer';\r\nimport AuthApi from '../../Services/Authapi';\r\nimport TableComponent from '../../Layouts/TableComponent';\r\nimport Breadcrumb from '../../Layouts/Breadcrumb';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport swal from 'sweetalert';\r\n\r\nclass Ticket extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      tickets: [],\r\n      count:0,\r\n      tableTh: [\r\n        { id: 'user_name', numeric: false, disablePadding: true, label: 'Name', sortable: true },\r\n        { id: 'leaveType', numeric: false, disablePadding: true, label: 'LeaveType', sortable: true },\r\n        { id: 'date_range', numeric: false, disablePadding: true, label: 'Date Range', sortable: true },\r\n        { id: 'created_at', numeric: false, disablePadding: true, label: 'Created On', sortable: true },\r\n        { id: 'actions', numeric: false, disablePadding: true, label: 'Actions', sortable: false }\r\n      ]\r\n    }\r\n      this.ticketsData = this.ticketsData.bind(this);\r\n    //  this.removeLeaves = this.removeLeaves.bind(this);\r\n  }\r\n\r\n  componentWillMount() {\r\n    if (this.props && this.props.authToken === false) {\r\n      this.props.history.push('/login');\r\n    }\r\n    this.ticketsData();\r\n  }\r\n\r\n  componentWillReceiveProps(props) {\r\n    if (props && props.authToken === false) {\r\n      props.history.push('/login');\r\n    }\r\n  }\r\n\r\n \r\n\r\n    ticketsData = async (e) => {\r\n      let tickets = await AuthApi.getTickets();\r\n      // console.log(tickets.data);\r\n    \r\n\r\n\r\n      if(tickets && tickets.status === true) {\r\n        const newarr = []\r\n        const ticketsData = tickets.data\r\n        ticketsData.forEach((element,key) => {\r\n          const tempData = {\r\n            'id': element.id,\r\n            'name':element.has_user.name,\r\n            'leaveType':element.leaveType, \r\n            'date_range':element.date_range, \r\n            'created_at': element.created_at\r\n          }\r\n          // console.log(key)\r\n          //  console.log(tempName)\r\n          //  tickets.data[key] = tempName; \r\n          // Array.prototype.push.apply(ticketsData[key], tempName)\r\n          \r\n          newarr.push(tempData)\r\n        });\r\n        \r\n\r\n        this.setState({\r\n          tickets : newarr,\r\n          count: tickets.data.length,\r\n        })\r\n      }\r\n     \r\n    }\r\n\r\n\r\n    // async removeLeaves(id){\r\n    //   swal({\r\n    //         title: \"Are you sure?\",\r\n    //         icon: \"warning\",\r\n    //         buttons: [\"Cancel\", \"Yes\"]\r\n    //       }).then(async (confirm) => {\r\n    //         if (confirm) {\r\n    //           let currentLeave = await AuthApi.leaveDelete(id);\r\n    //           if (currentLeave && currentLeave.status === true) {\r\n    //             this.leaveData();\r\n    //           } else {\r\n    //           }\r\n    //         }\r\n    //       });\r\n    // }\r\n\r\n   \r\n\r\n\r\n  render() {\r\n    const classes = this.props;\r\n    return (\r\n      <div>\r\n        <Header\r\n          {...this.props}\r\n          authUser={this.props.authUser}\r\n          setAutUser={this.props.setAutUser}\r\n          component={\r\n            <div>\r\n              <Card className={classes.root} style={{ marginBottom: '3%' }}>\r\n                <CardContent>\r\n                  <Breadcrumb\r\n                    {...this.props}\r\n                    primaryPageName=\"LeavesTicket\"\r\n                    primaryPageLink=\"/tickets\"\r\n                    isSecondaryPage={false}\r\n                    secondaryPageName=\"\" />\r\n                </CardContent>\r\n              </Card>\r\n              <TableComponent\r\n                {...this.props}\r\n                tableTh={this.state.tableTh}\r\n                tableData={this.state.tickets}\r\n                tableCount={this.state.count}\r\n                colNameToShow={[ 'name', 'leaveType', 'date_range', 'created_at']}\r\n                openPopUp={false}\r\n                removeRow={this.removeLeaves}\r\n                actionBtns={['update']}\r\n                modelName={'LeavesTickets'}\r\n                addRoute={'/tickets/add'}\r\n                updateRoute={'/tickets/edit'}\r\n                openPopUpUpdate={false}\r\n              /></div>\r\n          } />\r\n        <Footer {...this.props} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Ticket;","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\UpcomingEvent\\AddUpcomingEvent.js",["495","496","497","498","499","500","501","502","503","504","505","506","507","508","509","510","511","512","513","514","515","516","517","518","519","520","521","522"],"import React, { useState, useEffect } from 'react';\r\nimport Header from '../../Layouts/Header';\r\nimport Footer from '../../Layouts/Footer';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Breadcrumb from '../../Layouts/Breadcrumb';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { colors, TextField } from '@material-ui/core';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\r\nimport LoadderButton from '../../Layouts/LoadderButton';\r\nimport AuthApi from '../../Services/Authapi';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport FontAwesomeIconComponent from '../../Layouts/FontAwesomeIconComponent';\r\nimport { SignalCellularNull } from '@material-ui/icons';\r\nimport Authapi from '../../Services/Authapi';\r\nimport swal from 'sweetalert';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport { now } from 'moment';\r\nimport moment from 'moment';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\n\r\n\r\n\r\nconst iniEvent = {\r\n    upcomingEventName: \"\",\r\n    upcomingEventdate: \"\",\r\n    description: \"\",\r\n    image: null\r\n}\r\n\r\n\r\nconst UpcomingEvent = (props) => {\r\n    const classes = props;\r\n\r\n    const [eventValues, setEventsValues] = useState(iniEvent);\r\n    // const [selectedImages, setSelectedImages] = useState({ image: null });\r\n    // const [stringImages, setStringImages] = useState({ images: [] });\r\n    const [formErrors, setFormErrors] = useState({});\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        if (props && props.authToken === false) {\r\n            props.history.push('/login');\r\n        }\r\n    });\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setEventsValues({ ...eventValues, [name]: value });\r\n\r\n\r\n        // console.log(selectedImages);\r\n    };\r\n\r\n\r\n    const uploadSingleFile = async (e) => {\r\n        const postData = new FormData();\r\n        postData.append('file', e.target.files[0]);\r\n        // console.log(postData);\r\n        let updaImg = await AuthApi.uploadEventImg(postData);\r\n        // console.log(updaImg)\r\n        if (updaImg && updaImg.status === true) {\r\n\r\n            setEventsValues({\r\n                ...eventValues,\r\n                image: updaImg.data.image_url,\r\n                // imageName: updaImg.data.image_name\r\n            })\r\n\r\n        }\r\n    }\r\n\r\n\r\n    const removeImg = async (e) => {\r\n        let imageLink = eventValues.image;\r\n        imageLink = imageLink.substr(imageLink.indexOf('/', 7) + 1)\r\n        let remImg = await AuthApi.upcomingdeleteImg(imageLink);\r\n        console.log(remImg)\r\n        if (remImg && remImg.status === true) {\r\n            setEventsValues({\r\n                ...eventValues,\r\n                image: null,\r\n                // imageName: null\r\n            })\r\n\r\n        } else {\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // const removeImage = (e) => {\r\n    //     const stringImages1 = stringImages.images\r\n    //     const selectedImages1 = selectedImages\r\n    //     stringImages1.splice(e, 1)\r\n    //     selectedImages1.splice(e, 1)\r\n\r\n\r\n    //     setSelectedImages((prevImages) => prevImages = selectedImages1)\r\n    //     setStringImages({ ...stringImages, images: stringImages1 });\r\n    // }\r\n\r\n    function dateDiffInDays(startDate, endDate) {\r\n        // round to the nearest whole number\r\n        return Math.round((endDate - startDate) / (1000 * 60 * 60 * 24));\r\n    }\r\n\r\n    const dsp = dateDiffInDays(new Date(), new Date(eventValues.upcomingEventdate))\r\n\r\n\r\n    const validate = (values) => {\r\n        let errors = {};\r\n        const regex = /^[a-zA-Z]/;\r\n        const dateR = /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/;\r\n\r\n\r\n\r\n        if (!values.upcomingEventName) {\r\n            errors.upcomingEventName = \"Cannot be blank\";\r\n        } else if (!regex.test(values.upcomingEventName)) {\r\n            errors.upcomingEventName = \"Invalid upcomingEventName format\";\r\n        }\r\n\r\n        if (!values.upcomingEventdate) {\r\n            errors.upcomingEventdate = \"Cannot be  blank\";\r\n        } else if (!dateR.test(values.upcomingEventdate)) {\r\n            errors.upcomingEventdate = \"Invalid upcomingEventdate format\"\r\n        }\r\n        else {\r\n\r\n\r\n            if (dsp < 0) {\r\n                errors.upcomingEventdate = \"you can chooes only Current and future Date\";\r\n\r\n            }\r\n        }\r\n\r\n\r\n        if (!values.description) {\r\n            errors.description = \"Cannot be  blank\";\r\n        } else if (!regex.test(values.description)) {\r\n            errors.description = \"Invalid description format\"\r\n        }\r\n\r\n\r\n\r\n\r\n        return errors;\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        setFormErrors(validate(eventValues));\r\n        setIsSubmitting(true);\r\n    }\r\n\r\n    useEffect(async () => {\r\n        if (Object.keys(formErrors).length === 0 && isSubmitting) {\r\n            await upcomingEvent();\r\n        }\r\n    }, [formErrors])\r\n\r\n\r\n\r\n\r\n    const upcomingEvent = async () => {\r\n\r\n        let create1 = await AuthApi.createUpcomingEvent(eventValues);\r\n        // console.log(create1)\r\n        if (create1 && create1.status === true) {\r\n            props.history.push('/upcoming');\r\n        } else {\r\n            swal({\r\n                title: \"OOPS!\",\r\n                icon: \"fail\",\r\n                message: \"Something went wrong, Please try later!\"\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Header\r\n                {...props}\r\n                authUser={props.authUser}\r\n                component={\r\n                    <div>\r\n                        <Card className={classes.root} style={{ marginBottom: '3%' }}>\r\n                            <CardContent>\r\n                                <Breadcrumb\r\n                                    {...props}\r\n                                    primaryPageName=\"Upcoming Events\"\r\n                                    primaryPageLink=\"/upcoming\"\r\n                                    isSecondaryPage={true}\r\n                                    secondaryPageName=\"Add\" />\r\n                            </CardContent>\r\n                        </Card>\r\n                        <Grid container className={classes.root} spacing={2}>\r\n                            <Grid item xs={12}>\r\n                                <Card className={classes.root}>\r\n                                    <CardContent>\r\n                                        <Typography variant=\"h2\">Add UPcommingEvent</Typography>\r\n                                        <form className={classes.form} onSubmit={handleSubmit} >\r\n                                            <Grid container className={classes.root} spacing={5}>\r\n                                                <Grid item xs={6}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"upcomingEventName\"\r\n                                                        name=\"upcomingEventName\"\r\n                                                        label=\"UpcomingEvent-Name\"\r\n                                                        variant=\"outlined\"\r\n                                                        error={formErrors.upcomingEventName && true}\r\n                                                        value={eventValues.upcomingEventName}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.upcomingEventName && \"input-error\"}\r\n\r\n                                                    />\r\n                                                    {formErrors.upcomingEventName && (\r\n                                                        <span className=\"error\">{formErrors.upcomingEventName}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n\r\n\r\n                                                <Grid item xs={6}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"date\"\r\n                                                        variant=\"outlined\"\r\n                                                        label=\"Upcoming-Event-Date\"\r\n                                                        name=\"upcomingEventdate\"\r\n                                                        type=\"date\"\r\n                                                        error={formErrors.upcomingEventdate && true}\r\n                                                        value={eventValues.upcomingEventdate}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.upcomingEventdate && \"input-error\"}\r\n                                                        className={classes.textField}\r\n                                                        InputLabelProps={{\r\n                                                            shrink: true,\r\n                                                        }}\r\n                                                    />\r\n                                                    {formErrors.upcomingEventdate && (\r\n                                                        <span className=\"error\">{formErrors.upcomingEventdate}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n\r\n\r\n                                            </Grid>\r\n\r\n                                            <Grid container className={classes.root} spacing={5}>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                            </Grid>\r\n\r\n                                            <Grid container className={classes.root} spacing={5} >\r\n                                                <Grid item xs={6}>\r\n                                                    <TextareaAutosize\r\n                                                        style={{ float: 'left', width: \"670px\" }}\r\n                                                        aria-label=\"empty textarea\"\r\n                                                        placeholder=\"Add Details\"\r\n                                                        name=\"description\"\r\n                                                        error={formErrors.description && true}\r\n                                                        className={formErrors.description && \"input-error\"}\r\n                                                        rowsMin={3}\r\n                                                        className={classes.textField}\r\n                                                        value={eventValues.description}\r\n                                                        onChange={handleChange}\r\n                                                    />\r\n                                                    {formErrors.description && (\r\n                                                        <span className=\"error\">{formErrors.description}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n                                                <Grid item xs={6} style={{ display: 'flex' }} >\r\n\r\n                                                    {\r\n                                                        (eventValues.image === null) ?\r\n                                                            <div>\r\n                                                                <input\r\n                                                                    accept=\"image/*\"\r\n                                                                    className={classes.input}\r\n                                                                    name=\"photo\"\r\n                                                                    id=\"contained-button-file\"\r\n                                                                    type=\"file\"\r\n                                                                    onChange={(e) => uploadSingleFile(e)}\r\n                                                                    style={{ display: 'none' }}\r\n                                                                />\r\n                                                                <label htmlFor=\"contained-button-file\">\r\n                                                                    <Button variant=\"contained\" color=\"primary\" component=\"span\" > Upload Event Picture </Button>\r\n                                                                </label>\r\n                                                            </div>\r\n                                                            :\r\n                                                            <div>\r\n                                                                <Card className={classes.root}>\r\n                                                                    <CardContent style={{ width: \"550px\" }}>\r\n                                                                        <Grid container className={classes.root} spacing={5}>\r\n                                                                            <Grid item xs={6}>\r\n                                                                                <img src={eventValues.image} alt=\"Event image\" width=\"100%\" height=\"100%\" />\r\n                                                                            </Grid>\r\n                                                                            <input\r\n                                                                                className={classes.input}\r\n                                                                                name=\"photo\"\r\n                                                                                id=\"photo\"\r\n                                                                                type=\"hidden\"\r\n                                                                                value={eventValues.image ? eventValues.image : \"\"}\r\n                                                                            />\r\n                                                                            <Grid item xs={6}>\r\n                                                                                <Button style={{ marginTop: \"70px\" }}\r\n                                                                                    onClick={(e) => removeImg(e)}\r\n                                                                                >\r\n                                                                                    <FontAwesomeIconComponent classes=\"fa fa-trash\" colorName=\"primary\" fontSize={\"small\"} /></Button>\r\n                                                                            </Grid>\r\n                                                                        </Grid>\r\n                                                                    </CardContent>\r\n                                                                </Card>\r\n                                                            </div>\r\n                                                    }\r\n                                                </Grid>\r\n\r\n\r\n\r\n                                            </Grid>\r\n\r\n                                            {/* <Grid container className={classes.root} spacing={5} >\r\n                                                <Grid item xs={6}>\r\n                                                    <div style={{ float: \"left\" }}>\r\n                                                        <Card className={classes.root}>\r\n                                                            <Grid item xs={12}>\r\n                                                                <div>\r\n                                                                    <img src={eventValues.image} alt=\"Event image\" width=\"100\" height=\"100\" />\r\n                                                                </div>\r\n                                                            </Grid>\r\n                                                        </Card>\r\n                                                    </div>\r\n                                                </Grid>\r\n                                            </Grid> */}\r\n\r\n\r\n\r\n                                            <Grid container className={classes.root} spacing={3}>\r\n                                                <Grid item xs={4} style={{ display: 'flex' }}>\r\n                                                    <Button type=\"submit\" variant=\"contained\" color=\"primary\">Save</Button>\r\n                                                    <Button type=\"button\" style={{ marginTop: \"10px\" }} onClick={(e) => { e.preventDefault(); props.history.push('/upcoming') }}>Cancel</Button>\r\n                                                </Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                            </Grid>\r\n                                        </form>\r\n\r\n                                    </CardContent>\r\n                                </Card>\r\n                            </Grid>\r\n                            <Grid item xs={6}></Grid>\r\n                        </Grid>\r\n                    </div>\r\n                } />\r\n            <Footer />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default UpcomingEvent;\r\n\r\n\r\n\r\n","D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Users\\Index.js",[],"D:\\xampp\\htdocs\\cpsi-ems\\src\\TableAction.js",[],"D:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\DropdownComponent.js",[],{"ruleId":"523","replacedBy":"524"},{"ruleId":"525","replacedBy":"526"},{"ruleId":"527","severity":1,"message":"528","line":10,"column":8,"nodeType":"529","messageId":"530","endLine":10,"endColumn":13},{"ruleId":"527","severity":1,"message":"531","line":21,"column":10,"nodeType":"529","messageId":"530","endLine":21,"endColumn":31},{"ruleId":"527","severity":1,"message":"532","line":21,"column":33,"nodeType":"529","messageId":"530","endLine":21,"endColumn":53},{"ruleId":"527","severity":1,"message":"533","line":24,"column":8,"nodeType":"529","messageId":"530","endLine":24,"endColumn":18},{"ruleId":"534","severity":1,"message":"535","line":61,"column":34,"nodeType":"536","messageId":"537","endLine":61,"endColumn":36},{"ruleId":"538","severity":1,"message":"539","line":180,"column":17,"nodeType":"540","messageId":"541","endLine":180,"endColumn":28},{"ruleId":"542","severity":1,"message":"543","line":378,"column":41,"nodeType":"544","endLine":378,"endColumn":83},{"ruleId":"523","replacedBy":"545"},{"ruleId":"525","replacedBy":"546"},{"ruleId":"527","severity":1,"message":"547","line":4,"column":8,"nodeType":"529","messageId":"530","endLine":4,"endColumn":17},{"ruleId":"527","severity":1,"message":"548","line":10,"column":8,"nodeType":"529","messageId":"530","endLine":10,"endColumn":25},{"ruleId":"527","severity":1,"message":"549","line":15,"column":8,"nodeType":"529","messageId":"530","endLine":15,"endColumn":17},{"ruleId":"527","severity":1,"message":"550","line":16,"column":8,"nodeType":"529","messageId":"530","endLine":16,"endColumn":24},{"ruleId":"527","severity":1,"message":"551","line":17,"column":8,"nodeType":"529","messageId":"530","endLine":17,"endColumn":16},{"ruleId":"527","severity":1,"message":"552","line":18,"column":8,"nodeType":"529","messageId":"530","endLine":18,"endColumn":17},{"ruleId":"527","severity":1,"message":"553","line":23,"column":8,"nodeType":"529","messageId":"530","endLine":23,"endColumn":18},{"ruleId":"554","severity":1,"message":"555","line":249,"column":3,"nodeType":"556","messageId":"537","endLine":253,"endColumn":4},{"ruleId":"523","replacedBy":"557"},{"ruleId":"525","replacedBy":"558"},{"ruleId":"527","severity":1,"message":"559","line":10,"column":8,"nodeType":"529","messageId":"530","endLine":10,"endColumn":13},{"ruleId":"527","severity":1,"message":"560","line":11,"column":8,"nodeType":"529","messageId":"530","endLine":11,"endColumn":18},{"ruleId":"527","severity":1,"message":"550","line":12,"column":8,"nodeType":"529","messageId":"530","endLine":12,"endColumn":24},{"ruleId":"527","severity":1,"message":"561","line":13,"column":8,"nodeType":"529","messageId":"530","endLine":13,"endColumn":19},{"ruleId":"527","severity":1,"message":"552","line":14,"column":8,"nodeType":"529","messageId":"530","endLine":14,"endColumn":17},{"ruleId":"527","severity":1,"message":"562","line":16,"column":8,"nodeType":"529","messageId":"530","endLine":16,"endColumn":21},{"ruleId":"527","severity":1,"message":"528","line":18,"column":8,"nodeType":"529","messageId":"530","endLine":18,"endColumn":13},{"ruleId":"527","severity":1,"message":"563","line":19,"column":8,"nodeType":"529","messageId":"530","endLine":19,"endColumn":32},{"ruleId":"527","severity":1,"message":"564","line":20,"column":10,"nodeType":"529","messageId":"530","endLine":20,"endColumn":28},{"ruleId":"527","severity":1,"message":"565","line":21,"column":8,"nodeType":"529","messageId":"530","endLine":21,"endColumn":15},{"ruleId":"527","severity":1,"message":"566","line":23,"column":8,"nodeType":"529","messageId":"530","endLine":23,"endColumn":18},{"ruleId":"527","severity":1,"message":"567","line":24,"column":8,"nodeType":"529","messageId":"530","endLine":24,"endColumn":16},{"ruleId":"527","severity":1,"message":"568","line":25,"column":8,"nodeType":"529","messageId":"530","endLine":25,"endColumn":14},{"ruleId":"527","severity":1,"message":"569","line":26,"column":10,"nodeType":"529","messageId":"530","endLine":26,"endColumn":13},{"ruleId":"570","severity":1,"message":"571","line":102,"column":31,"nodeType":"572","messageId":"573","endLine":102,"endColumn":32,"suggestions":"574"},{"ruleId":"570","severity":1,"message":"575","line":102,"column":33,"nodeType":"572","messageId":"573","endLine":102,"endColumn":34,"suggestions":"576"},{"ruleId":"570","severity":1,"message":"571","line":102,"column":53,"nodeType":"572","messageId":"573","endLine":102,"endColumn":54,"suggestions":"577"},{"ruleId":"570","severity":1,"message":"575","line":102,"column":55,"nodeType":"572","messageId":"573","endLine":102,"endColumn":56,"suggestions":"578"},{"ruleId":"579","severity":1,"message":"580","line":157,"column":15,"nodeType":"581","endLine":161,"endColumn":6},{"ruleId":"579","severity":1,"message":"582","line":161,"column":8,"nodeType":"583","endLine":161,"endColumn":20,"suggestions":"584"},{"ruleId":"585","severity":1,"message":"586","line":268,"column":57,"nodeType":"587","endLine":268,"endColumn":86},{"ruleId":"585","severity":1,"message":"586","line":291,"column":57,"nodeType":"587","endLine":291,"endColumn":86},{"ruleId":"527","severity":1,"message":"588","line":9,"column":10,"nodeType":"529","messageId":"530","endLine":9,"endColumn":16},{"ruleId":"527","severity":1,"message":"559","line":10,"column":8,"nodeType":"529","messageId":"530","endLine":10,"endColumn":13},{"ruleId":"527","severity":1,"message":"560","line":11,"column":8,"nodeType":"529","messageId":"530","endLine":11,"endColumn":18},{"ruleId":"527","severity":1,"message":"550","line":12,"column":8,"nodeType":"529","messageId":"530","endLine":12,"endColumn":24},{"ruleId":"527","severity":1,"message":"561","line":13,"column":8,"nodeType":"529","messageId":"530","endLine":13,"endColumn":19},{"ruleId":"527","severity":1,"message":"552","line":14,"column":8,"nodeType":"529","messageId":"530","endLine":14,"endColumn":17},{"ruleId":"527","severity":1,"message":"562","line":16,"column":8,"nodeType":"529","messageId":"530","endLine":16,"endColumn":21},{"ruleId":"527","severity":1,"message":"528","line":18,"column":8,"nodeType":"529","messageId":"530","endLine":18,"endColumn":13},{"ruleId":"527","severity":1,"message":"563","line":19,"column":8,"nodeType":"529","messageId":"530","endLine":19,"endColumn":32},{"ruleId":"527","severity":1,"message":"564","line":20,"column":10,"nodeType":"529","messageId":"530","endLine":20,"endColumn":28},{"ruleId":"527","severity":1,"message":"565","line":21,"column":8,"nodeType":"529","messageId":"530","endLine":21,"endColumn":15},{"ruleId":"527","severity":1,"message":"566","line":23,"column":8,"nodeType":"529","messageId":"530","endLine":23,"endColumn":18},{"ruleId":"527","severity":1,"message":"567","line":24,"column":8,"nodeType":"529","messageId":"530","endLine":24,"endColumn":16},{"ruleId":"527","severity":1,"message":"568","line":25,"column":8,"nodeType":"529","messageId":"530","endLine":25,"endColumn":14},{"ruleId":"527","severity":1,"message":"569","line":26,"column":10,"nodeType":"529","messageId":"530","endLine":26,"endColumn":13},{"ruleId":"527","severity":1,"message":"589","line":27,"column":8,"nodeType":"529","messageId":"530","endLine":27,"endColumn":14},{"ruleId":"527","severity":1,"message":"590","line":28,"column":8,"nodeType":"529","messageId":"530","endLine":28,"endColumn":16},{"ruleId":"527","severity":1,"message":"591","line":29,"column":10,"nodeType":"529","messageId":"530","endLine":29,"endColumn":20},{"ruleId":"527","severity":1,"message":"592","line":30,"column":8,"nodeType":"529","messageId":"530","endLine":30,"endColumn":17},{"ruleId":"527","severity":1,"message":"593","line":31,"column":8,"nodeType":"529","messageId":"530","endLine":31,"endColumn":18},{"ruleId":"594","severity":1,"message":"595","line":97,"column":17,"nodeType":"544","endLine":97,"endColumn":130},{"ruleId":"570","severity":1,"message":"571","line":122,"column":31,"nodeType":"572","messageId":"573","endLine":122,"endColumn":32,"suggestions":"596"},{"ruleId":"570","severity":1,"message":"575","line":122,"column":33,"nodeType":"572","messageId":"573","endLine":122,"endColumn":34,"suggestions":"597"},{"ruleId":"570","severity":1,"message":"571","line":122,"column":53,"nodeType":"572","messageId":"573","endLine":122,"endColumn":54,"suggestions":"598"},{"ruleId":"570","severity":1,"message":"575","line":122,"column":55,"nodeType":"572","messageId":"573","endLine":122,"endColumn":56,"suggestions":"599"},{"ruleId":"579","severity":1,"message":"580","line":149,"column":15,"nodeType":"581","endLine":153,"endColumn":6},{"ruleId":"579","severity":1,"message":"600","line":153,"column":8,"nodeType":"583","endLine":153,"endColumn":20,"suggestions":"601"},{"ruleId":"585","severity":1,"message":"586","line":230,"column":57,"nodeType":"587","endLine":230,"endColumn":86},{"ruleId":"527","severity":1,"message":"559","line":10,"column":8,"nodeType":"529","messageId":"530","endLine":10,"endColumn":13},{"ruleId":"527","severity":1,"message":"560","line":11,"column":8,"nodeType":"529","messageId":"530","endLine":11,"endColumn":18},{"ruleId":"527","severity":1,"message":"550","line":12,"column":8,"nodeType":"529","messageId":"530","endLine":12,"endColumn":24},{"ruleId":"527","severity":1,"message":"561","line":13,"column":8,"nodeType":"529","messageId":"530","endLine":13,"endColumn":19},{"ruleId":"527","severity":1,"message":"552","line":14,"column":8,"nodeType":"529","messageId":"530","endLine":14,"endColumn":17},{"ruleId":"527","severity":1,"message":"562","line":16,"column":8,"nodeType":"529","messageId":"530","endLine":16,"endColumn":21},{"ruleId":"527","severity":1,"message":"528","line":18,"column":8,"nodeType":"529","messageId":"530","endLine":18,"endColumn":13},{"ruleId":"527","severity":1,"message":"563","line":19,"column":8,"nodeType":"529","messageId":"530","endLine":19,"endColumn":32},{"ruleId":"527","severity":1,"message":"564","line":20,"column":10,"nodeType":"529","messageId":"530","endLine":20,"endColumn":28},{"ruleId":"527","severity":1,"message":"565","line":21,"column":8,"nodeType":"529","messageId":"530","endLine":21,"endColumn":15},{"ruleId":"527","severity":1,"message":"602","line":22,"column":8,"nodeType":"529","messageId":"530","endLine":22,"endColumn":12},{"ruleId":"527","severity":1,"message":"566","line":23,"column":8,"nodeType":"529","messageId":"530","endLine":23,"endColumn":18},{"ruleId":"527","severity":1,"message":"567","line":24,"column":8,"nodeType":"529","messageId":"530","endLine":24,"endColumn":16},{"ruleId":"527","severity":1,"message":"568","line":25,"column":8,"nodeType":"529","messageId":"530","endLine":25,"endColumn":14},{"ruleId":"527","severity":1,"message":"569","line":26,"column":10,"nodeType":"529","messageId":"530","endLine":26,"endColumn":13},{"ruleId":"527","severity":1,"message":"589","line":27,"column":8,"nodeType":"529","messageId":"530","endLine":27,"endColumn":14},{"ruleId":"527","severity":1,"message":"603","line":28,"column":8,"nodeType":"529","messageId":"530","endLine":28,"endColumn":10},{"ruleId":"570","severity":1,"message":"571","line":70,"column":31,"nodeType":"572","messageId":"573","endLine":70,"endColumn":32,"suggestions":"604"},{"ruleId":"570","severity":1,"message":"575","line":70,"column":33,"nodeType":"572","messageId":"573","endLine":70,"endColumn":34,"suggestions":"605"},{"ruleId":"570","severity":1,"message":"571","line":70,"column":53,"nodeType":"572","messageId":"573","endLine":70,"endColumn":54,"suggestions":"606"},{"ruleId":"570","severity":1,"message":"575","line":70,"column":55,"nodeType":"572","messageId":"573","endLine":70,"endColumn":56,"suggestions":"607"},{"ruleId":"579","severity":1,"message":"608","line":126,"column":23,"nodeType":"583","endLine":126,"endColumn":25,"suggestions":"609"},{"ruleId":"594","severity":1,"message":"595","line":159,"column":17,"nodeType":"544","endLine":159,"endColumn":130},{"ruleId":"579","severity":1,"message":"580","line":212,"column":15,"nodeType":"581","endLine":216,"endColumn":6},{"ruleId":"579","severity":1,"message":"610","line":216,"column":8,"nodeType":"583","endLine":216,"endColumn":20,"suggestions":"611"},{"ruleId":"585","severity":1,"message":"586","line":286,"column":57,"nodeType":"587","endLine":286,"endColumn":86},{"ruleId":"523","replacedBy":"612"},{"ruleId":"525","replacedBy":"613"},{"ruleId":"570","severity":1,"message":"571","line":58,"column":33,"nodeType":"572","messageId":"573","endLine":58,"endColumn":34,"suggestions":"614"},{"ruleId":"570","severity":1,"message":"575","line":58,"column":35,"nodeType":"572","messageId":"573","endLine":58,"endColumn":36,"suggestions":"615"},{"ruleId":"570","severity":1,"message":"571","line":58,"column":55,"nodeType":"572","messageId":"573","endLine":58,"endColumn":56,"suggestions":"616"},{"ruleId":"570","severity":1,"message":"575","line":58,"column":57,"nodeType":"572","messageId":"573","endLine":58,"endColumn":58,"suggestions":"617"},{"ruleId":"579","severity":1,"message":"618","line":145,"column":24,"nodeType":"583","endLine":145,"endColumn":26,"suggestions":"619"},{"ruleId":"579","severity":1,"message":"620","line":205,"column":39,"nodeType":"583","endLine":205,"endColumn":41,"suggestions":"621"},{"ruleId":"579","severity":1,"message":"580","line":223,"column":15,"nodeType":"581","endLine":228,"endColumn":6},{"ruleId":"579","severity":1,"message":"622","line":228,"column":8,"nodeType":"583","endLine":228,"endColumn":20,"suggestions":"623"},{"ruleId":"585","severity":1,"message":"586","line":331,"column":29,"nodeType":"587","endLine":331,"endColumn":58},{"ruleId":"523","replacedBy":"624"},{"ruleId":"525","replacedBy":"625"},{"ruleId":"527","severity":1,"message":"589","line":3,"column":8,"nodeType":"529","messageId":"530","endLine":3,"endColumn":14},{"ruleId":"527","severity":1,"message":"626","line":3,"column":18,"nodeType":"529","messageId":"530","endLine":3,"endColumn":21},{"ruleId":"527","severity":1,"message":"603","line":7,"column":8,"nodeType":"529","messageId":"530","endLine":7,"endColumn":10},{"ruleId":"527","severity":1,"message":"627","line":66,"column":13,"nodeType":"529","messageId":"530","endLine":66,"endColumn":17},{"ruleId":"527","severity":1,"message":"628","line":67,"column":13,"nodeType":"529","messageId":"530","endLine":67,"endColumn":20},{"ruleId":"527","severity":1,"message":"629","line":69,"column":13,"nodeType":"529","messageId":"530","endLine":69,"endColumn":21},{"ruleId":"527","severity":1,"message":"630","line":146,"column":17,"nodeType":"529","messageId":"530","endLine":146,"endColumn":26},{"ruleId":"527","severity":1,"message":"631","line":146,"column":28,"nodeType":"529","messageId":"530","endLine":146,"endColumn":30},{"ruleId":"527","severity":1,"message":"632","line":3,"column":50,"nodeType":"529","messageId":"530","endLine":3,"endColumn":58},{"ruleId":"527","severity":1,"message":"633","line":32,"column":8,"nodeType":"529","messageId":"530","endLine":32,"endColumn":14},{"ruleId":"554","severity":1,"message":"634","line":157,"column":3,"nodeType":"556","messageId":"537","endLine":159,"endColumn":4},{"ruleId":"554","severity":1,"message":"634","line":161,"column":3,"nodeType":"556","messageId":"537","endLine":165,"endColumn":4},{"ruleId":"585","severity":1,"message":"586","line":455,"column":35,"nodeType":"587","endLine":455,"endColumn":47},{"ruleId":"527","severity":1,"message":"559","line":10,"column":8,"nodeType":"529","messageId":"530","endLine":10,"endColumn":13},{"ruleId":"527","severity":1,"message":"560","line":11,"column":8,"nodeType":"529","messageId":"530","endLine":11,"endColumn":18},{"ruleId":"527","severity":1,"message":"550","line":12,"column":8,"nodeType":"529","messageId":"530","endLine":12,"endColumn":24},{"ruleId":"527","severity":1,"message":"552","line":14,"column":8,"nodeType":"529","messageId":"530","endLine":14,"endColumn":17},{"ruleId":"527","severity":1,"message":"562","line":16,"column":8,"nodeType":"529","messageId":"530","endLine":16,"endColumn":21},{"ruleId":"527","severity":1,"message":"528","line":18,"column":8,"nodeType":"529","messageId":"530","endLine":18,"endColumn":13},{"ruleId":"527","severity":1,"message":"563","line":19,"column":8,"nodeType":"529","messageId":"530","endLine":19,"endColumn":32},{"ruleId":"527","severity":1,"message":"564","line":20,"column":10,"nodeType":"529","messageId":"530","endLine":20,"endColumn":28},{"ruleId":"527","severity":1,"message":"565","line":21,"column":8,"nodeType":"529","messageId":"530","endLine":21,"endColumn":15},{"ruleId":"527","severity":1,"message":"569","line":26,"column":10,"nodeType":"529","messageId":"530","endLine":26,"endColumn":13},{"ruleId":"527","severity":1,"message":"603","line":28,"column":8,"nodeType":"529","messageId":"530","endLine":28,"endColumn":10},{"ruleId":"570","severity":1,"message":"571","line":78,"column":31,"nodeType":"572","messageId":"573","endLine":78,"endColumn":32,"suggestions":"635"},{"ruleId":"570","severity":1,"message":"575","line":78,"column":33,"nodeType":"572","messageId":"573","endLine":78,"endColumn":34,"suggestions":"636"},{"ruleId":"570","severity":1,"message":"571","line":78,"column":53,"nodeType":"572","messageId":"573","endLine":78,"endColumn":54,"suggestions":"637"},{"ruleId":"570","severity":1,"message":"575","line":78,"column":55,"nodeType":"572","messageId":"573","endLine":78,"endColumn":56,"suggestions":"638"},{"ruleId":"579","severity":1,"message":"580","line":120,"column":15,"nodeType":"581","endLine":124,"endColumn":6},{"ruleId":"579","severity":1,"message":"639","line":124,"column":8,"nodeType":"583","endLine":124,"endColumn":20,"suggestions":"640"},{"ruleId":"585","severity":1,"message":"586","line":227,"column":57,"nodeType":"587","endLine":227,"endColumn":86},{"ruleId":"585","severity":1,"message":"586","line":250,"column":57,"nodeType":"587","endLine":250,"endColumn":86},{"ruleId":"523","replacedBy":"641"},{"ruleId":"525","replacedBy":"642"},{"ruleId":"527","severity":1,"message":"593","line":13,"column":8,"nodeType":"529","messageId":"530","endLine":13,"endColumn":18},{"ruleId":"527","severity":1,"message":"563","line":14,"column":8,"nodeType":"529","messageId":"530","endLine":14,"endColumn":32},{"ruleId":"538","severity":1,"message":"539","line":114,"column":21,"nodeType":"540","messageId":"541","endLine":114,"endColumn":32},{"ruleId":"523","replacedBy":"643"},{"ruleId":"525","replacedBy":"644"},{"ruleId":"527","severity":1,"message":"645","line":12,"column":8,"nodeType":"529","messageId":"530","endLine":12,"endColumn":13},{"ruleId":"527","severity":1,"message":"646","line":13,"column":10,"nodeType":"529","messageId":"530","endLine":13,"endColumn":19},{"ruleId":"527","severity":1,"message":"559","line":14,"column":8,"nodeType":"529","messageId":"530","endLine":14,"endColumn":13},{"ruleId":"527","severity":1,"message":"560","line":15,"column":8,"nodeType":"529","messageId":"530","endLine":15,"endColumn":18},{"ruleId":"527","severity":1,"message":"550","line":16,"column":8,"nodeType":"529","messageId":"530","endLine":16,"endColumn":24},{"ruleId":"527","severity":1,"message":"561","line":17,"column":8,"nodeType":"529","messageId":"530","endLine":17,"endColumn":19},{"ruleId":"527","severity":1,"message":"552","line":18,"column":8,"nodeType":"529","messageId":"530","endLine":18,"endColumn":17},{"ruleId":"527","severity":1,"message":"633","line":19,"column":8,"nodeType":"529","messageId":"530","endLine":19,"endColumn":14},{"ruleId":"527","severity":1,"message":"562","line":20,"column":8,"nodeType":"529","messageId":"530","endLine":20,"endColumn":21},{"ruleId":"527","severity":1,"message":"528","line":22,"column":8,"nodeType":"529","messageId":"530","endLine":22,"endColumn":13},{"ruleId":"527","severity":1,"message":"563","line":23,"column":8,"nodeType":"529","messageId":"530","endLine":23,"endColumn":32},{"ruleId":"527","severity":1,"message":"564","line":24,"column":10,"nodeType":"529","messageId":"530","endLine":24,"endColumn":28},{"ruleId":"527","severity":1,"message":"565","line":25,"column":8,"nodeType":"529","messageId":"530","endLine":25,"endColumn":15},{"ruleId":"527","severity":1,"message":"602","line":26,"column":8,"nodeType":"529","messageId":"530","endLine":26,"endColumn":12},{"ruleId":"527","severity":1,"message":"566","line":27,"column":8,"nodeType":"529","messageId":"530","endLine":27,"endColumn":18},{"ruleId":"527","severity":1,"message":"567","line":28,"column":8,"nodeType":"529","messageId":"530","endLine":28,"endColumn":16},{"ruleId":"527","severity":1,"message":"568","line":29,"column":8,"nodeType":"529","messageId":"530","endLine":29,"endColumn":14},{"ruleId":"527","severity":1,"message":"569","line":30,"column":10,"nodeType":"529","messageId":"530","endLine":30,"endColumn":13},{"ruleId":"527","severity":1,"message":"589","line":31,"column":8,"nodeType":"529","messageId":"530","endLine":31,"endColumn":14},{"ruleId":"527","severity":1,"message":"603","line":32,"column":8,"nodeType":"529","messageId":"530","endLine":32,"endColumn":10},{"ruleId":"527","severity":1,"message":"647","line":33,"column":8,"nodeType":"529","messageId":"530","endLine":33,"endColumn":15},{"ruleId":"579","severity":1,"message":"608","line":127,"column":23,"nodeType":"583","endLine":127,"endColumn":25,"suggestions":"648"},{"ruleId":"594","severity":1,"message":"595","line":146,"column":21,"nodeType":"544","endLine":146,"endColumn":94},{"ruleId":"527","severity":1,"message":"645","line":10,"column":8,"nodeType":"529","messageId":"530","endLine":10,"endColumn":13},{"ruleId":"527","severity":1,"message":"561","line":15,"column":8,"nodeType":"529","messageId":"530","endLine":15,"endColumn":19},{"ruleId":"527","severity":1,"message":"552","line":16,"column":8,"nodeType":"529","messageId":"530","endLine":16,"endColumn":17},{"ruleId":"527","severity":1,"message":"562","line":18,"column":8,"nodeType":"529","messageId":"530","endLine":18,"endColumn":21},{"ruleId":"527","severity":1,"message":"564","line":22,"column":10,"nodeType":"529","messageId":"530","endLine":22,"endColumn":28},{"ruleId":"527","severity":1,"message":"565","line":23,"column":8,"nodeType":"529","messageId":"530","endLine":23,"endColumn":15},{"ruleId":"527","severity":1,"message":"602","line":24,"column":8,"nodeType":"529","messageId":"530","endLine":24,"endColumn":12},{"ruleId":"527","severity":1,"message":"566","line":25,"column":8,"nodeType":"529","messageId":"530","endLine":25,"endColumn":18},{"ruleId":"527","severity":1,"message":"567","line":26,"column":8,"nodeType":"529","messageId":"530","endLine":26,"endColumn":16},{"ruleId":"527","severity":1,"message":"568","line":27,"column":8,"nodeType":"529","messageId":"530","endLine":27,"endColumn":14},{"ruleId":"527","severity":1,"message":"569","line":28,"column":10,"nodeType":"529","messageId":"530","endLine":28,"endColumn":13},{"ruleId":"527","severity":1,"message":"589","line":29,"column":8,"nodeType":"529","messageId":"530","endLine":29,"endColumn":14},{"ruleId":"527","severity":1,"message":"649","line":227,"column":9,"nodeType":"529","messageId":"530","endLine":227,"endColumn":15},{"ruleId":"579","severity":1,"message":"650","line":242,"column":22,"nodeType":"583","endLine":242,"endColumn":24,"suggestions":"651"},{"ruleId":"538","severity":1,"message":"539","line":374,"column":17,"nodeType":"540","messageId":"541","endLine":374,"endColumn":28},{"ruleId":"527","severity":1,"message":"591","line":2,"column":10,"nodeType":"529","messageId":"530","endLine":2,"endColumn":20},{"ruleId":"652","severity":1,"message":"653","line":1,"column":1,"nodeType":"654","endLine":52,"endColumn":3},{"ruleId":"527","severity":1,"message":"603","line":7,"column":8,"nodeType":"529","messageId":"530","endLine":7,"endColumn":10},{"ruleId":"527","severity":1,"message":"655","line":48,"column":11,"nodeType":"529","messageId":"530","endLine":48,"endColumn":21},{"ruleId":"570","severity":1,"message":"571","line":65,"column":33,"nodeType":"572","messageId":"573","endLine":65,"endColumn":34,"suggestions":"656"},{"ruleId":"570","severity":1,"message":"575","line":65,"column":35,"nodeType":"572","messageId":"573","endLine":65,"endColumn":36,"suggestions":"657"},{"ruleId":"570","severity":1,"message":"571","line":65,"column":55,"nodeType":"572","messageId":"573","endLine":65,"endColumn":56,"suggestions":"658"},{"ruleId":"570","severity":1,"message":"575","line":65,"column":57,"nodeType":"572","messageId":"573","endLine":65,"endColumn":58,"suggestions":"659"},{"ruleId":"579","severity":1,"message":"620","line":139,"column":39,"nodeType":"583","endLine":139,"endColumn":41,"suggestions":"660"},{"ruleId":"579","severity":1,"message":"580","line":188,"column":15,"nodeType":"581","endLine":192,"endColumn":6},{"ruleId":"579","severity":1,"message":"661","line":192,"column":8,"nodeType":"583","endLine":192,"endColumn":20,"suggestions":"662"},{"ruleId":"585","severity":1,"message":"586","line":301,"column":29,"nodeType":"587","endLine":301,"endColumn":58},{"ruleId":"594","severity":1,"message":"595","line":333,"column":53,"nodeType":"544","endLine":333,"endColumn":131},{"ruleId":"527","severity":1,"message":"559","line":10,"column":8,"nodeType":"529","messageId":"530","endLine":10,"endColumn":13},{"ruleId":"527","severity":1,"message":"560","line":11,"column":8,"nodeType":"529","messageId":"530","endLine":11,"endColumn":18},{"ruleId":"527","severity":1,"message":"550","line":12,"column":8,"nodeType":"529","messageId":"530","endLine":12,"endColumn":24},{"ruleId":"527","severity":1,"message":"561","line":13,"column":8,"nodeType":"529","messageId":"530","endLine":13,"endColumn":19},{"ruleId":"527","severity":1,"message":"552","line":14,"column":8,"nodeType":"529","messageId":"530","endLine":14,"endColumn":17},{"ruleId":"527","severity":1,"message":"562","line":17,"column":8,"nodeType":"529","messageId":"530","endLine":17,"endColumn":21},{"ruleId":"527","severity":1,"message":"528","line":19,"column":8,"nodeType":"529","messageId":"530","endLine":19,"endColumn":13},{"ruleId":"527","severity":1,"message":"564","line":21,"column":10,"nodeType":"529","messageId":"530","endLine":21,"endColumn":28},{"ruleId":"527","severity":1,"message":"565","line":22,"column":8,"nodeType":"529","messageId":"530","endLine":22,"endColumn":15},{"ruleId":"527","severity":1,"message":"602","line":23,"column":8,"nodeType":"529","messageId":"530","endLine":23,"endColumn":12},{"ruleId":"527","severity":1,"message":"566","line":24,"column":8,"nodeType":"529","messageId":"530","endLine":24,"endColumn":18},{"ruleId":"527","severity":1,"message":"567","line":25,"column":8,"nodeType":"529","messageId":"530","endLine":25,"endColumn":16},{"ruleId":"527","severity":1,"message":"568","line":26,"column":8,"nodeType":"529","messageId":"530","endLine":26,"endColumn":14},{"ruleId":"527","severity":1,"message":"569","line":27,"column":10,"nodeType":"529","messageId":"530","endLine":27,"endColumn":13},{"ruleId":"527","severity":1,"message":"589","line":28,"column":8,"nodeType":"529","messageId":"530","endLine":28,"endColumn":14},{"ruleId":"527","severity":1,"message":"603","line":29,"column":8,"nodeType":"529","messageId":"530","endLine":29,"endColumn":10},{"ruleId":"570","severity":1,"message":"571","line":70,"column":31,"nodeType":"572","messageId":"573","endLine":70,"endColumn":32,"suggestions":"663"},{"ruleId":"570","severity":1,"message":"575","line":70,"column":33,"nodeType":"572","messageId":"573","endLine":70,"endColumn":34,"suggestions":"664"},{"ruleId":"570","severity":1,"message":"571","line":70,"column":53,"nodeType":"572","messageId":"573","endLine":70,"endColumn":54,"suggestions":"665"},{"ruleId":"570","severity":1,"message":"575","line":70,"column":55,"nodeType":"572","messageId":"573","endLine":70,"endColumn":56,"suggestions":"666"},{"ruleId":"579","severity":1,"message":"608","line":130,"column":23,"nodeType":"583","endLine":130,"endColumn":25,"suggestions":"667"},{"ruleId":"579","severity":1,"message":"580","line":188,"column":15,"nodeType":"581","endLine":192,"endColumn":6},{"ruleId":"579","severity":1,"message":"668","line":192,"column":8,"nodeType":"583","endLine":192,"endColumn":20,"suggestions":"669"},{"ruleId":"585","severity":1,"message":"586","line":262,"column":57,"nodeType":"587","endLine":262,"endColumn":86},{"ruleId":"585","severity":1,"message":"586","line":294,"column":57,"nodeType":"587","endLine":294,"endColumn":86},{"ruleId":"594","severity":1,"message":"595","line":326,"column":81,"nodeType":"544","endLine":326,"endColumn":157},{"ruleId":"527","severity":1,"message":"646","line":9,"column":10,"nodeType":"529","messageId":"530","endLine":9,"endColumn":19},{"ruleId":"527","severity":1,"message":"559","line":10,"column":8,"nodeType":"529","messageId":"530","endLine":10,"endColumn":13},{"ruleId":"527","severity":1,"message":"560","line":11,"column":8,"nodeType":"529","messageId":"530","endLine":11,"endColumn":18},{"ruleId":"527","severity":1,"message":"550","line":12,"column":8,"nodeType":"529","messageId":"530","endLine":12,"endColumn":24},{"ruleId":"527","severity":1,"message":"561","line":13,"column":8,"nodeType":"529","messageId":"530","endLine":13,"endColumn":19},{"ruleId":"527","severity":1,"message":"552","line":14,"column":8,"nodeType":"529","messageId":"530","endLine":14,"endColumn":17},{"ruleId":"527","severity":1,"message":"633","line":15,"column":8,"nodeType":"529","messageId":"530","endLine":15,"endColumn":14},{"ruleId":"527","severity":1,"message":"562","line":16,"column":8,"nodeType":"529","messageId":"530","endLine":16,"endColumn":21},{"ruleId":"527","severity":1,"message":"670","line":17,"column":8,"nodeType":"529","messageId":"530","endLine":17,"endColumn":15},{"ruleId":"527","severity":1,"message":"563","line":18,"column":8,"nodeType":"529","messageId":"530","endLine":18,"endColumn":32},{"ruleId":"527","severity":1,"message":"566","line":19,"column":8,"nodeType":"529","messageId":"530","endLine":19,"endColumn":18},{"ruleId":"527","severity":1,"message":"567","line":20,"column":8,"nodeType":"529","messageId":"530","endLine":20,"endColumn":16},{"ruleId":"527","severity":1,"message":"568","line":21,"column":8,"nodeType":"529","messageId":"530","endLine":21,"endColumn":14},{"ruleId":"527","severity":1,"message":"559","line":10,"column":8,"nodeType":"529","messageId":"530","endLine":10,"endColumn":13},{"ruleId":"527","severity":1,"message":"560","line":11,"column":8,"nodeType":"529","messageId":"530","endLine":11,"endColumn":18},{"ruleId":"527","severity":1,"message":"550","line":12,"column":8,"nodeType":"529","messageId":"530","endLine":12,"endColumn":24},{"ruleId":"527","severity":1,"message":"552","line":14,"column":8,"nodeType":"529","messageId":"530","endLine":14,"endColumn":17},{"ruleId":"527","severity":1,"message":"562","line":16,"column":8,"nodeType":"529","messageId":"530","endLine":16,"endColumn":21},{"ruleId":"527","severity":1,"message":"528","line":18,"column":8,"nodeType":"529","messageId":"530","endLine":18,"endColumn":13},{"ruleId":"527","severity":1,"message":"563","line":19,"column":8,"nodeType":"529","messageId":"530","endLine":19,"endColumn":32},{"ruleId":"527","severity":1,"message":"564","line":20,"column":10,"nodeType":"529","messageId":"530","endLine":20,"endColumn":28},{"ruleId":"527","severity":1,"message":"565","line":21,"column":8,"nodeType":"529","messageId":"530","endLine":21,"endColumn":15},{"ruleId":"527","severity":1,"message":"602","line":22,"column":8,"nodeType":"529","messageId":"530","endLine":22,"endColumn":12},{"ruleId":"527","severity":1,"message":"569","line":26,"column":10,"nodeType":"529","messageId":"530","endLine":26,"endColumn":13},{"ruleId":"527","severity":1,"message":"589","line":27,"column":8,"nodeType":"529","messageId":"530","endLine":27,"endColumn":14},{"ruleId":"579","severity":1,"message":"671","line":158,"column":23,"nodeType":"583","endLine":158,"endColumn":25,"suggestions":"672"},{"ruleId":"579","severity":1,"message":"580","line":170,"column":15,"nodeType":"581","endLine":174,"endColumn":6},{"ruleId":"579","severity":1,"message":"673","line":174,"column":8,"nodeType":"583","endLine":174,"endColumn":20,"suggestions":"674"},{"ruleId":"585","severity":1,"message":"586","line":269,"column":57,"nodeType":"587","endLine":269,"endColumn":86},{"ruleId":"585","severity":1,"message":"586","line":295,"column":57,"nodeType":"587","endLine":295,"endColumn":86},{"ruleId":"675","severity":1,"message":"676","line":4,"column":3,"nodeType":"556","messageId":"677","endLine":6,"endColumn":4},{"ruleId":"527","severity":1,"message":"678","line":15,"column":9,"nodeType":"529","messageId":"530","endLine":15,"endColumn":16},{"ruleId":"527","severity":1,"message":"679","line":2,"column":44,"nodeType":"529","messageId":"530","endLine":2,"endColumn":51},{"ruleId":"527","severity":1,"message":"680","line":20,"column":8,"nodeType":"529","messageId":"530","endLine":20,"endColumn":18},{"ruleId":"527","severity":1,"message":"681","line":22,"column":8,"nodeType":"529","messageId":"530","endLine":22,"endColumn":15},{"ruleId":"527","severity":1,"message":"682","line":34,"column":9,"nodeType":"529","messageId":"530","endLine":34,"endColumn":18},{"ruleId":"683","severity":1,"message":"684","line":56,"column":184,"nodeType":"536","messageId":"685","endLine":56,"endColumn":185},{"ruleId":"534","severity":1,"message":"535","line":115,"column":105,"nodeType":"536","messageId":"537","endLine":115,"endColumn":107},{"ruleId":"527","severity":1,"message":"633","line":2,"column":8,"nodeType":"529","messageId":"530","endLine":2,"endColumn":14},{"ruleId":"527","severity":1,"message":"561","line":4,"column":8,"nodeType":"529","messageId":"530","endLine":4,"endColumn":19},{"ruleId":"527","severity":1,"message":"645","line":5,"column":8,"nodeType":"529","messageId":"530","endLine":5,"endColumn":13},{"ruleId":"527","severity":1,"message":"646","line":6,"column":10,"nodeType":"529","messageId":"530","endLine":6,"endColumn":19},{"ruleId":"527","severity":1,"message":"566","line":7,"column":8,"nodeType":"529","messageId":"530","endLine":7,"endColumn":18},{"ruleId":"527","severity":1,"message":"686","line":12,"column":8,"nodeType":"529","messageId":"530","endLine":12,"endColumn":12},{"ruleId":"527","severity":1,"message":"687","line":13,"column":8,"nodeType":"529","messageId":"530","endLine":13,"endColumn":24},{"ruleId":"527","severity":1,"message":"688","line":15,"column":14,"nodeType":"529","messageId":"530","endLine":15,"endColumn":17},{"ruleId":"527","severity":1,"message":"689","line":15,"column":19,"nodeType":"529","messageId":"530","endLine":15,"endColumn":22},{"ruleId":"527","severity":1,"message":"690","line":16,"column":10,"nodeType":"529","messageId":"530","endLine":16,"endColumn":17},{"ruleId":"527","severity":1,"message":"562","line":17,"column":8,"nodeType":"529","messageId":"530","endLine":17,"endColumn":21},{"ruleId":"527","severity":1,"message":"691","line":20,"column":8,"nodeType":"529","messageId":"530","endLine":20,"endColumn":12},{"ruleId":"527","severity":1,"message":"692","line":21,"column":10,"nodeType":"529","messageId":"530","endLine":21,"endColumn":16},{"ruleId":"527","severity":1,"message":"646","line":9,"column":10,"nodeType":"529","messageId":"530","endLine":9,"endColumn":19},{"ruleId":"527","severity":1,"message":"559","line":10,"column":8,"nodeType":"529","messageId":"530","endLine":10,"endColumn":13},{"ruleId":"527","severity":1,"message":"560","line":11,"column":8,"nodeType":"529","messageId":"530","endLine":11,"endColumn":18},{"ruleId":"527","severity":1,"message":"550","line":12,"column":8,"nodeType":"529","messageId":"530","endLine":12,"endColumn":24},{"ruleId":"527","severity":1,"message":"561","line":13,"column":8,"nodeType":"529","messageId":"530","endLine":13,"endColumn":19},{"ruleId":"527","severity":1,"message":"552","line":14,"column":8,"nodeType":"529","messageId":"530","endLine":14,"endColumn":17},{"ruleId":"527","severity":1,"message":"633","line":15,"column":8,"nodeType":"529","messageId":"530","endLine":15,"endColumn":14},{"ruleId":"527","severity":1,"message":"562","line":16,"column":8,"nodeType":"529","messageId":"530","endLine":16,"endColumn":21},{"ruleId":"527","severity":1,"message":"670","line":17,"column":8,"nodeType":"529","messageId":"530","endLine":17,"endColumn":15},{"ruleId":"527","severity":1,"message":"528","line":18,"column":8,"nodeType":"529","messageId":"530","endLine":18,"endColumn":13},{"ruleId":"527","severity":1,"message":"563","line":19,"column":8,"nodeType":"529","messageId":"530","endLine":19,"endColumn":32},{"ruleId":"527","severity":1,"message":"564","line":20,"column":10,"nodeType":"529","messageId":"530","endLine":20,"endColumn":28},{"ruleId":"527","severity":1,"message":"565","line":21,"column":8,"nodeType":"529","messageId":"530","endLine":21,"endColumn":15},{"ruleId":"527","severity":1,"message":"602","line":22,"column":8,"nodeType":"529","messageId":"530","endLine":22,"endColumn":12},{"ruleId":"527","severity":1,"message":"566","line":23,"column":8,"nodeType":"529","messageId":"530","endLine":23,"endColumn":18},{"ruleId":"527","severity":1,"message":"567","line":24,"column":8,"nodeType":"529","messageId":"530","endLine":24,"endColumn":16},{"ruleId":"527","severity":1,"message":"568","line":25,"column":8,"nodeType":"529","messageId":"530","endLine":25,"endColumn":14},{"ruleId":"527","severity":1,"message":"678","line":15,"column":9,"nodeType":"529","messageId":"530","endLine":15,"endColumn":16},{"ruleId":"527","severity":1,"message":"548","line":9,"column":8,"nodeType":"529","messageId":"530","endLine":9,"endColumn":25},{"ruleId":"675","severity":1,"message":"676","line":181,"column":3,"nodeType":"556","messageId":"677","endLine":183,"endColumn":4},{"ruleId":"527","severity":1,"message":"602","line":9,"column":8,"nodeType":"529","messageId":"530","endLine":9,"endColumn":12},{"ruleId":"527","severity":1,"message":"588","line":9,"column":10,"nodeType":"529","messageId":"530","endLine":9,"endColumn":16},{"ruleId":"527","severity":1,"message":"559","line":10,"column":8,"nodeType":"529","messageId":"530","endLine":10,"endColumn":13},{"ruleId":"527","severity":1,"message":"560","line":11,"column":8,"nodeType":"529","messageId":"530","endLine":11,"endColumn":18},{"ruleId":"527","severity":1,"message":"550","line":12,"column":8,"nodeType":"529","messageId":"530","endLine":12,"endColumn":24},{"ruleId":"527","severity":1,"message":"561","line":13,"column":8,"nodeType":"529","messageId":"530","endLine":13,"endColumn":19},{"ruleId":"527","severity":1,"message":"552","line":14,"column":8,"nodeType":"529","messageId":"530","endLine":14,"endColumn":17},{"ruleId":"527","severity":1,"message":"562","line":17,"column":8,"nodeType":"529","messageId":"530","endLine":17,"endColumn":21},{"ruleId":"527","severity":1,"message":"528","line":19,"column":8,"nodeType":"529","messageId":"530","endLine":19,"endColumn":13},{"ruleId":"527","severity":1,"message":"564","line":21,"column":10,"nodeType":"529","messageId":"530","endLine":21,"endColumn":28},{"ruleId":"527","severity":1,"message":"565","line":22,"column":8,"nodeType":"529","messageId":"530","endLine":22,"endColumn":15},{"ruleId":"527","severity":1,"message":"566","line":24,"column":8,"nodeType":"529","messageId":"530","endLine":24,"endColumn":18},{"ruleId":"527","severity":1,"message":"567","line":25,"column":8,"nodeType":"529","messageId":"530","endLine":25,"endColumn":16},{"ruleId":"527","severity":1,"message":"568","line":26,"column":8,"nodeType":"529","messageId":"530","endLine":26,"endColumn":14},{"ruleId":"527","severity":1,"message":"569","line":27,"column":10,"nodeType":"529","messageId":"530","endLine":27,"endColumn":13},{"ruleId":"527","severity":1,"message":"589","line":28,"column":8,"nodeType":"529","messageId":"530","endLine":28,"endColumn":14},{"ruleId":"527","severity":1,"message":"590","line":29,"column":8,"nodeType":"529","messageId":"530","endLine":29,"endColumn":16},{"ruleId":"527","severity":1,"message":"591","line":30,"column":10,"nodeType":"529","messageId":"530","endLine":30,"endColumn":20},{"ruleId":"527","severity":1,"message":"592","line":31,"column":8,"nodeType":"529","messageId":"530","endLine":31,"endColumn":17},{"ruleId":"527","severity":1,"message":"593","line":32,"column":8,"nodeType":"529","messageId":"530","endLine":32,"endColumn":18},{"ruleId":"570","severity":1,"message":"571","line":129,"column":31,"nodeType":"572","messageId":"573","endLine":129,"endColumn":32,"suggestions":"693"},{"ruleId":"570","severity":1,"message":"575","line":129,"column":33,"nodeType":"572","messageId":"573","endLine":129,"endColumn":34,"suggestions":"694"},{"ruleId":"570","severity":1,"message":"571","line":129,"column":53,"nodeType":"572","messageId":"573","endLine":129,"endColumn":54,"suggestions":"695"},{"ruleId":"570","severity":1,"message":"575","line":129,"column":55,"nodeType":"572","messageId":"573","endLine":129,"endColumn":56,"suggestions":"696"},{"ruleId":"579","severity":1,"message":"580","line":172,"column":15,"nodeType":"581","endLine":176,"endColumn":6},{"ruleId":"579","severity":1,"message":"697","line":176,"column":8,"nodeType":"583","endLine":176,"endColumn":20,"suggestions":"698"},{"ruleId":"585","severity":1,"message":"586","line":253,"column":57,"nodeType":"587","endLine":253,"endColumn":86},{"ruleId":"585","severity":1,"message":"586","line":282,"column":57,"nodeType":"587","endLine":282,"endColumn":86},{"ruleId":"594","severity":1,"message":"595","line":314,"column":81,"nodeType":"544","endLine":314,"endColumn":157},"no-native-reassign",["699"],"no-negated-in-lhs",["700"],"no-unused-vars","'Paper' is defined but never used.","Identifier","unusedVar","'FaArrowAltCircleRight' is defined but never used.","'FaArrowAltCircleLeft' is defined but never used.","'ScreenShot' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["699"],["700"],"'Container' is defined but never used.","'DialogContentText' is defined but never used.","'FormGroup' is defined but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'FormLabel' is defined but never used.","'PageLoader' is defined but never used.","no-dupe-class-members","Duplicate name 'componentWillReceiveProps'.","MethodDefinition",["699"],["700"],"'Radio' is defined but never used.","'RadioGroup' is defined but never used.","'FormControl' is defined but never used.","'LoadderButton' is defined but never used.","'FontAwesomeIconComponent' is defined but never used.","'SignalCellularNull' is defined but never used.","'Authapi' is defined but never used.","'InputLabel' is defined but never used.","'MenuItem' is defined but never used.","'Select' is defined but never used.","'now' is defined but never used.","no-useless-escape","Unnecessary escape character: \\/.","Literal","unnecessaryEscape",["701","702"],"Unnecessary escape character: \\-.",["703","704"],["705","706"],["707","708"],"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'createLeaves' and 'isSubmitting'. Either include them or remove the dependency array.","ArrayExpression",["709"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'colors' is defined but never used.","'moment' is defined but never used.","'GridList' is defined but never used.","'makeStyles' is defined but never used.","'ClearIcon' is defined but never used.","'IconButton' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.",["710","711"],["712","713"],["714","715"],["716","717"],"React Hook useEffect has missing dependencies: 'event' and 'isSubmitting'. Either include them or remove the dependency array.",["718"],"'swal' is defined but never used.","'ls' is defined but never used.",["719","720"],["721","722"],["723","724"],["725","726"],"React Hook useEffect has a missing dependency: 'getEventData'. Either include it or remove the dependency array.",["727"],"React Hook useEffect has missing dependencies: 'editEvent' and 'isSubmitting'. Either include them or remove the dependency array.",["728"],["699"],["700"],["729","730"],["731","732"],["733","734"],["735","736"],"React Hook useEffect has a missing dependency: 'getFormData'. Either include it or remove the dependency array.",["737"],"React Hook React.useEffect has a missing dependency: 'RoleData'. Either include it or remove the dependency array.",["738"],"React Hook useEffect has missing dependencies: 'editUser1' and 'isSubmitting'. Either include them or remove the dependency array.",["739"],["699"],["700"],"'min' is defined but never used.","'size' is assigned a value but never used.","'hideDay' is assigned a value but never used.","'dayTitle' is assigned a value but never used.","'className' is assigned a value but never used.","'id' is assigned a value but never used.","'Redirect' is defined but never used.","'Button' is defined but never used.","Duplicate name 'componentDidMount'.",["740","741"],["742","743"],["744","745"],["746","747"],"React Hook useEffect has missing dependencies: 'Tickets' and 'isSubmitting'. Either include them or remove the dependency array.",["748"],["699"],["700"],["699"],["700"],"'Input' is defined but never used.","'TextField' is defined but never used.","'Divider' is defined but never used.",["749"],"'length' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'AllSalaryData'. Either include it or remove the dependency array.",["750"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'submitForm' is assigned a value but never used.",["751","752"],["753","754"],["755","756"],["757","758"],["759"],"React Hook useEffect has missing dependencies: 'createUser' and 'isSubmitting'. Either include them or remove the dependency array.",["760"],["761","762"],["763","764"],["765","766"],["767","768"],["769"],"React Hook useEffect has missing dependencies: 'editUpComingEvent' and 'isSubmitting'. Either include them or remove the dependency array.",["770"],"'AuthApi' is defined but never used.","React Hook useEffect has a missing dependency: 'getTicketData'. Either include it or remove the dependency array.",["771"],"React Hook useEffect has missing dependencies: 'editTickets' and 'isSubmitting'. Either include them or remove the dependency array.",["772"],"no-useless-constructor","Useless constructor.","noUselessConstructor","'classes' is assigned a value but never used.","'lighten' is defined but never used.","'DeleteIcon' is defined but never used.","'Tooltip' is defined but never used.","'emptyRows' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'clsx' is defined but never used.","'CircularProgress' is defined but never used.","'get' is defined but never used.","'set' is defined but never used.","'Textbox' is defined but never used.","'Grid' is defined but never used.","'Formik' is defined but never used.",["773","774"],["775","776"],["777","778"],["779","780"],"React Hook useEffect has missing dependencies: 'isSubmitting' and 'upcomingEvent'. Either include them or remove the dependency array.",["781"],"no-global-assign","no-unsafe-negation",{"messageId":"782","fix":"783","desc":"784"},{"messageId":"785","fix":"786","desc":"787"},{"messageId":"782","fix":"788","desc":"784"},{"messageId":"785","fix":"789","desc":"787"},{"messageId":"782","fix":"790","desc":"784"},{"messageId":"785","fix":"791","desc":"787"},{"messageId":"782","fix":"792","desc":"784"},{"messageId":"785","fix":"793","desc":"787"},{"desc":"794","fix":"795"},{"messageId":"782","fix":"796","desc":"784"},{"messageId":"785","fix":"797","desc":"787"},{"messageId":"782","fix":"798","desc":"784"},{"messageId":"785","fix":"799","desc":"787"},{"messageId":"782","fix":"800","desc":"784"},{"messageId":"785","fix":"801","desc":"787"},{"messageId":"782","fix":"802","desc":"784"},{"messageId":"785","fix":"803","desc":"787"},{"desc":"804","fix":"805"},{"messageId":"782","fix":"806","desc":"784"},{"messageId":"785","fix":"807","desc":"787"},{"messageId":"782","fix":"808","desc":"784"},{"messageId":"785","fix":"809","desc":"787"},{"messageId":"782","fix":"810","desc":"784"},{"messageId":"785","fix":"811","desc":"787"},{"messageId":"782","fix":"812","desc":"784"},{"messageId":"785","fix":"813","desc":"787"},{"desc":"814","fix":"815"},{"desc":"816","fix":"817"},{"messageId":"782","fix":"818","desc":"784"},{"messageId":"785","fix":"819","desc":"787"},{"messageId":"782","fix":"820","desc":"784"},{"messageId":"785","fix":"821","desc":"787"},{"messageId":"782","fix":"822","desc":"784"},{"messageId":"785","fix":"823","desc":"787"},{"messageId":"782","fix":"824","desc":"784"},{"messageId":"785","fix":"825","desc":"787"},{"desc":"826","fix":"827"},{"desc":"828","fix":"829"},{"desc":"830","fix":"831"},{"messageId":"782","fix":"832","desc":"784"},{"messageId":"785","fix":"833","desc":"787"},{"messageId":"782","fix":"834","desc":"784"},{"messageId":"785","fix":"835","desc":"787"},{"messageId":"782","fix":"836","desc":"784"},{"messageId":"785","fix":"837","desc":"787"},{"messageId":"782","fix":"838","desc":"784"},{"messageId":"785","fix":"839","desc":"787"},{"desc":"840","fix":"841"},{"desc":"814","fix":"842"},{"desc":"843","fix":"844"},{"messageId":"782","fix":"845","desc":"784"},{"messageId":"785","fix":"846","desc":"787"},{"messageId":"782","fix":"847","desc":"784"},{"messageId":"785","fix":"848","desc":"787"},{"messageId":"782","fix":"849","desc":"784"},{"messageId":"785","fix":"850","desc":"787"},{"messageId":"782","fix":"851","desc":"784"},{"messageId":"785","fix":"852","desc":"787"},{"desc":"828","fix":"853"},{"desc":"854","fix":"855"},{"messageId":"782","fix":"856","desc":"784"},{"messageId":"785","fix":"857","desc":"787"},{"messageId":"782","fix":"858","desc":"784"},{"messageId":"785","fix":"859","desc":"787"},{"messageId":"782","fix":"860","desc":"784"},{"messageId":"785","fix":"861","desc":"787"},{"messageId":"782","fix":"862","desc":"784"},{"messageId":"785","fix":"863","desc":"787"},{"desc":"814","fix":"864"},{"desc":"865","fix":"866"},{"desc":"867","fix":"868"},{"desc":"869","fix":"870"},{"messageId":"782","fix":"871","desc":"784"},{"messageId":"785","fix":"872","desc":"787"},{"messageId":"782","fix":"873","desc":"784"},{"messageId":"785","fix":"874","desc":"787"},{"messageId":"782","fix":"875","desc":"784"},{"messageId":"785","fix":"876","desc":"787"},{"messageId":"782","fix":"877","desc":"784"},{"messageId":"785","fix":"878","desc":"787"},{"desc":"879","fix":"880"},"removeEscape",{"range":"881","text":"882"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"883","text":"884"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"885","text":"882"},{"range":"886","text":"884"},{"range":"887","text":"882"},{"range":"888","text":"884"},{"range":"889","text":"882"},{"range":"890","text":"884"},"Update the dependencies array to be: [createLeaves, formErrors, isSubmitting]",{"range":"891","text":"892"},{"range":"893","text":"882"},{"range":"894","text":"884"},{"range":"895","text":"882"},{"range":"896","text":"884"},{"range":"897","text":"882"},{"range":"898","text":"884"},{"range":"899","text":"882"},{"range":"900","text":"884"},"Update the dependencies array to be: [event, formErrors, isSubmitting]",{"range":"901","text":"902"},{"range":"903","text":"882"},{"range":"904","text":"884"},{"range":"905","text":"882"},{"range":"906","text":"884"},{"range":"907","text":"882"},{"range":"908","text":"884"},{"range":"909","text":"882"},{"range":"910","text":"884"},"Update the dependencies array to be: [getEventData]",{"range":"911","text":"912"},"Update the dependencies array to be: [editEvent, formErrors, isSubmitting]",{"range":"913","text":"914"},{"range":"915","text":"882"},{"range":"916","text":"884"},{"range":"917","text":"882"},{"range":"918","text":"884"},{"range":"919","text":"882"},{"range":"920","text":"884"},{"range":"921","text":"882"},{"range":"922","text":"884"},"Update the dependencies array to be: [getFormData]",{"range":"923","text":"924"},"Update the dependencies array to be: [RoleData]",{"range":"925","text":"926"},"Update the dependencies array to be: [editUser1, formErrors, isSubmitting]",{"range":"927","text":"928"},{"range":"929","text":"882"},{"range":"930","text":"884"},{"range":"931","text":"882"},{"range":"932","text":"884"},{"range":"933","text":"882"},{"range":"934","text":"884"},{"range":"935","text":"882"},{"range":"936","text":"884"},"Update the dependencies array to be: [Tickets, formErrors, isSubmitting]",{"range":"937","text":"938"},{"range":"939","text":"912"},"Update the dependencies array to be: [AllSalaryData]",{"range":"940","text":"941"},{"range":"942","text":"882"},{"range":"943","text":"884"},{"range":"944","text":"882"},{"range":"945","text":"884"},{"range":"946","text":"882"},{"range":"947","text":"884"},{"range":"948","text":"882"},{"range":"949","text":"884"},{"range":"950","text":"926"},"Update the dependencies array to be: [createUser, formErrors, isSubmitting]",{"range":"951","text":"952"},{"range":"953","text":"882"},{"range":"954","text":"884"},{"range":"955","text":"882"},{"range":"956","text":"884"},{"range":"957","text":"882"},{"range":"958","text":"884"},{"range":"959","text":"882"},{"range":"960","text":"884"},{"range":"961","text":"912"},"Update the dependencies array to be: [editUpComingEvent, formErrors, isSubmitting]",{"range":"962","text":"963"},"Update the dependencies array to be: [getTicketData]",{"range":"964","text":"965"},"Update the dependencies array to be: [editTickets, formErrors, isSubmitting]",{"range":"966","text":"967"},{"range":"968","text":"882"},{"range":"969","text":"884"},{"range":"970","text":"882"},{"range":"971","text":"884"},{"range":"972","text":"882"},{"range":"973","text":"884"},{"range":"974","text":"882"},{"range":"975","text":"884"},"Update the dependencies array to be: [formErrors, isSubmitting, upcomingEvent]",{"range":"976","text":"977"},[2917,2918],"",[2917,2917],"\\",[2919,2920],[2919,2919],[2939,2940],[2939,2939],[2941,2942],[2941,2941],[4265,4277],"[createLeaves, formErrors, isSubmitting]",[4174,4175],[4174,4174],[4176,4177],[4176,4176],[4196,4197],[4196,4196],[4198,4199],[4198,4198],[4996,5008],"[event, formErrors, isSubmitting]",[2414,2415],[2414,2414],[2416,2417],[2416,2416],[2436,2437],[2436,2436],[2438,2439],[2438,2438],[4158,4160],"[getEventData]",[7133,7145],"[editEvent, formErrors, isSubmitting]",[1922,1923],[1922,1922],[1924,1925],[1924,1924],[1944,1945],[1944,1944],[1946,1947],[1946,1946],[5592,5594],"[getFormData]",[7381,7383],"[RoleData]",[7987,7999],"[editUser1, formErrors, isSubmitting]",[2861,2862],[2861,2861],[2863,2864],[2863,2863],[2883,2884],[2883,2883],[2885,2886],[2885,2885],[4282,4294],"[Tickets, formErrors, isSubmitting]",[3967,3969],[6771,6773],"[AllSalaryData]",[2068,2069],[2068,2068],[2070,2071],[2070,2070],[2090,2091],[2090,2090],[2092,2093],[2092,2092],[4411,4413],[5656,5668],"[createUser, formErrors, isSubmitting]",[2470,2471],[2470,2470],[2472,2473],[2472,2472],[2492,2493],[2492,2492],[2494,2495],[2494,2494],[4602,4604],[6017,6029],"[editUpComingEvent, formErrors, isSubmitting]",[5515,5517],"[getTicketData]",[5837,5849],"[editTickets, formErrors, isSubmitting]",[4321,4322],[4321,4321],[4323,4324],[4323,4323],[4343,4344],[4343,4343],[4345,4346],[4345,4345],[5625,5637],"[formErrors, isSubmitting, upcomingEvent]"]