[{"C:\\xampp\\htdocs\\cpsi-ems\\src\\index.js":"1","C:\\xampp\\htdocs\\cpsi-ems\\src\\App.js":"2","C:\\xampp\\htdocs\\cpsi-ems\\src\\reportWebVitals.js":"3","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\Footer.js":"4","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\Header.js":"5","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\pages\\Dashboard.js":"6","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\pages\\Login.js":"7","C:\\xampp\\htdocs\\cpsi-ems\\src\\Pagenotfound.js":"8","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Dashboard.js":"9","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Login.js":"10","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Services\\Authapi.js":"11","C:\\xampp\\htdocs\\cpsi-ems\\src\\Config.js":"12","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\InitComponent.js":"13","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\LoadderButton.js":"14","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Permission.js":"15","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\Toast.js":"16","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\TableComponent.js":"17","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\PageLoader.js":"18","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\FloatingButton.js":"19","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Role.js":"20","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\FontAwesomeIconComponent.js":"21","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\Breadcrumb.js":"22","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Users\\Index.js":"23","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Users\\HandleUser.js":"24","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\CountdownTimer.js":"25","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\Timer.js":"26","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\DropdownComponent.js":"27","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\Forms\\AuthForms\\LoginForm.js":"28","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Users\\EditUser.js":"29","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\Forms\\UserForms\\AddForm.js":"30","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\Forms\\UserForms\\EditForm.js":"31","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Leaves\\Leaves1.js":"32","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Leaves\\AddLeaves.js":"33","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Leaves\\EditLeaves.js":"34","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\LeavesTicket\\Ticket.js":"35","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\LeavesTicket\\AddTickets.js":"36","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\LeavesTicket\\EditTicket.js":"37","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\Nav.js":"38","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\ProtectedRoute.js":"39"},{"size":578,"mtime":1615966724258,"results":"40","hashOfConfig":"41"},{"size":13244,"mtime":1617106825756,"results":"42","hashOfConfig":"41"},{"size":362,"mtime":1611727817135,"results":"43","hashOfConfig":"41"},{"size":245,"mtime":1613539753830,"results":"44","hashOfConfig":"41"},{"size":10559,"mtime":1617100137619,"results":"45","hashOfConfig":"41"},{"size":416,"mtime":1611819248493,"results":"46","hashOfConfig":"47"},{"size":3169,"mtime":1611821215950,"results":"48","hashOfConfig":"47"},{"size":252,"mtime":1616580503574,"results":"49","hashOfConfig":"41"},{"size":3234,"mtime":1616759939146,"results":"50","hashOfConfig":"41"},{"size":3771,"mtime":1616740544042,"results":"51","hashOfConfig":"41"},{"size":17697,"mtime":1616673429051,"results":"52","hashOfConfig":"41"},{"size":1372,"mtime":1616580521060,"results":"53","hashOfConfig":"41"},{"size":905,"mtime":1613474243458,"results":"54","hashOfConfig":"41"},{"size":2831,"mtime":1615980010962,"results":"55","hashOfConfig":"41"},{"size":6847,"mtime":1616755870148,"results":"56","hashOfConfig":"41"},{"size":1059,"mtime":1612348660957,"results":"57","hashOfConfig":"58"},{"size":10859,"mtime":1616652822302,"results":"59","hashOfConfig":"41"},{"size":551,"mtime":1613474572339,"results":"60","hashOfConfig":"41"},{"size":724,"mtime":1612508722483,"results":"61","hashOfConfig":"58"},{"size":9167,"mtime":1616735560760,"results":"62","hashOfConfig":"41"},{"size":801,"mtime":1613474634437,"results":"63","hashOfConfig":"41"},{"size":1090,"mtime":1613474707126,"results":"64","hashOfConfig":"41"},{"size":3587,"mtime":1616572343427,"results":"65","hashOfConfig":"41"},{"size":17968,"mtime":1616503023746,"results":"66","hashOfConfig":"41"},{"size":6969,"mtime":1615967599180,"results":"67","hashOfConfig":"41"},{"size":3485,"mtime":1612871506651,"results":"68","hashOfConfig":"58"},{"size":1904,"mtime":1616153584220,"results":"69","hashOfConfig":"41"},{"size":3238,"mtime":1616755107578,"results":"70","hashOfConfig":"41"},{"size":20405,"mtime":1616565474214,"results":"71","hashOfConfig":"41"},{"size":18259,"mtime":1616667766416,"results":"72","hashOfConfig":"41"},{"size":20169,"mtime":1616675081109,"results":"73","hashOfConfig":"41"},{"size":3840,"mtime":1616574537896,"results":"74","hashOfConfig":"41"},{"size":12638,"mtime":1616573538808,"results":"75","hashOfConfig":"41"},{"size":13426,"mtime":1616573647582,"results":"76","hashOfConfig":"41"},{"size":4372,"mtime":1616574636958,"results":"77","hashOfConfig":"41"},{"size":14809,"mtime":1616573892132,"results":"78","hashOfConfig":"41"},{"size":19156,"mtime":1616574142562,"results":"79","hashOfConfig":"41"},{"size":819,"mtime":1616758234653,"results":"80","hashOfConfig":"41"},{"size":2850,"mtime":1617108214011,"results":"81","hashOfConfig":"41"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"btpakp",{"filePath":"85","messages":"86","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"l3yzy2",{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"93"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"97"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"84"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"93"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"93"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"s9zcpk",{"filePath":"125","messages":"126","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"97"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"131"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"97"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"131"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"84"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"97"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"93"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"97"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"93"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"93"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"93"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"84"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\xampp\\htdocs\\cpsi-ems\\src\\index.js",[],["186","187"],"C:\\xampp\\htdocs\\cpsi-ems\\src\\App.js",["188","189","190"],"C:\\xampp\\htdocs\\cpsi-ems\\src\\reportWebVitals.js",[],["191","192"],"C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\Footer.js",["193"],"import React, { Component } from \"react\";\r\n\r\nclass Footer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return <div className=\"footer\"> <p> Developed By: CPSI</p></div>\r\n  }\r\n}\r\n\r\nexport default Footer;",["194","195"],"C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\Header.js",["196","197","198","199","200","201","202"],"import React, { useEffect } from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport AuthApi from '../Services/Authapi';\r\nimport ls from \"local-storage\";\r\nimport Logo from \"../../Images/logo.png\";\r\nimport FontAwesomeIconComponent from './FontAwesomeIconComponent';\r\nimport Nav from './Nav';\r\n\r\nconst drawerWidth = 240;\r\n\r\nexport default function MiniDrawer(props) {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [open, setOpen] = React.useState(false);\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const opens = Boolean(anchorEl);\r\n  \r\n\r\n\r\n  const handleMenu = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n\r\n\r\n  const logOut = async (e) => {\r\n   \r\n    outTimer();\r\n    let logOut = await AuthApi.logout();\r\n    if (logOut.status === true) {\r\n      ls.set(\"authToken\", false);\r\n      props.setAutUser({ authToken: false, authUser: false})\r\n    }\r\n    ls.clear(); \r\n    window.location.reload();\r\n  }\r\n  \r\n  const  outTimer = async (e) => {\r\n    await AuthApi.outTime();\r\n  }\r\n\r\n \r\n \r\n  // useEffect(\r\n  //   () =>\r\n  //   setTimeout(() => {\r\n  //     console.log(props.roles)\r\n  //   }, 10000));\r\n\r\n// console.log(props.roles)\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"fixed\"\r\n        className={clsx(classes.appBar, {\r\n          [classes.appBarShift]: open,\r\n        })}\r\n      >\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            edge=\"start\"\r\n            className={clsx(classes.menuButton, {\r\n              [classes.hide]: open,\r\n            })}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <IconButton\r\n            aria-label=\"account of current user\"\r\n            aria-controls=\"menu-appbar\"\r\n            aria-haspopup=\"true\"\r\n            onClick={handleMenu}\r\n            className={classes.ds}\r\n            color=\"inherit\"><AccountCircle />\r\n          </IconButton>\r\n          <Menu\r\n            id=\"menu-appbar\"\r\n            anchorEl={anchorEl}\r\n            anchorOrigin={{\r\n              vertical: 'top',\r\n              horizontal: 'right',\r\n            }}\r\n            keepMounted\r\n            transformOrigin={{\r\n              vertical: 'top',\r\n              horizontal: 'right',\r\n            }}\r\n            open={opens}\r\n            onClose={handleClose}\r\n          >\r\n            <MenuItem onClick={handleClose}>Profile</MenuItem>\r\n            <MenuItem onClick={(e) => { logOut(e) }}>Logout</MenuItem>\r\n          </Menu>\r\n\r\n        </Toolbar>\r\n\r\n      </AppBar>\r\n\r\n\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        className={clsx(classes.drawer, {\r\n          [classes.drawerOpen]: open,\r\n          [classes.drawerClose]: !open,\r\n        })}\r\n        classes={{\r\n          paper: clsx({\r\n            [classes.drawerOpen]: open,\r\n            [classes.drawerClose]: !open,\r\n          }),\r\n        }}\r\n      >\r\n        <div className={classes.toolbar}>\r\n          <img style={{ height: \"35px\" , paddingRight:\"30px\"}} src={Logo} alt=\"ds\" />\r\n          <h1 style={{ fontSize: \"20px\", paddingRight:\"20px\"  }}>CPSI EMS</h1>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            {theme.direction === 'rtl' ? <ChevronRightIcon /> : <ChevronLeftIcon />}\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <List>\r\n          {/* <Tooltip title=\"Dashabord\" placement=\"right\">\r\n            <ListItem button onClick={(e) => { e.preventDefault(); props.history.push('/dashboard') }}  >\r\n              <ListItemIcon>\r\n                <FontAwesomeIconComponent classes=\"fa fa-home\" colorName=\"primary\" fontSize={\"small\"} />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Dashabord\" />\r\n            </ListItem>\r\n          </Tooltip> */}\r\n          <Nav onClick={(e) => { e.preventDefault(); props.history.push('/dashboard') }} classes=\"fa fa-home\" primary=\"Dashabord\" title=\"Dashabord\" placement=\"right\" />\r\n      \r\n          {/* <Tooltip title=\"Manage Permission\" placement=\"right\" style={{ display: (props.authUser && props.authUser.userAccess && props.authUser.userAccess.length > 0 && props.authUser.userAccess.indexOf('manage-permission') > -1) ? \"flex\" : \"none\" }} > */}\r\n          {/* <Tooltip title=\"Manage Permission\" placement=\"right\" >\r\n            <ListItem button onClick={(e) => { props.history.push('/permission') }} >\r\n              <ListItemIcon>\r\n                <FontAwesomeIconComponent classes=\"fa fa-lock\" colorName=\"primary\" fontSize={\"small\"} />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Manage Permission\" />\r\n            </ListItem>\r\n          </Tooltip>\r\n          <Tooltip title=\"Manage Role\" placement=\"right\">\r\n            <ListItem button onClick={(e) => { props.history.push('/role') }}>\r\n              <ListItemIcon>\r\n                <FontAwesomeIconComponent classes=\"fa fa-user\" colorName=\"primary\" fontSize={\"small\"} />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Manage Role\" />\r\n            </ListItem>\r\n          </Tooltip>\r\n          <Tooltip title=\"Manage Users\" placement=\"right\">\r\n            <ListItem button onClick={(e) => { e.preventDefault(); props.history.push('/users') }} >\r\n              <ListItemIcon>\r\n                <FontAwesomeIconComponent classes=\"fa fa-users\" colorName=\"primary\" fontSize={\"small\"} />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Manage Users\" />\r\n            </ListItem>\r\n          </Tooltip>\r\n          <Tooltip title=\"Leaves & Holidays\" placement=\"right\">\r\n            <ListItem button onClick={(e) => { e.preventDefault(); props.history.push('/leaves') }} >\r\n              <ListItemIcon>\r\n                <FontAwesomeIconComponent classes=\"fas fa-sign-out-alt\" colorName=\"primary\" fontSize={\"small\"} />\r\n              </ListItemIcon>\r\n              <ListItemText primary= \"Leaves & Holidays\" />\r\n            </ListItem>\r\n          </Tooltip> */}\r\n          {ls('roles') === 'Super Admin' ? \r\n             [<Nav onClick={(e) => { e.preventDefault(); props.history.push('/permission') }} classes=\"fa fa-lock\" primary=\"Manage Permission\" title=\"Manage Permission\" placement=\"right\" />,\r\n             <Nav onClick={(e) => { e.preventDefault(); props.history.push('/role') }}  classes=\"fa fa-user\" primary=\"Manage Role\" title=\"Manage Role\" placement=\"right\" />,\r\n             <Nav onClick={(e) => { e.preventDefault(); props.history.push('/users') }} classes=\"fa fa-users\"  primary=\"Manage Users\" title=\"Manage Users\" placement=\"right\" />,\r\n             <Nav onClick={(e) => { e.preventDefault(); props.history.push('/leaves') }} classes=\"fas fa-sign-out-alt\" primary= \"Leaves & Holidays\" title=\"Leaves & Holidays\" placement=\"right\" />]\r\n          : null\r\n          }\r\n          {/* <Tooltip title=\"Leave Tickets\" placement=\"right\">\r\n            <ListItem button onClick={(e) => { e.preventDefault(); props.history.push('/tickets') }} >\r\n              <ListItemIcon>\r\n                <FontAwesomeIconComponent classes=\"fas fa-ticket-alt\" colorName=\"primary\" fontSize={\"small\"} />\r\n              </ListItemIcon>\r\n              <ListItemText primary= \"Leaves Tickets\" />\r\n            </ListItem>\r\n          </Tooltip> */}\r\n          <Nav onClick={(e) => { e.preventDefault(); props.history.push('/tickets') }} classes=\"fas fa-ticket-alt\" primary=\"Leaves Tickets\" title=\"Leave Tickets\" placement=\"right\" />\r\n\r\n       \r\n        </List>\r\n      </Drawer>\r\n      <main className={classes.content}>\r\n        <div className={classes.toolbar} />\r\n        {props.component}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n    whiteSpace: 'nowrap',\r\n  },\r\n  drawerOpen: {\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerClose: {\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    overflowX: 'hidden',\r\n    width: theme.spacing(7) + 1,\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: theme.spacing(9) + 1,\r\n    },\r\n  },\r\n  toolbar: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'flex-end',\r\n    padding: theme.spacing(0, 1),\r\n    // necessary for content to be below app bar\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n\r\n  ds: {\r\n    position: 'absolute',\r\n    right: 0\r\n  }\r\n}));",["203","204"],"C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\pages\\Dashboard.js",[],"C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\pages\\Login.js",["205","206"],"C:\\xampp\\htdocs\\cpsi-ems\\src\\Pagenotfound.js",[],"C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Dashboard.js",["207"],"import React, { Component } from 'react';\r\nimport Header from '../Layouts/Header'\r\nimport Footer from '../Layouts/Footer';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Breadcrumb from '../Layouts/Breadcrumb';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CountdownTimer from '../Layouts/CountdownTimer';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nclass Dashboard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      classes: useStyles,\r\n      alertIsOpnen: false,\r\n    }\r\n  }\r\n\r\n  componentWillMount() {\r\n    if (this.props && this.props.authToken === false) {\r\n      this.props.history.push('/login');\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(props) {\r\n    if (props && props.authToken == false) {\r\n      props.history.push('/login');\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const classes = this.props;\r\n    return (\r\n      <div>\r\n        <Header\r\n          {...this.props}\r\n          authUser={this.props.authUser}\r\n          setAutUser={this.props.setAutUser}\r\n          component={\r\n            <div>\r\n              <Card className={classes.root} style={{ marginBottom: '3%' }}>\r\n                <CardContent>\r\n                  <Breadcrumb\r\n                    {...this.props}\r\n                    primaryPageName=\"Dashboard\"\r\n                    primaryPageLink=\"/dashboard\"\r\n                    isSecondaryPage={false}\r\n                    secondaryPageName=\"\" />\r\n                </CardContent>\r\n              </Card>\r\n              <Grid container className={this.state.classes.root} spacing={2}>\r\n                <Grid item xs={6}>\r\n                  <Card className={classes.root} style={{ marginBottom: '3%' }}>\r\n                    <CardContent>\r\n                      <CountdownTimer\r\n                        count={this.props.count}\r\n                        timerOn={this.props.timerOn}\r\n                        updateCounter={this.props.updateCounter}\r\n                        startTimer={this.props.startTimer}\r\n                        stopTimer={this.props.stopTimer}\r\n                        startTime={this.props.startTime}\r\n                        {...this.props} />\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                  <Card className={classes.root} style={{ marginBottom: '3%' }}>\r\n                  <CardContent>\r\n                 \r\n                    </CardContent>\r\n                 \r\n                  </Card>\r\n                </Grid>\r\n              </Grid>\r\n            </div>\r\n          } />\r\n        <Footer {...this.props} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.default,\r\n    padding: theme.spacing(3),\r\n  },\r\n  bullet: {\r\n    display: 'inline-block',\r\n    margin: '0 2px',\r\n    transform: 'scale(0.8)',\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n}));\r\n\r\nexport default Dashboard;\r\n","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Login.js",["208","209","210","211","212","213","214","215","216","217","218","219","220"],"import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Input from '@material-ui/core/Input';\r\nimport { TextField } from '@material-ui/core';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\nimport AuthApi from '../Services/Authapi';\r\nimport clsx from 'clsx';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { green } from '@material-ui/core/colors';\r\nimport ls, { get, set } from \"local-storage\";\r\nimport { Textbox } from 'react-inputs-validation';\r\nimport LoadderButton from '../Layouts/LoadderButton';\r\nimport Logo from '../../Images/logo.png';\r\nimport swal from 'sweetalert';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Formik } from 'formik';\r\nimport LoginForm from '../Layouts/Forms/AuthForms/LoginForm';\r\n\r\nclass Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      email: false,\r\n      password: false\r\n    }\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  componentWillMount() {\r\n    if (this.props && this.props.authToken !== false) {\r\n      this.props.history.push('/dashboard');\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(props) {\r\n    if (props && props.authToken !== false) {\r\n      props.history.push('/dashboard');\r\n    }\r\n  }\r\n\r\n  handleSubmit = async (e) => {\r\n    let formData = {\r\n      email: this.state.email,\r\n      password: this.state.password\r\n    }\r\n    let checkLogin = await AuthApi.login(formData);\r\n    if (checkLogin && checkLogin !== false) {\r\n      ls.set(\"authToken\", checkLogin.access_token);\r\n      this.props.setAutUser({ authUser: checkLogin.data, authToken: checkLogin.access_token })\r\n    } else {\r\n      swal({\r\n        title: \"OOPS!\",\r\n        text: \"Invalid Credentials\",\r\n        icon: \"error\",\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <main className={classes.main}>\r\n        <CssBaseline />\r\n        <Paper className={classes.paper}>\r\n          <img style={{ height: \"35px\" }} src={Logo} alt=\"ds\" />\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            CPSI EMS\r\n          </Typography>\r\n          <LoginForm setAutUser={this.props.setAutUser} />\r\n        </Paper>\r\n      </main>\r\n    )\r\n  }\r\n}\r\n\r\nconst styles = theme => ({\r\n  main: {\r\n    width: 'auto',\r\n    display: 'block', // Fix IE 11 issue.\r\n    marginLeft: theme.spacing(3),\r\n    marginRight: theme.spacing(3),\r\n    [theme.breakpoints.up(400 + theme.spacing(3,2))]: {\r\n      width: 400,\r\n      marginLeft: 'auto',\r\n      marginRight: 'auto',\r\n    },\r\n  },\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    padding: `${theme.spacing(2)}px ${theme.spacing(3)}px ${theme.spacing(3)}px`,\r\n  },\r\n\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(0),\r\n  },\r\n  submit: {\r\n    marginTop: theme.spacing(3),\r\n    backgroundColor: '#000',\r\n  },\r\n  link: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n  root: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n  },\r\n  wrapper: {\r\n    margin: theme.spacing(1),\r\n    position: 'relative',\r\n  },\r\n  buttonSuccess: {\r\n    backgroundColor: green[500],\r\n    '&:hover': {\r\n      backgroundColor: green[700],\r\n    },\r\n  },\r\n\r\n  buttonProgress: {\r\n    color: green[500],\r\n    position: 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    marginTop: -12,\r\n    marginLeft: -12,\r\n  },\r\n});\r\nexport default withStyles(styles)(Login);","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Services\\Authapi.js",[],"C:\\xampp\\htdocs\\cpsi-ems\\src\\Config.js",["221"],"export default {\r\n    apiurl: (process.env.NODE_ENV === 'development') ? \"http://cspi-ems-api.localhost.com/\" : \"http://emsapi.cherrypiksoftware.com/\",\r\n    authApis: {\r\n        login: \"api/auth/login\",\r\n        logout: \"api/auth/logout\",\r\n        refreshToken: \"api/auth/refresh\",\r\n    },\r\n    apis: {\r\n        userList: \"api/users\",\r\n        authUser: \"api/users/me\",\r\n        userInTime: \"api/emp/in-time\",\r\n        userOutTime: \"api/emp/out-time\",\r\n        getPermission: \"api/permission\",\r\n        createPermission: \"api/permission\",\r\n        updatePermission: \"api/permission/\",\r\n        deletePermission: \"api/permission/remove/\",\r\n        getRole: \"api/role\",\r\n        createRole: \"api/role\",\r\n        deleteRole: \"api/role/remove/\",\r\n        deleteUser: \"api/users/remove/\",\r\n        updateRole: \"api/role/\",\r\n        updateImg: \"api/upload\",\r\n        deleteImg: \"api/remove-file\",\r\n        createUser: \"api/users/create\",\r\n        editUser: \"api/users/update/\",\r\n        singleUser: \"api/users/\",\r\n        dureTime: \"api/emp/totalDurationTime\",\r\n        holidayLeave: \"api/holiday-leave\",\r\n        removeLeave: \"api/holiday-leave/\",\r\n        eidtLeave: \"api/holiday-leave/\",\r\n        singleLeave: \"api/holiday-leave/\",\r\n        createTicket: \"api/leave\",\r\n        EditTicket: \"api/leave/update-status/\",\r\n        singleTicket: \"api/leave/edit-status/\"\r\n    }\r\n};","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\InitComponent.js",[],"C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\LoadderButton.js",["222"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { green } from '@material-ui/core/colors';\r\nimport Button from '@material-ui/core/Button';\r\nimport { Component } from 'react';\r\n\r\n\r\nclass LoadderButton extends Component {\r\n \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        loading: false,\r\n    }\r\n    \r\n  } \r\n  \r\n   handleButtonClick = async () => {\r\n      this.setState({\r\n        loading: true\r\n      })\r\n      if(this.props && typeof this.props.onClickFn === 'function') {\r\n        await this.props.onClickFn();\r\n      }\r\n  }\r\n\r\n  render() {\r\n    const classes = {\r\n      root: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n      },\r\n      wrapper: {\r\n        margin: '10% auto',\r\n        position: 'relative',\r\n      },\r\n      buttonSuccess: {\r\n        backgroundColor: green[500],\r\n        '&:hover': {\r\n          backgroundColor: green[700],\r\n        },\r\n      },\r\n      fabProgress: {\r\n        color: green[500],\r\n        position: 'absolute',\r\n        top: -6,\r\n        left: -6,\r\n        zIndex: 1,\r\n      },\r\n      buttonProgress: {\r\n        color: green[500],\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        marginTop: -12,\r\n        marginLeft: -12,\r\n      },\r\n    };\r\n    return(\r\n    \r\n             <div className={classes.root}>\r\n                  <div className={classes.wrapper}>\r\n     <Button\r\n          type={(this.props && this.props.btnType) ? this.props.btnType : 'button'}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          disabled={this.state.loading}\r\n          onClick={this.handleButtonClick}\r\n        >\r\n          {this.props.btnText}\r\n        </Button>\r\n        {this.state.loading && <CircularProgress size={20} />}\r\n      </div>\r\n    </div>\r\n      \r\n    )\r\n  }\r\n}\r\n\r\nexport default LoadderButton;\r\n\r\n// export default function LoadderButton(props) {\r\n//   const classes = useStyles();\r\n//   const [loading, setLoading] = React.useState(false);\r\n\r\n//   const handleButtonClick = async () => {\r\n//     setLoading(true);\r\n//     if (props && typeof props.onClickFn === 'function') {\r\n//       await props.onClickFn();\r\n//     }\r\n//     setLoading(false);\r\n//   };\r\n\r\n//   return (\r\n//     <div className={classes.root}>\r\n//       <div className={classes.wrapper}>\r\n//         <Button\r\n//           type={(props && props.btnType) ? props.btnType : 'button'}\r\n//           variant=\"contained\"\r\n//           color=\"primary\"\r\n//           disabled={loading}\r\n//           onClick={handleButtonClick}\r\n//         >\r\n//           {props.btnText}\r\n//         </Button>\r\n//         {loading && <CircularProgress size={24} className={classes.buttonProgress} />}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Permission.js",["223","224"],"import React, { Component } from 'react';\r\nimport Header from '../Layouts/Header'\r\nimport Footer from '../Layouts/Footer';\r\nimport AuthApi from '../Services/Authapi';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport swal from 'sweetalert';\r\nimport TableComponent from '../Layouts/TableComponent';\r\nimport Breadcrumb from '../Layouts/Breadcrumb';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\n\r\nclass Permission extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      permission: [],\r\n      count:0,\r\n      setopen: false,\r\n      permissionName: false,\r\n      isPopup: false,\r\n      tableTh: [\r\n        { id: 'name', numeric: false, disablePadding: true, label: 'Name', sortable: true },\r\n        { id: 'created_at', numeric: false, disablePadding: true, label: 'Created On', sortable: true },\r\n        { id: 'actions', numeric: false, disablePadding: true, label: 'Actions', sortable: false }\r\n      ]\r\n    }\r\n    this.permissionData = this.permissionData.bind(this);\r\n    this.handleClickOpen = this.handleClickOpen.bind(this);\r\n    this.handleClose = this.handleClose.bind(this);\r\n    this.updatChange = this.updatChange.bind(this);\r\n    this.saveData = this.saveData.bind(this);\r\n    this.removePermission = this.removePermission.bind(this);\r\n    this.updatePermission = this.updatePermission.bind(this);\r\n    this.handleClickOpenUpdate = this.handleClickOpenUpdate.bind(this);\r\n  }\r\n\r\n  componentWillMount() {\r\n    if (this.props && this.props.authToken === false) {\r\n      this.props.history.push('/login');\r\n    }\r\n    this.permissionData();\r\n  }\r\n\r\n  componentWillReceiveProps(props) {\r\n    if (props && props.authToken === false) {\r\n      props.history.push('/login');\r\n    }\r\n  }\r\n\r\n\r\n  permissionData = async (e) => {\r\n    let permission = await AuthApi.getPermission();\r\n    if (permission && permission.status === true) {\r\n      this.setState({\r\n        permission: permission.data,\r\n        count:permission.data.length\r\n      })\r\n    }\r\n  }\r\n\r\n  updatePermission = async (id) => {\r\n    let stat = await AuthApi.updatePermission(this.state.permissionName, id);\r\n    if (stat && stat.status === true) {\r\n      this.setState({ setopen: false }, function () {\r\n        this.permissionData();\r\n      });\r\n    }\r\n  }\r\n\r\n  handleClickOpen(row = false) {\r\n    this.setState({\r\n      setopen: true,\r\n      isPopup: true,\r\n      permissionName: row.name,\r\n\r\n    })\r\n  };\r\n\r\n  handleClickOpenUpdate(row = false) {\r\n    this.setState({\r\n      setopen: true,\r\n      isPopup: false,\r\n      permissionName: row.name,\r\n      permissionId: row.id,\r\n    })\r\n  };\r\n\r\n  handleClose() {\r\n    this.setState({\r\n      setopen: false\r\n    })\r\n  };\r\n\r\n  async saveData() {\r\n    if (this.state.isPopup) {\r\n      let currentPermission = await AuthApi.createPermission(this.state.permissionName);\r\n      if (currentPermission && currentPermission.status === true) {\r\n        this.setState({ setopen: false }, function () {\r\n          this.permissionData();\r\n        });\r\n      } else {\r\n        // axios popup result  \r\n      }\r\n    } else {\r\n      this.updatePermission(this.state.permissionId)\r\n    }\r\n  }\r\n\r\n  async removePermission(id) {\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      icon: \"warning\",\r\n      buttons: [\"Cancel\", \"Yes\"]\r\n    }).then(async (confirm) => {\r\n      if (confirm) {\r\n        let currentPermission = await AuthApi.deletePermission(id);\r\n        if (currentPermission && currentPermission.status === true) {\r\n          this.permissionData();\r\n        } else {\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  updatChange(e) {\r\n    this.setState({ permissionName: e.target.value })\r\n  }\r\n\r\n  render() {\r\n    const classes = this.props;\r\n    return (\r\n      <div>\r\n        <Header\r\n          {...this.props}\r\n          authUser={this.props.authUser}\r\n          setAutUser={this.props.setAutUser}\r\n          component={\r\n            <div>\r\n              <Card className={classes.root} style={{ marginBottom: '3%' }}>\r\n                <CardContent>\r\n                  <Breadcrumb\r\n                    {...this.props}\r\n                    primaryPageName=\"Permissions\"\r\n                    primaryPageLink=\"/permission\"\r\n                    isSecondaryPage={false}\r\n                    secondaryPageName=\"\" />\r\n                </CardContent>\r\n              </Card>\r\n              <TableComponent\r\n                {...this.props}\r\n                tableTh={this.state.tableTh}\r\n                tableData={this.state.permission}\r\n                tableCount={this.state.count}\r\n                colNameToShow={['name', 'created_at']}\r\n                openPopUp={this.handleClickOpen}\r\n                openPopUpUpdate={this.handleClickOpenUpdate}\r\n                removeRow={this.removePermission}\r\n                actionBtns={['update', 'delete']}\r\n                modelName={'Permission'}\r\n              /></div>\r\n          } />\r\n        <Footer />\r\n        <PopUp\r\n          isPopup={this.state.isPopup}\r\n          {...this.props}\r\n          handleClose={this.handleClose}\r\n          setopen={this.state.setopen} permissionName={this.state.permissionName} saveData={this.saveData} updatChange={this.updatChange} updatePermission={this.updatePermission} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Permission;\r\n\r\nclass PopUp extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Dialog open={this.props.setopen}>\r\n          <DialogTitle>{(this.props.isPopup) ? \"Add Permission\" : \" Update Permission\"}</DialogTitle>\r\n          <DialogContent>\r\n            {/* <DialogContentText> */}\r\n              {/* <TextField autoFocus name=\"name\" label=\"Name\" type=\"text\" value={(this.props.permissionName && this.props.permissionName !== false) ? this.props.permissionName : null} onChange={(e) => { this.props.updatChange(e) }} /> */}\r\n              <TextField autoFocus name=\"name\" label=\"Name\" type=\"text\" value={(this.props.permissionName && this.props.permissionName !== false) ? this.props.permissionName : \"\"} onChange={(e) => { this.props.updatChange(e) }} />\r\n            {/* </DialogContentText> */}\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button color=\"primary\" onClick={(e) => { this.props.saveData() }} > Save </Button>\r\n            <Button onClick={(e) => { this.props.handleClose() }} color=\"primary\"> Close </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </div>\r\n    )\r\n  }\r\n}","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\Toast.js",[],"C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\TableComponent.js",["225","226","227","228"],"import React, { useEffect } from 'react';\r\nimport { withStyles, makeStyles, useTheme, lighten } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\nimport PropTypes from 'prop-types';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Button from '@material-ui/core/Button';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport FontAwesomeIconComponent from '../Layouts/FontAwesomeIconComponent';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\nexport default function TableComponent(props) {\r\n  const classes = useStyles();\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n  const [order, setOrder] = React.useState(props.tableTh[0]);\r\n  const [orderBy, setOrderBy] = React.useState(props.tableTh[0]);\r\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, props.tableData.length - page * rowsPerPage);\r\n\r\n  const handleRequestSort = (property) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleChangePage = (newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const getActionBtns = (props, row) => {\r\n    return <div>\r\n      <Grid container spacing={3}>\r\n        {(props.actionBtns.indexOf('update') > -1) ? <Grid item xs={1}> <IconButton variant=\"contained\" color=\"primary\" onClick={(e) => { (props.openPopUpUpdate !== false) ? props.openPopUpUpdate(row) : props.history.push(props.updateRoute + '/' + row.id) }}><FontAwesomeIconComponent classes=\"fa fa-edit\" colorName=\"primary\" fontSize={\"small\"} /></IconButton> </Grid> : \"\"}\r\n        {(props.actionBtns.indexOf('delete') > -1) ? <Grid item xs={1}> <IconButton variant=\"contained\" color=\"primary\" onClick={(e) => { props.removeRow(row.id) }}><FontAwesomeIconComponent classes=\"fa fa-trash\" colorName=\"primary\" fontSize={\"small\"} /></IconButton> </Grid> : \"\"}\r\n      </Grid>\r\n    </div>\r\n  };\r\n\r\n  // let th = [];\r\n  useEffect(() => {\r\n    if (props.tablePagestatus === true) {\r\n      let rawCount = props.tableCount\r\n      let perPage = rowsPerPage\r\n      let answer = rawCount/perPage;\r\n      let page2 = page\r\n      if(page2  > (rawCount % perPage)) {\r\n      if((rawCount % perPage) ===0){\r\n        handleChangePage(answer - 1)\r\n      }else {\r\n        handleChangePage(Math.floor(answer))\r\n      }\r\n    }\r\n  }\r\n  });\r\n\r\n  let td = [];\r\n  let tr = [];\r\n  if (Object.keys(props.tableData).length > 0) {\r\n    let tableRows = props.tableData;\r\n   \r\n    if (rowsPerPage > 0) {\r\n      tableRows = props.tableData.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage);\r\n    }\r\n    tableRows = stableSort(tableRows, getComparator(order, orderBy))\r\n    Object.keys(tableRows).forEach((key) => {\r\n      Object.keys(tableRows[key]).forEach((i) => {\r\n        if (props.colNameToShow.indexOf(i) > -1) {\r\n          td.push(<TableCell key={i} align=\"left\">{tableRows[key][i]}</TableCell>)\r\n        }\r\n      })\r\n      // td.push()\r\n      tr.push(<StyledTableRow key={key}>{td}<TableCell align=\"left\">{getActionBtns(props, tableRows[key])}</TableCell></StyledTableRow>);\r\n      td = [];\r\n    })\r\n\r\n    // if (emptyRows > 0) {\r\n    //   tr.push(<TableRow style={{ height: 67 * emptyRows }}> <TableCell colSpan={Object.keys(props.tableTh).length} /> </TableRow>)\r\n    // }\r\n  }\r\n  else {\r\n    // td.push(<TableCell colSpan={Object.keys(props.tableTh).length} align=\"center\">No data found</TableCell>)\r\n    tr.push(<StyledTableRow key={1}><TableCell colSpan={Object.keys(props.tableTh).length} align=\"center\">No   found</TableCell></StyledTableRow>);\r\n    \r\n  }\r\n  \r\n\r\n  return (\r\n    <TableContainer component={Paper} style={{ marginBottom: '5%' }}>\r\n      <Typography  variant=\"h2\">Manage {props.modelName}</Typography>\r\n      <Button variant=\"contained\" color=\"primary\" style={{ float: \"right\", margin: \"22px\" }} onClick={(e) => { (props.openPopUp !== false) ? props.openPopUp() : props.history.push(props.addRoute) }}>Add</Button>\r\n      <Table className={classes.table} aria-label=\"customized table\" style={{ tableLayout: 'fixed', width: '100%' }}>\r\n        <TableHead>\r\n          <EnhancedTableHead\r\n            classes={classes}\r\n            order=\"desc\"\r\n            orderBy=\"asc\"\r\n            onRequestSort={handleRequestSort}\r\n            rowCount={props.tableTh.length}\r\n            tableTh={props.tableTh}\r\n          />\r\n        </TableHead>\r\n        <TableBody>\r\n          {tr}\r\n        </TableBody>\r\n        <TableFooter>\r\n          <TableRow>\r\n            <TablePagination\r\n              rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\r\n              colSpan={3}\r\n              // count={props.tableData.length}\r\n              count={props.tableCount}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              SelectProps={{\r\n                inputProps: { 'aria-label': 'rows per page' },\r\n                native: true,\r\n              }}\r\n              onChangePage={handleChangePage}\r\n              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n              ActionsComponent={TablePaginationActions}\r\n            />\r\n          </TableRow>\r\n        </TableFooter>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    '&:nth-of-type(odd)': {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 700,\r\n  },\r\n  head: {\r\n    backgroundColor: '#1B6E95',\r\n    color: '#fff',\r\n    margin: '0 auto',\r\n    '& th': {\r\n      color: '#fff',\r\n    },\r\n    '& th > span:hover': {\r\n      color: '#fff',\r\n    },\r\n    '& th:hover': {\r\n      color: '#fff',\r\n    },\r\n    '& th:active': {\r\n      color: '#fff',\r\n    },\r\n    '& th > span:active': {\r\n      color: '#fff',\r\n    }\r\n  }\r\n});\r\n\r\nconst useStyles1 = makeStyles((theme) => ({\r\n  root: {\r\n    flexShrink: 0,\r\n    marginLeft: theme.spacing(2.5),\r\n  },\r\n}));\r\n\r\n\r\n\r\nfunction TablePaginationActions(props) {\r\n  // console.log(props.tablePage)\r\n  const classes = useStyles1();\r\n  const theme = useTheme();\r\n  const { count, page, rowsPerPage, onChangePage } = props;\r\n\r\n\r\n  const handleFirstPageButtonClick = () => {\r\n    onChangePage(0);\r\n  };\r\n\r\n  const handleBackButtonClick = () => {\r\n    onChangePage(page - 1);\r\n  };\r\n\r\n  const handleNextButtonClick = () => {\r\n    onChangePage(page + 1);  \r\n  };\r\n\r\n  const handleLastPageButtonClick = () => {\r\n    onChangePage(Math.max(0, Math.ceil(count / rowsPerPage) - 1));\r\n  };\r\n\r\n  // console.log(props.count)\r\n  return (\r\n    <div className={classes.root}>\r\n      <IconButton\r\n        onClick={handleFirstPageButtonClick}\r\n        disabled={page === 0}\r\n        aria-label=\"first page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\r\n      </IconButton>\r\n      <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\r\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleNextButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"next page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleLastPageButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"last page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n\r\nTablePaginationActions.propTypes = {\r\n  count: PropTypes.number.isRequired,\r\n  onChangePage: PropTypes.func.isRequired,\r\n  page: PropTypes.number.isRequired,\r\n  rowsPerPage: PropTypes.number.isRequired,\r\n};\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const { classes, order, orderBy, onRequestSort } = props;\r\n  const createSortHandler = (property) => () => {\r\n    onRequestSort(property);\r\n  };\r\n\r\n  return (\r\n    <TableRow className={classes.head}>\r\n      {props.tableTh.map((headCell) => (\r\n        <TableCell\r\n          key={headCell.id}\r\n          align={headCell.numeric ? 'right' : 'left'}\r\n          // padding=\"10%\"\r\n          maxwidth=\"300px\"\r\n          whitespace=\"normal\"\r\n          sortDirection={orderBy === headCell.id ? order : false}\r\n        >\r\n          {\r\n            (headCell.sortable === true) ? <TableSortLabel\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {(orderBy === headCell.id) ? (\r\n                <span className={classes.visuallyHidden}>\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel> : headCell.label\r\n          }\r\n        </TableCell>\r\n      ))}\r\n    </TableRow>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  // onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\PageLoader.js",["229"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    '& > * + *': {\r\n      marginLeft: theme.spacing(2),\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function PageLoader() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div style={{ display: 'grid', height: '100vh' }}><div style={{ margin: 'auto', verticalAlign: 'middle' }}> <CircularProgress /></div></div>\r\n  );\r\n}\r\n",["230","231"],"C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\FloatingButton.js",[],"C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Role.js",["232","233","234","235","236","237","238","239"],"import React, { Component } from 'react';\r\nimport Header from '../Layouts/Header'\r\nimport Footer from '../Layouts/Footer';\r\nimport Container from '@material-ui/core/Container';\r\nimport AuthApi from '../Services/Authapi';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport swal from 'sweetalert';\r\nimport TableComponent from '../Layouts/TableComponent';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Breadcrumb from '../Layouts/Breadcrumb';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport DropdownComponent from '../Layouts/DropdownComponent';\r\nimport PageLoader from '../Layouts/PageLoader';\r\n\r\nclass Role extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      role: false,\r\n      count: 0,\r\n      pageStatus:false,\r\n      setopen: false,\r\n      roleName: false,\r\n      permission: false,\r\n      isPopup: false,\r\n      checkbox: [],\r\n      tableTh: [\r\n        { id: 'name', numeric: false, disablePadding: true, label: 'Name', sortable: true },\r\n        { id: 'created_at', numeric: false, disablePadding: true, label: 'Created On', sortable: true },\r\n        { id: 'actions', numeric: false, disablePadding: true, label: 'Actions', sortable: false }\r\n      ]\r\n    }\r\n    this.roleData = this.roleData.bind(this);\r\n    this.handleClickOpen = this.handleClickOpen.bind(this);\r\n    this.handleClose = this.handleClose.bind(this);\r\n    this.updatChange = this.updatChange.bind(this);\r\n    this.saveData = this.saveData.bind(this);\r\n    this.removeRole = this.removeRole.bind(this);\r\n    this.updateCheckbox = this.updateCheckbox.bind(this);\r\n    this.handleClickOpenUpdateRole = this.handleClickOpenUpdateRole.bind(this);\r\n    this.updateRoleee = this.updateRoleee.bind(this);\r\n  }\r\n  componentWillMount() {\r\n    if (this.props && this.props.authToken === false) {\r\n      this.props.history.push('/login');\r\n    }\r\n    this.roleData();\r\n  }\r\n\r\n  componentWillReceiveProps(props) {\r\n    if (props && props.authToken === false) {\r\n      props.history.push('/login');\r\n    }\r\n  }\r\n\r\n  roleData = async (e) => {\r\n    let role = await AuthApi.getRole();\r\n    this.setState({\r\n      role: role.data,\r\n      count: role.data.length,\r\n    })\r\n  }\r\n\r\n  async handleClickOpen(row = false) {\r\n    let permission = await AuthApi.getPermission();\r\n    this.setState({\r\n      permission: permission.data,\r\n    })\r\n    this.setState({\r\n      setopen: true,\r\n      isPopup: true,\r\n      roleName: row.name,\r\n    })\r\n  };\r\n\r\n  async updateRoleee(id) {\r\n    let upte = await AuthApi.updateRole(this.state.roleName, this.state.checkBox, id);\r\n    if (upte && upte.status === true) {\r\n      this.setState({ setopen: false }, function () {\r\n        this.roleData();\r\n      })\r\n    }\r\n  }\r\n\r\n  async handleClickOpenUpdateRole(row = false) {\r\n    let permission = await AuthApi.getPermission();\r\n    this.setState({\r\n      permission: permission.data,\r\n    })\r\n    if (Object.keys(row.permissions).length > 0) {\r\n      let permissions = [];\r\n      Object.keys(row.permissions).forEach((key) => {\r\n        permissions.push(row.permissions[key].name)\r\n      })\r\n      this.setState({ rolePermission: permissions })\r\n    }\r\n    await this.setState({\r\n      setopen: true,\r\n      isPopup: false,\r\n      roleName: row.name,\r\n      roleId: row.id\r\n    })\r\n  }\r\n\r\n  handleClose() {\r\n    this.setState({\r\n      setopen: false,\r\n      rolePermission: []\r\n    })\r\n  };\r\n\r\n  async saveData() {\r\n    if (this.state.isPopup) {\r\n      let currentRole = await AuthApi.createRole(this.state.roleName, this.state.checkBox);\r\n      if (currentRole && currentRole.status === true) {\r\n        this.setState({ setopen: false }, function () {\r\n          this.roleData();\r\n        });\r\n      } else {\r\n        // axios popup result  \r\n      }\r\n    } else {\r\n      this.updateRoleee(this.state.roleId)\r\n    }\r\n  }\r\n  \r\n  async removeRole(id) {\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      icon: \"warning\",\r\n      buttons: [\"Cancel\", \"Yes\"],\r\n    }).then(async (confirm) => {\r\n      if (confirm) {\r\n        let currentRole = await AuthApi.deleteRole(id);\r\n        if (currentRole && currentRole.status === true) {\r\n          this.setState({\r\n            pageStatus:true\r\n          })\r\n          this.roleData();\r\n          setTimeout(\r\n            () => this.setState({  pageStatus:false }), \r\n            500\r\n          );\r\n        } else {\r\n        }\r\n      }\r\n      // console.log(this.props.page);\r\n    });\r\n  }\r\n\r\n\r\n  updatChange(e) {\r\n    this.setState({ roleName: e.target.value })\r\n  }\r\n\r\n  updateCheckbox(value) {\r\n    this.setState({ checkBox: value })\r\n  }\r\n\r\n  render() {\r\n    const classes = this.props;\r\n    return (\r\n      <div>\r\n        <Header\r\n          {...this.props}\r\n          authUser={this.props.authUser}\r\n          setAutUser={this.props.setAutUser}\r\n          component={\r\n            <div>\r\n              <Card className={classes.root} style={{ marginBottom: '3%' }}>\r\n                <CardContent>\r\n                  <Breadcrumb\r\n                    {...this.props}\r\n                    primaryPageName=\"Roles\"\r\n                    primaryPageLink=\"/role\"\r\n                    isSecondaryPage={false}\r\n                    secondaryPageName=\"\" />\r\n                </CardContent>\r\n              </Card>\r\n              <TableComponent\r\n                {...this.props}\r\n                tableTh={this.state.tableTh}\r\n                tableData={this.state.role}\r\n                tableCount={this.state.count}\r\n                tablePage={this.state.page}\r\n                tablePagestatus={this.state.pageStatus}\r\n                colNameToShow={['name', 'created_at']}\r\n                openPopUp={this.handleClickOpen}\r\n                openPopUpUpdate={this.handleClickOpenUpdateRole}\r\n                removeRow={this.removeRole}\r\n                actionBtns={['update', 'delete']}\r\n                modelName={'Role'}\r\n              /></div>\r\n          } />\r\n        <Footer />\r\n        <PopUp\r\n          isPopup={this.state.isPopup}\r\n          {...this.props}\r\n          handleClose={this.handleClose}\r\n          setopen={this.state.setopen}\r\n          roleName={this.state.roleName}\r\n          saveData={this.saveData}\r\n          updatChange={this.updatChange}\r\n          permission={this.state.permission}\r\n          inputHandleChange={this.inputHandleChange}\r\n          checkbox={this.state.checkbox}\r\n          updateCheckbox={this.updateCheckbox}\r\n          updateRoleee={this.updateRoleee}\r\n          rolePermission={this.state.rolePermission}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Role;\r\n\r\nclass PopUp extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      permission: false,\r\n      value: true,\r\n      loading: true\r\n    }\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleChange(value) {\r\n    this.props.updateCheckbox(value);\r\n  }\r\n\r\n  componentWillReceiveProps() {\r\n    if (typeof this.props.rolePermission !== 'undefined' && Object.keys(this.props.rolePermission).length > 0) {\r\n      this.setState({ loading: false })\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(props) {\r\n    if (typeof props.rolePermission !== 'undefined' && Object.keys(props.rolePermission).length > 0) {\r\n      this.setState({ loading: false })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Dialog open={this.props.setopen}>\r\n          <DialogTitle>{(this.props.isPopup) ? \"Add Role\" : \" Update Role\"}</DialogTitle>\r\n          {/* {\r\n            this.state.loading === true\r\n              ?\r\n              <PageLoader />\r\n              : */}\r\n              <div><DialogContent>\r\n                {/* <DialogContentText> */}\r\n                  <TextField autoFocus name=\"name\" label=\"Name\" type=\"text\" value={(this.props.roleName && this.props.roleName !== false) ? this.props.roleName : \"\"} onChange={(e) => { this.props.updatChange(e) }} />\r\n                {/* </DialogContentText> */}\r\n              </DialogContent>\r\n\r\n                <DialogContent>\r\n                  <DropdownComponent inputValue={this.props.rolePermission} inputOptions={this.props.permission} inputName=\"Permission\" inputTypeMultiple={true} handleChange={this.handleChange} />\r\n                </DialogContent></div>\r\n          {/* } */}\r\n          <DialogActions>\r\n            <Button color=\"primary\" onClick={(e) => { this.props.saveData() }} >\r\n              Save\r\n            </Button>\r\n            <Button onClick={(e) => { this.props.handleClose() }} color=\"primary\">\r\n              Close\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </div>\r\n    )\r\n  }\r\n}","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\FontAwesomeIconComponent.js",["240"],"import React from 'react';\r\nimport { loadCSS } from 'fg-loadcss';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Icon from '@material-ui/core/Icon';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > .fa': {\r\n      margin: theme.spacing(2),\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function FontAwesomeIconComponent(props) {\r\n  const classes = useStyles();\r\n\r\n  React.useEffect(() => {\r\n    const node = loadCSS(\r\n      'https://use.fontawesome.com/releases/v5.12.0/css/all.css',\r\n      document.querySelector('#font-awesome-css'),\r\n    );\r\n\r\n    return () => {\r\n      node.parentNode.removeChild(node);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <Icon className={props.classes} color={(props.colorName) ? \"primary\" : \"\"} fontSize={(props.fontSize) ? \"small\" : \"\"} />\r\n  );\r\n}","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\Breadcrumb.js",[],"C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Users\\Index.js",[],"C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Users\\HandleUser.js",["241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257"],"import React, { Component } from 'react';\r\nimport Header from '../../Layouts/Header';\r\nimport Footer from '../../Layouts/Footer';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Breadcrumb from '../../Layouts/Breadcrumb';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { TextField } from '@material-ui/core';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport LoadderButton from '../../Layouts/LoadderButton';\r\nimport AuthApi from '../../Services/Authapi';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport FontAwesomeIconComponent from '../../Layouts/FontAwesomeIconComponent';\r\nimport { SignalCellularNull } from '@material-ui/icons';\r\nimport Authapi from '../../Services/Authapi';\r\nimport swal from 'sweetalert';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport AddForm from '../../Layouts/Forms/UserForms/AddForm';\r\n\r\n\r\nclass HandleUser extends Component {\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     this.state = {\r\n    //         users: {\r\n    //             firstName: null,\r\n    //             lastName: null,\r\n    //             email: null,\r\n    //             gender: null,\r\n    //             dob: null,\r\n    //             photo: null,\r\n    //             qualification: null,\r\n    //             last_organization: null,\r\n    //             password: null,\r\n    //             roleName: null,\r\n    //         },\r\n    //         role: false,\r\n    //     }\r\n    // //     this.handleSubmit = this.handleSubmit.bind(this);\r\n    // //     this.updateChange = this.updateChange.bind(this);\r\n    // //     this.imgUpload = this.imgUpload.bind(this);\r\n    // //     this.removeImg = this.removeImg.bind(this);\r\n    // //     this.createUser = this.createUser.bind(this);\r\n    // //    this.roleData_class = this.roleData_class.bind(this);\r\n    // //     this.addRole = this.addRole.bind(this);\r\n    // //    this.roleData_class();\r\n    // }\r\n\r\n    componentWillMount() {\r\n        if (this.props && this.props.authToken === false) {\r\n          this.props.history.push('/login');\r\n        }\r\n       \r\n      }\r\n    \r\n      componentWillReceiveProps(props) {\r\n        if (props && props.authToken === false) {\r\n          props.history.push('/login');\r\n        }\r\n      }\r\n\r\n\r\n    // async handleSubmit(e) {\r\n    //     await this.createUser();\r\n\r\n    // }\r\n\r\n    // addRole(e) {\r\n    //     let roleName = [];\r\n    //     roleName.push(e.target.value)\r\n    //     this.setState({\r\n    //         users: { ...this.state.users, roleName: e.target.value }\r\n    //     })\r\n    // }\r\n\r\n    // updateChange(e) {\r\n    //     this.setState({\r\n    //         users: { ...this.state.users, [e.target.name]: e.target.value }\r\n    //     })\r\n\r\n    // }\r\n\r\n\r\n    // roleData_class = async () => {\r\n    //     let role = await AuthApi.getRole();\r\n    //     this.setState({\r\n    //         role: role.data\r\n    //     })\r\n    //     console.log(this.state.role)\r\n    // }\r\n\r\n    // async imgUpload(e) {\r\n    //     const postData = new FormData();\r\n    //     postData.append('file', e.target.files[0]);\r\n    //     let updateImg = await AuthApi.updateImg(postData);\r\n    //     if (updateImg && updateImg.status === true) {\r\n    //         this.setState({\r\n    //             users: { ...this.state.users, photo: updateImg.data.image_url }\r\n    //         })\r\n    //         this.setState({ uploadedImgName: updateImg.data.image_name })\r\n    //     }\r\n    // }\r\n\r\n    // async removeImg(e) {\r\n    //     let imageLink = this.state.users.photo;\r\n    //     imageLink = imageLink.substr(imageLink.indexOf('/', 7) + 1)\r\n    //     let remImg = await AuthApi.deleteImg(imageLink);\r\n    //     if (remImg && remImg.status === true) {\r\n    //         this.setState({\r\n    //             users: { ...this.state.users, photo: null }\r\n    //         })\r\n    //         this.setState({ uploadedImgName: null })\r\n    //     } else {\r\n\r\n    //     }\r\n\r\n    // }\r\n\r\n    // async createUser() {\r\n    //     let create = await Authapi.createUser(this.state.users)\r\n    //     if (create && create.status === true) {\r\n    //         this.props.history.push('/users');\r\n    //     } else {\r\n    //         swal({\r\n    //             title: \"OOPS!\",\r\n    //             icon: \"fail\",\r\n    //             message: \"Something went wrong, Please try later!\"\r\n    //         })\r\n    //     }\r\n    // }\r\n\r\n    render() {\r\n        const classes = this.props;\r\n        // let roleOptions = [];\r\n        // if (Object.keys(this.state.role).length > 0) {\r\n        //     Object.keys(this.state.role).forEach((key) => {\r\n        //         roleOptions.push(<MenuItem value={this.state.role[key].name}>{this.state.role[key].name}</MenuItem>)\r\n        //     })\r\n        // }\r\n        // else {\r\n        //     roleOptions.push(<MenuItem value=\"\"><em>Select Role</em></MenuItem>);\r\n        // }\r\n        return (\r\n            <div>\r\n                <Header\r\n                    {...this.props}\r\n                    authUser={this.props.authUser}\r\n                    component={\r\n                        <div>\r\n                            <Card className={classes.root} style={{ marginBottom: '3%' }}>\r\n                                <CardContent>\r\n                                    <Breadcrumb\r\n                                        {...this.props}\r\n                                        primaryPageName=\"Users\"\r\n                                        primaryPageLink=\"/users\"\r\n                                        isSecondaryPage={true}\r\n                                        secondaryPageName=\"Add\" />\r\n                                </CardContent>\r\n                            </Card>\r\n                            <Grid container className={classes.root} spacing={2}>\r\n                                <Grid item xs={12}>\r\n                                    <Card className={classes.root}>\r\n                                        <CardContent>\r\n                                            <Typography variant=\"h2\">Add User</Typography>\r\n                                            <AddForm  {...this.props} />\r\n                                            {/* <form className={classes.root} noValidate autoComplete=\"off\">\r\n                                                <Grid container className={classes.root} spacing={5}>\r\n                                                    <Grid item xs={4}><TextField fullWidth id=\"outlined-basic\" name=\"firstName\" label=\"First name\" variant=\"outlined\" onChange={(e) => { this.updateChange(e) }} /></Grid>\r\n                                                    <Grid item xs={4}><TextField fullWidth id=\"outlined-basic\" name=\"lastName\" label=\"Last name\" variant=\"outlined\" onChange={(e) => { this.updateChange(e) }} /></Grid>\r\n                                                    <Grid item xs={4}><TextField fullWidth id=\"outlined-basic\" name=\"email\" label=\"Email-address\" variant=\"outlined\" onChange={(e) => { this.updateChange(e) }} /></Grid>\r\n                                                </Grid>\r\n                                                <Grid container className={classes.root} spacing={5}>\r\n                                                    <Grid item xs={4}></Grid>\r\n                                                    <Grid item xs={4}></Grid>\r\n                                                    <Grid item xs={4}></Grid>\r\n                                                </Grid>\r\n                                                <Grid container className={classes.root} spacing={5} >\r\n                                                    <Grid item xs={4} style={{ display: 'flex' }}>\r\n                                                        <FormControl component=\"fieldset\">\r\n                                                            <Grid container className={classes.root} spacing={4} >\r\n                                                                <Grid item xs={12} style={{ display: 'flex' }}>\r\n                                                                    <FormLabel component=\"legend\">Gender</FormLabel>\r\n                                                                </Grid>\r\n                                                            </Grid>\r\n                                                            <RadioGroup aria-label=\"gender\" name=\"gender\" onChange={(e) => { this.updateChange(e) }} fullWidth>\r\n                                                                <Grid container className={classes.root} spacing={2}>\r\n                                                                    <Grid textAlign=\"left\" item xs={6}><FormControlLabel value=\"female\" control={<Radio />} label=\"Female\" /></Grid>\r\n                                                                    <Grid item xs={6}><FormControlLabel value=\"male\" control={<Radio />} label=\"Male\" /></Grid>\r\n                                                                </Grid>\r\n                                                            </RadioGroup>\r\n                                                        </FormControl></Grid>\r\n                                                    <Grid item xs={4}>\r\n                                                        <TextField\r\n                                                            fullWidth\r\n                                                            id=\"date\"\r\n                                                            label=\"Birthday\"\r\n                                                            name=\"dob\"\r\n                                                            type=\"date\"\r\n                                                            onChange={(e) => { this.updateChange(e) }}\r\n                                                            defaultValue=\"2017-05-24\"\r\n                                                            className={classes.textField}\r\n                                                            InputLabelProps={{\r\n                                                                shrink: true,\r\n                                                            }}\r\n                                                        />\r\n                                                    </Grid>\r\n                                                    <Grid item xs={4} style={{ display: 'flex' }}>\r\n                                                        {\r\n                                                            (this.state.users.photo === null) ?\r\n                                                                <div>\r\n                                                                    <input\r\n                                                                        accept=\"image/*\"\r\n                                                                        className={classes.input}\r\n                                                                        id=\"contained-button-file\"\r\n                                                                        type=\"file\"\r\n                                                                        onChange={(e) => this.imgUpload(e)}\r\n                                                                        style={{ display: 'none' }}\r\n                                                                    />\r\n                                                                    <label htmlFor=\"contained-button-file\">\r\n                                                                        <Button variant=\"contained\" color=\"primary\" component=\"span\" > Upload Profile Picture </Button>\r\n                                                                    </label>\r\n                                                                </div>\r\n                                                                :\r\n                                                                <div>\r\n                                                                    <Card className={classes.root}>\r\n                                                                        <CardContent>\r\n                                                                            <Grid container className={classes.root} spacing={5}>\r\n                                                                                <Grid item xs={4}>\r\n                                                                                    <img src={this.state.users.photo} alt=\"User profile image\" width=\"35\" height=\"35\" />\r\n                                                                                </Grid>\r\n                                                                                <Grid item xs={4}>\r\n                                                                                    <Typography variant=\"subtitle1\" gutterBottom>\r\n                                                                                        {this.state.uploadedImgName}\r\n                                                                                    </Typography>\r\n                                                                                </Grid>\r\n                                                                                <Grid item xs={4}>\r\n                                                                                    <Button onClick={(e) => { this.removeImg(e) }}>\r\n                                                                                        <FontAwesomeIconComponent classes=\"fa fa-trash\" colorName=\"primary\" fontSize={\"small\"} /></Button>\r\n                                                                                </Grid>\r\n                                                                            </Grid>\r\n                                                                        </CardContent>\r\n                                                                    </Card>\r\n                                                                </div>\r\n                                                        }\r\n\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                                <Grid container className={classes.root} spacing={5}>\r\n                                                    <Grid item xs={4}><TextField fullWidth id=\"outlined-basic\" name=\"qualification\" label=\"Qualification\" variant=\"outlined\" onChange={(e) => { this.updateChange(e) }} /></Grid>\r\n                                                    <Grid item xs={4}><TextField fullWidth id=\"outlined-basic\" name=\"last_organization\" label=\"Last Organization\" variant=\"outlined\" onChange={(e) => { this.updateChange(e) }} /></Grid>\r\n                                                    <Grid item xs={4}><TextField fullWidth id=\"outlined-basic\" name=\"password\" type=\"password\" label=\"Password\" variant=\"outlined\" onChange={(e) => { this.updateChange(e) }} /></Grid>\r\n                                                </Grid>\r\n                                                <Grid container className={classes.root} spacing={5}>\r\n                                                    <Grid item xs={4}>\r\n                                                        <FormControl variant=\"outlined\" style={{ width: '100%' }}>\r\n                                                            <InputLabel id=\"demo-simple-select-outlined-label\">Role</InputLabel>\r\n                                                            <Select\r\n                                                                labelId=\"demo-simple-select-outlined-label\"\r\n                                                                id=\"demo-simple-select-outlined\"\r\n                                                                label=\"Role\"\r\n                                                                onChange={(e) => { this.addRole(e) }}\r\n                                                            >{roleOptions}\r\n                                                            </Select>\r\n                                                        </FormControl>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={4} true></Grid>\r\n                                                    <Grid item xs={4} true></Grid>\r\n                                                </Grid>\r\n                                                <Grid container className={classes.root} spacing={3}>\r\n                                                    <Grid item xs={4} style={{ display: 'flex' }}>\r\n                                                        <LoadderButton btnType=\"button\" btnText=\"Save User\" onClickFn={this.handleSubmit} />\r\n                                                        <Button type=\"button\" onClick={(e) => { e.preventDefault(); this.props.history.push('/users') }}>Cancel</Button>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={4}></Grid>\r\n                                                    <Grid item xs={4}></Grid>\r\n                                                </Grid>\r\n                                            </form> */}\r\n                                        </CardContent>\r\n                                    </Card>\r\n                                </Grid>\r\n                                <Grid item xs={6}></Grid>\r\n                            </Grid>\r\n                        </div>\r\n                    } />\r\n                <Footer />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HandleUser;\r\n\r\n","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\CountdownTimer.js",["258","259","260","261","262","263","264","265"],"import React, { Component } from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport moment, { min } from 'moment';\r\nimport AuthApi from './../Services/Authapi';\r\nimport LoadderButton from '../Layouts/LoadderButton';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport ls from \"local-storage\";\r\n\r\nexport default class CountdownTimer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            count: parseInt(props.count, 10),\r\n            min: 0,\r\n            sec: 0,\r\n            startTime: this.props.startTime,\r\n            stopTime: this.props.stopTime,\r\n        };\r\n\r\n\r\n        if (this.props.timerOn === false) {\r\n            this.scnd();\r\n        }\r\n\r\n    }\r\n\r\n    // componentWillUnmount() {\r\n    //     this.props.updateCounter(this.state.count);\r\n    //     // this.unlisten();\r\n    // }\r\n\r\n    // componentWillMount() {\r\n    //     this.unlisten = this.props.history.listen((location, action) => { });\r\n    // }\r\n\r\n    // handleCountdown = seconds => {\r\n    //     this.setState({\r\n    //         count: seconds,\r\n    //     });\r\n    //     console.log(this.state.count);\r\n    // };\r\n\r\n    scnd = async () => {\r\n        let timeCount = await AuthApi.durTime();\r\n        // console.log(timeCount);\r\n        this.props.updateCounterOnload(parseInt(timeCount.totalDurationInSec));     \r\n    }\r\n\r\n\r\n\r\n    format = time => {\r\n\r\n        const {\r\n            border,\r\n            showTitle,\r\n            direction,\r\n            noPoints,\r\n            color,\r\n            backgroundColor,\r\n            responsive,\r\n            size,\r\n            hideDay,\r\n            hideHours,\r\n            dayTitle,\r\n            hourTitle,\r\n            minuteTitle,\r\n            secondTitle,\r\n            labelSize,\r\n        } = this.props;\r\n\r\n        let seconds = time % 60;\r\n        let minutes = Math.floor(time / 60) % 60;\r\n        let hours = Math.floor(time / 3600) % 24;\r\n        minutes = minutes < 10 ? `0${minutes}` : minutes;\r\n        seconds = seconds < 10 ? `0${seconds}` : seconds;\r\n        hours = hours < 10 ? `0${hours}` : hours;\r\n        // if(this.props.startTime && this.props.startTime > 0){\r\n        //     let startTime = Date.now() - this.props.startTime;\r\n        //     minutes = (\"0\" + (Math.floor(startTime / 60000) % 60)).slice(-2);\r\n        //     hours = (\"0\" + Math.floor(startTime / 3600000)).slice(-2);\r\n        // }\r\n\r\n        if (showTitle) {\r\n            const borderClass = border ? 'border' : '';\r\n            const responsiveClass = responsive ? 'responsive' : '';\r\n            const classBox = `countBox ${direction}`;\r\n            return (\r\n                <div style={{ fontSize: '20px' }} className={`${classBox} ${borderClass} ${responsiveClass}`}>\r\n                    <div className=\"countBoxItem\">\r\n                        <div style={{ fontSize: `${labelSize}px` }} className={\"label\"}>{secondTitle}</div>\r\n                        <div className={\"count\"} style={{ color, backgroundColor }}>\r\n                            {seconds}\r\n                        </div>\r\n                    </div>\r\n                    {!noPoints && <span className={\"split\"}>:</span>}\r\n                    <div className={\"countBoxItem\"}>\r\n                        <div style={{ fontSize: `${labelSize}px` }} className={\"label\"}>{minuteTitle}</div>\r\n                        <div className={\"count\"} style={{ color, backgroundColor }}>\r\n                            {minutes}\r\n                        </div>\r\n                    </div>\r\n                    {!hideHours && !noPoints && <span className={\"split\"}>:</span>}\r\n                    {!hideHours && (\r\n                        <div className={\"countBoxItem\"}>\r\n                            <div style={{ fontSize: `${labelSize}px` }} className={\"label\"}>{hourTitle}</div>\r\n                            <div className={\"count\"} style={{ color, backgroundColor }}>\r\n                                {hours}\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n\r\n                </div>\r\n            )\r\n        }\r\n\r\n\r\n        const borderClass = border ? 'border' : '';\r\n        const responsiveClass = responsive ? 'responsive' : '';\r\n        const classBox = `inline ${direction}`;\r\n        return (\r\n            <div style={{ fontSize: '100px' }} className={`${classBox} ${borderClass} ${responsiveClass}`}>\r\n                {!hideHours && (\r\n                    <span className={\"count\"} style={{ color, backgroundColor }}>\r\n                        {hours}\r\n                    </span>\r\n                )}\r\n                {!hideHours && !noPoints && <span className={\"split\"}>:</span>}\r\n                <span className={\"count\"} style={{ color, backgroundColor }}>\r\n                    {minutes}\r\n                </span>\r\n                {!noPoints && <span className={\"split\"}>:</span>}\r\n                <span className={\"count\"} style={{ color, backgroundColor }}>\r\n                    {seconds}\r\n                </span>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    render() {\r\n        const { count } = this.props;\r\n        const { className, id } = this.props;\r\n        return (\r\n            <Grid container spacing={2} >\r\n                <Grid item xs={12}>\r\n                    <div className=\"displayedTime\">{this.format(count)}</div>\r\n                </Grid>\r\n                <Grid item xs={5}></Grid>\r\n                <Grid item xs={2}>\r\n                    {this.props.timerOn === false && (\r\n                        <LoadderButton onClickFn={this.props.startTimer} btnText=\"In\" />\r\n                    )}\r\n                    {this.props.timerOn !== false && (\r\n                        <LoadderButton onClickFn={this.props.stopTimer} btnText=\"Out\" />\r\n                    )}\r\n                </Grid>\r\n                <Grid item xs={5}></Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nCountdownTimer.propTypes = {\r\n    className: PropTypes.string,\r\n    id: PropTypes.string,\r\n    count: PropTypes.number,\r\n    border: PropTypes.bool,\r\n    showTitle: PropTypes.bool,\r\n    direction: PropTypes.oneOf(['right', 'left']),\r\n    noPoints: PropTypes.bool,\r\n    responsive: PropTypes.bool,\r\n    color: PropTypes.string,\r\n    backgroundColor: PropTypes.string,\r\n    size: PropTypes.number,\r\n    labelSize: PropTypes.number,\r\n    hideDay: PropTypes.bool,\r\n    hideHours: PropTypes.bool,\r\n    dayTitle: PropTypes.string,\r\n    hourTitle: PropTypes.string,\r\n    minuteTitle: PropTypes.string,\r\n    secondTitle: PropTypes.string,\r\n    onEnd: PropTypes.func,\r\n};\r\n\r\nCountdownTimer.defaultProps = {\r\n    count: 0,\r\n    border: false,\r\n    showTitle: false,\r\n    direction: 'left',\r\n    noPoints: false,\r\n    color: '#000',\r\n    backgroundColor: '#fff',\r\n    responsive: false,\r\n    size: 18,\r\n    labelSize: 12,\r\n    hideDay: false,\r\n    hideHours: false,\r\n    dayTitle: 'Day',\r\n    hourTitle: 'Hour',\r\n    minuteTitle: 'Min',\r\n    secondTitle: 'Sec',\r\n    className: '',\r\n    id: '',\r\n    onEnd: () => { },\r\n};","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\Timer.js",["266","267"],"C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\DropdownComponent.js",[],"C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\Forms\\AuthForms\\LoginForm.js",[],"C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Users\\EditUser.js",["268","269","270","271","272","273","274","275","276","277","278","279","280"],"import React, { Component } from 'react';\r\nimport Header from '../../Layouts/Header';\r\nimport Footer from '../../Layouts/Footer';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Breadcrumb from '../../Layouts/Breadcrumb';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { TextField } from '@material-ui/core';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport LoadderButton from '../../Layouts/LoadderButton';\r\nimport AuthApi from '../../Services/Authapi';\r\nimport FontAwesomeIconComponent from '../../Layouts/FontAwesomeIconComponent';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport EditForm from '../../Layouts/Forms/UserForms/EditForm';\r\n\r\n\r\nclass HandleUser1 extends Component {\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     this.state = {\r\n    //         users: {\r\n    //             firstName: null,\r\n    //             lastName: null,\r\n    //             email: null,\r\n    //             gender: null,\r\n    //             dob: null,\r\n    //             photo: null,\r\n    //             qualification: null,\r\n    //             last_organization: null,\r\n    //             roleName: null,\r\n    //         },\r\n    //         uploadedImgName: \"\",\r\n    //         user: false,\r\n    //         userId: 0,\r\n    //         role: []\r\n    //     }\r\n    //     // this.handleSubmit = this.handleSubmit.bind(this);\r\n    //     // this.roleData = this.roleData.bind(this);\r\n    //     // this.updateChange = this.updateChange.bind(this);\r\n    //     // this.addRole = this.addRole.bind(this);\r\n    //     // this.editUser = this.editUser.bind(this);\r\n    //     // this.roleData();\r\n    // }\r\n\r\n    componentWillMount() {\r\n        if (this.props && this.props.authToken === false) {\r\n          this.props.history.push('/login');\r\n        }\r\n       \r\n      }\r\n    \r\n      componentWillReceiveProps(props) {\r\n        if (props && props.authToken === false) {\r\n          props.history.push('/login');\r\n        }\r\n      }\r\n\r\n\r\n    // componentWillMount() {\r\n    //     let userId = this.props.history.location.pathname.split('/')[this.props.history.location.pathname.split('/').length - 1];\r\n    //     this.setState({ userId: userId }, async function () {\r\n    //         let user = await AuthApi.singleUser(this.state.userId);           \r\n    //         let editUser = this.state.users;\r\n    //         editUser.firstName = (user.status === true && user.data && user.data.firstName && (user.data.firstName !== null || user.data.firstName !== false)) ? user.data.firstName : null;\r\n    //         editUser.lastName = (user.status === true && user.data && user.data.lastName) ? user.data.lastName : null;\r\n    //         editUser.email = (user.status === true && user.data && user.data.email) ? user.data.email : null;\r\n    //         editUser.gender = (user.status === true && user.data && user.data.gender) ? user.data.gender : null;\r\n    //         editUser.dob = (user.status === true && user.data && user.data.dob) ? user.data.dob : null;\r\n    //         editUser.photo = (user.status === true && user.data && user.data.photo) ? user.data.photo : null;\r\n    //         editUser.qualification = (user.status === true && user.data && user.data.qualification) ? user.data.qualification : null;\r\n    //         editUser.last_organization = (user.status === true && user.data && user.data.last_organization) ? user.data.last_organization : null;\r\n    //         let userRole = (user.status === true && user.data && user.data.roles && Object.keys(user.data.roles).length > 0) ? user.data.roles : [];\r\n    //         editUser.roleName = (Object.keys(userRole).length > 0) ? userRole[0].name : null;\r\n    //         let imageName = editUser.photo.substr(editUser.photo.lastIndexOf('/') + 1);\r\n    //         this.setState({ uploadedImgName: imageName })\r\n    //         this.setState({\r\n    //             users: editUser\r\n    //         })\r\n    //     })\r\n    // }\r\n\r\n    // async handleSubmit(e) {\r\n    //     await this.editUser(this.state.users, this.state.userId)\r\n    // }\r\n\r\n    // async removeImg(e) {\r\n    //     this.setState({\r\n    //         users: { ...this.state.users, photo: null }\r\n    //     })\r\n    //     this.setState({ uploadedImgName: null })\r\n    // }\r\n\r\n    // addRole(e) {\r\n    //     let user = this.state.users;\r\n    //     user.roleName = e.target.value;\r\n    //     this.setState({\r\n    //         users: user\r\n    //     })\r\n    // }\r\n\r\n    // updateChange(e) {\r\n    //     this.setState({\r\n    //         users: { ...this.state.users, [e.target.name]: e.target.value }\r\n    //     })\r\n    // }\r\n\r\n    // async imgUpload(e) {\r\n    //     const postData = new FormData();\r\n    //     postData.append('file', e.target.files[0]);\r\n    //     let updateImg = await AuthApi.updateImg(postData);\r\n    //     if (updateImg && updateImg.status === true) {\r\n    //         this.setState({\r\n    //             users: { ...this.state.users, photo: updateImg.data.image_url }\r\n    //         })\r\n    //         this.setState({ uploadedImgName: updateImg.data.image_name })\r\n    //     }\r\n    // }\r\n\r\n    // async editUser(id) {\r\n    //     let status = await AuthApi.updateUser(this.state.users, this.state.userId);\r\n    //     console.log(status);\r\n    //     if (status && status.status === true) {\r\n    //         this.props.history.push('/users');\r\n    //     }\r\n    // }\r\n\r\n    // async roleData() {\r\n    //     let role = await AuthApi.getRole();\r\n    //     this.setState({\r\n    //         role: role.data\r\n    //     })\r\n    // }\r\n\r\n    render() {\r\n        const classes = this.props;\r\n        // let roleOptions = [];\r\n        // if (Object.keys(this.state.role).length > 0) {\r\n        //     Object.keys(this.state.role).forEach((key) => {\r\n        //         roleOptions.push(<MenuItem value={this.state.role[key].name}>{this.state.role[key].name}</MenuItem>)\r\n        //     })\r\n        // }\r\n        // else {\r\n        //     roleOptions.push(<MenuItem value=\"\"><em>Select Role</em></MenuItem>);\r\n        // }\r\n        return (\r\n            <div>\r\n                <Header\r\n                    {...this.props}\r\n                    authUser={this.props.authUser}\r\n                    component={\r\n                        <div>\r\n                            <Card className={classes.root} style={{ marginBottom: '3%' }}>\r\n                                <CardContent>\r\n                                    <Breadcrumb\r\n                                        {...this.props}\r\n                                        primaryPageName=\"Users\"\r\n                                        primaryPageLink=\"/users\"\r\n                                        isSecondaryPage={true}\r\n                                        secondaryPageName=\"Edit\" />\r\n                                </CardContent>\r\n                            </Card>\r\n                            <Grid container className={classes.root} spacing={2}>\r\n                                <Grid item xs={12}>\r\n                                    <Card className={classes.root}>\r\n                                        <CardContent>\r\n                                            <Typography variant=\"h2\">Edit User</Typography>\r\n                                            <EditForm  {...this.props}/>\r\n                                            {/* <form className={classes.root} noValidate autoComplete=\"off\">\r\n                                                <Grid container className={classes.root} spacing={5}>\r\n                                                    <Grid item xs={4}><TextField fullWidth id=\"outlined-basic\" name=\"firstName\" label=\"First name\" value={(this.state.users && this.state.users.firstName !== null) ? this.state.users.firstName : null} variant=\"outlined\" focused={(this.state.users && this.state.users.firstName !== null) ? true : false} onChange={(e) => { this.updateChange(e) }} /></Grid>\r\n                                                    <Grid item xs={4}><TextField fullWidth id=\"outlined-basic\" name=\"lastName\" label=\"Last name\" value={(this.state.users && this.state.users.lastName !== null) ? this.state.users.lastName : null} variant=\"outlined\" focused={(this.state.users && this.state.users.lastName !== null) ? true : false} onChange={(e) => { this.updateChange(e) }} /></Grid>\r\n                                                    <Grid item xs={4}><TextField fullWidth id=\"outlined-basic\" name=\"email\" label=\"Email-address\" value={(this.state.users && this.state.users.email !== null) ? this.state.users.email : null} variant=\"outlined\" focused={(this.state.users && this.state.users.email !== null) ? true : false} onChange={(e) => { this.updateChange(e) }} /></Grid>\r\n                                                </Grid>\r\n                                                <Grid container className={classes.root} spacing={5}>\r\n                                                    <Grid item xs={4}></Grid>\r\n                                                    <Grid item xs={4}></Grid>\r\n                                                    <Grid item xs={4}></Grid>\r\n                                                </Grid>\r\n                                                <Grid container className={classes.root} spacing={5} >\r\n                                                    <Grid item xs={4} style={{ display: 'flex' }}>\r\n                                                        <FormControl component=\"fieldset\">\r\n                                                            <Grid container className={classes.root} spacing={4} >\r\n                                                                <Grid item xs={12} style={{ display: 'flex' }}>\r\n                                                                    <FormLabel component=\"legend\">Gender</FormLabel>\r\n                                                                </Grid>\r\n                                                            </Grid>\r\n                                                            <RadioGroup aria-label=\"gender\" name=\"gender\" value={this.state.users.gender} focused={(this.state.users && this.state.users.email !== null) ? true : false} onChange={(e) => { this.updateChange(e) }} fullWidth>\r\n                                                                <Grid container className={classes.root} spacing={2}>\r\n                                                                    <Grid textAlign=\"left\" item xs={6}><FormControlLabel value=\"Female\" control={<Radio />} label=\"Female\" /></Grid>\r\n                                                                    <Grid item xs={6}><FormControlLabel value=\"Male\" control={<Radio />} label=\"Male\" /></Grid>\r\n                                                                </Grid>\r\n                                                            </RadioGroup>\r\n                                                        </FormControl></Grid>\r\n                                                    <Grid item xs={4}>\r\n                                                        <TextField\r\n                                                            fullWidth\r\n                                                            id=\"date\"\r\n                                                            label=\"Birthday\"\r\n                                                            name=\"dob\"\r\n                                                            type=\"date\"\r\n                                                            onChange={(e) => { this.updateChange(e) }}\r\n                                                            defaultValue=\"2017-05-24\"\r\n                                                            value={(this.state.users && this.state.users.dob !== null) ? this.state.users.dob : null}\r\n                                                            focused={(this.state.users && this.state.users.dob !== null) ? true : false}\r\n                                                            className={classes.textField}\r\n                                                            InputLabelProps={{\r\n                                                                shrink: true,\r\n                                                            }}\r\n                                                        />\r\n                                                    </Grid>\r\n                                                    <Grid item xs={4} style={{ display: 'flex' }}>\r\n                                                        {\r\n                                                            (this.state.users.photo === null) ?\r\n                                                                <div>\r\n                                                                    <input\r\n                                                                        accept=\"image/*\"\r\n                                                                        className={classes.input}\r\n                                                                        id=\"contained-button-file\"\r\n                                                                        type=\"file\"\r\n                                                                        onChange={(e) => this.imgUpload(e)}\r\n                                                                        style={{ display: 'none' }}\r\n                                                                    />\r\n                                                                    <label htmlFor=\"contained-button-file\">\r\n                                                                        <Button variant=\"contained\" color=\"primary\" component=\"span\" > Upload Profile Picture </Button>\r\n                                                                    </label>\r\n                                                                </div>\r\n                                                                :\r\n                                                                <div>\r\n                                                                    <Card className={classes.root}>\r\n                                                                        <CardContent>\r\n                                                                            <Grid container className={classes.root} spacing={5}>\r\n                                                                                <Grid item xs={4}>\r\n                                                                                    <img src={this.state.users.photo} alt=\"User profile image\" width=\"35\" height=\"35\" />\r\n                                                                                </Grid>\r\n                                                                                <Grid item xs={4}>\r\n                                                                                    <Typography variant=\"subtitle1\" gutterBottom>\r\n                                                                                        {this.state.uploadedImgName}\r\n                                                                                    </Typography>\r\n                                                                                </Grid>\r\n                                                                                <Grid item xs={4}>\r\n                                                                                    <Button onClick={(e) => { this.removeImg(e) }}>\r\n                                                                                        <FontAwesomeIconComponent classes=\"fa fa-trash\" colorName=\"primary\" fontSize={\"small\"} /></Button>\r\n                                                                                </Grid>\r\n                                                                            </Grid>\r\n                                                                        </CardContent>\r\n                                                                    </Card>\r\n                                                                </div>\r\n                                                        }\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                                <Grid container className={classes.root} spacing={5}>\r\n                                                    <Grid item xs={4}><TextField fullWidth id=\"outlined-basic\" name=\"qualification\" label=\"Qualification\" variant=\"outlined\" value={(this.state.users && this.state.users.qualification !== null) ? this.state.users.qualification : null}\r\n                                                        focused={(this.state.users && this.state.users.qualification !== null) ? true : false} onChange={(e) => { this.updateChange(e) }} /></Grid>\r\n                                                    <Grid item xs={4}><TextField fullWidth id=\"outlined-basic\" name=\"last_organization\" label=\"Last Organization\" variant=\"outlined\" value={(this.state.users && this.state.users.last_organization !== null) ? this.state.users.last_organization : null}\r\n                                                        focused={(this.state.users && this.state.users.last_organization !== null) ? true : false} onChange={(e) => { this.updateChange(e) }} /></Grid>\r\n                                                    <Grid item xs={4}>\r\n                                                        <FormControl variant=\"outlined\" style={{ width: '100%' }}>\r\n                                                            <InputLabel id=\"demo-simple-select-outlined-label\">Role</InputLabel>\r\n                                                            <Select\r\n                                                                labelId=\"demo-simple-select-outlined-label\"\r\n                                                                id=\"demo-simple-select-outlined\"\r\n                                                                label=\"Role\"\r\n                                                                onChange={(e) => { this.addRole(e) }}\r\n                                                                value={(this.state.users && this.state.users.roleName && this.state.users.roleName !== null) ? this.state.users.roleName : null}\r\n                                                                focused={(this.state.users && this.state.users.roleName && this.state.users.roleName !== null) ? true : false}\r\n                                                            >{roleOptions}\r\n                                                            </Select>\r\n                                                        </FormControl>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                                <Grid container className={classes.root} spacing={3}>\r\n                                                    <Grid item xs={4} style={{ display: 'flex' }}>\r\n                                                        <LoadderButton btnType=\"button\" btnText=\"Edit User\" onClickFn={this.handleSubmit} />\r\n                                                        <Button type=\"button\" onClick={(e) => { e.preventDefault(); this.props.history.push('/users') }}>Cancel</Button>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={4}></Grid>\r\n                                                    <Grid item xs={4}></Grid>\r\n                                                </Grid>\r\n                                            </form> */}\r\n                                        </CardContent>\r\n                                    </Card>\r\n                                </Grid>\r\n                                <Grid item xs={6}></Grid>\r\n                            </Grid>\r\n                        </div>\r\n                    } />\r\n                <Footer />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HandleUser1;","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\Forms\\UserForms\\AddForm.js",["281","282","283","284","285","286","287","288","289","290","291"],"import React, { useState, useEffect } from 'react';\r\nimport './AddForm.css';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport AuthApi from '../../../Services/Authapi';\r\nimport swal from 'sweetalert';\r\nimport ls from \"local-storage\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport FontAwesomeIconComponent from '../../../Layouts/FontAwesomeIconComponent';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nconst iniuservalid = {\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    email: \"\",\r\n    gender: \"\",\r\n    dob: \"\",\r\n    photo: null,\r\n    imageName: \"\",\r\n    qualification: \"\",\r\n    last_organization: \"\",\r\n    password: \"\",\r\n    roleName: \"\",\r\n    role: false\r\n\r\n}\r\n\r\n\r\nconst Addform = (props) => {\r\n    const classes = props;\r\n    const [roleOptions] = React.useState([]);\r\n    const [formValues, setFormValues] = useState(iniuservalid);\r\n    const [formErrors, setFormErrors] = useState({});\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n\r\n\r\n    const submitForm = () => {\r\n        console.log(formValues);\r\n    };\r\n\r\n\r\n    const handleChange1 = (e) => {\r\n        const { name, value } = e.target;\r\n        // console.log(value);\r\n        setFormValues({ ...formValues, [name]: value });\r\n        // console.log(formValues);\r\n    };\r\n\r\n\r\n    const validate = (values) => {\r\n        let errors = {};\r\n        const regex = /^[a-zA-Z]/;\r\n        const emailRegx = /^[a-zA-Z0-9]+@+[a-zA-Z0-9]+.+[A-z]/;\r\n        const dobRegx = /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/;\r\n        const passRegx = /^[#\\w@_-]{8,20}$/;\r\n\r\n\r\n        if (!values.firstName) {\r\n            errors.firstName = \"Cannot be blank\";\r\n        } else if (!regex.test(values.firstName)) {\r\n            errors.firstName = \"Invalid firstName format\";\r\n        }\r\n\r\n        if (!values.lastName) {\r\n            errors.lastName = \"Cannot be blank\";\r\n        } else if (!regex.test(values.lastName)) {\r\n            errors.lastName = \"Invalid lastName format\";\r\n        }\r\n\r\n        if (!values.email) {\r\n            errors.email = \"Cannot be  blank\";\r\n        } else if (!emailRegx.test(values.email)) {\r\n            errors.email = \"Invalid email format\"\r\n        }\r\n\r\n        if (!values.dob) {\r\n            errors.dob = \"Cannot be  blank\";\r\n        } else if (!dobRegx.test(values.dob)) {\r\n            errors.dob = \"Invalid dob format\"\r\n        }\r\n\r\n        if (!values.qualification) {\r\n            errors.qualification = \"Cannot be blank\";\r\n        } else if (!regex.test(values.qualification)) {\r\n            errors.qualification = \"Invalid qualification format\";\r\n        }\r\n\r\n        if (!values.last_organization) {\r\n            errors.last_organization = \"Cannot be blank\";\r\n        } else if (!regex.test(values.last_organization)) {\r\n            errors.last_organization = \"Invalid last_organization format\";\r\n        }\r\n\r\n        if (!values.password) {\r\n            errors.password = \"Cannot be blank\";\r\n        } else if (!passRegx.test(values.password)) {\r\n            errors.password = \"Password must be require\";\r\n        }\r\n\r\n        if (!values.roleName) {\r\n            errors.roleName = \"Cannot be blank\";\r\n        }\r\n\r\n        return errors;\r\n    };\r\n\r\n   \r\n\r\n\r\n    async function RoleData() {\r\n        let role = await AuthApi.getRole();\r\n        //    console.log(rolee); \r\n        if (role && role.status === true) {\r\n            if (Object.keys(role.data).length > 0) {\r\n                Object.keys(role.data).forEach((key) => {\r\n                    roleOptions.push(<MenuItem key={key} value={role.data[key].name}>{role.data[key].name}</MenuItem>)\r\n                })\r\n            }\r\n            else {\r\n                roleOptions.push(<MenuItem value=\"\"><em>Select Role</em></MenuItem>);\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n    }\r\n    React.useEffect(() => RoleData(), []);\r\n\r\n\r\n\r\n\r\n    const imgUpload = async (e) => {\r\n        const postData = new FormData();\r\n        postData.append('file', e.target.files[0]);\r\n        let updaImg = await AuthApi.updateImg(postData);\r\n        if (updaImg && updaImg.status === true) {\r\n\r\n            setFormValues({\r\n                ...formValues,\r\n                photo: updaImg.data.image_url,\r\n                imageName: updaImg.data.image_name\r\n            })\r\n\r\n        }\r\n      \r\n    }\r\n\r\n    const removeImg = async (e) => {\r\n        let imageLink = formValues.photo;\r\n        imageLink = imageLink.substr(imageLink.indexOf('/', 7) + 1)\r\n        let remImg = await AuthApi.deleteImg(imageLink);\r\n        if (remImg && remImg.status === true) {\r\n            setFormValues({\r\n                ...formValues,\r\n                photo: null,\r\n                imageName: null\r\n            })\r\n\r\n        } else {\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        setFormErrors(validate(formValues));\r\n        setIsSubmitting(true);\r\n\r\n        \r\n\r\n    }\r\n\r\n    useEffect(async () => {\r\n        if (Object.keys(formErrors).length === 0 && isSubmitting) {\r\n            await createUser();\r\n        }\r\n    }, [formErrors]);\r\n\r\n\r\n\r\n    const createUser = async () => {\r\n        let create = await AuthApi.createUser(formValues)\r\n\r\n        if (create && create.status === true) {\r\n            props.history.push('/users');\r\n        } else {\r\n            swal({\r\n                title: \"OOPS!\",\r\n                icon: \"fail\",\r\n                message: \"Something went wrong, Please try later!\"\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n\r\n            <form className={classes.form} onSubmit={handleSubmit} >\r\n                <Grid container className={classes.root} spacing={5}>\r\n                    <Grid item xs={4}>\r\n                        <TextField\r\n                            fullWidth\r\n                            id=\"firstName\"\r\n                            name=\"firstName\"\r\n                            label=\"FirstName\"\r\n                            variant=\"outlined\"\r\n                            error = {formErrors.firstName && true}\r\n                            value={formValues.firstName}\r\n                            onChange={handleChange1}\r\n                            className={formErrors.firstName && \"input-error\"}\r\n                            \r\n                        />\r\n                        {formErrors.firstName && (\r\n                            <span className=\"error\">{formErrors.firstName}</span>\r\n                        )}\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <TextField\r\n                            fullWidth\r\n                            id=\"lastName\"\r\n                            name=\"lastName\"\r\n                            label=\"LastName\"\r\n                            variant=\"outlined\"\r\n                            error = {formErrors.lastName && true}\r\n                            value={formValues.lastName}\r\n                            onChange={handleChange1}\r\n                            className={formErrors.lastName && \"input-error\"}\r\n\r\n                        />\r\n                        {formErrors.lastName && (\r\n                            <span className=\"error\">{formErrors.lastName}</span>\r\n                        )}\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <TextField\r\n                            fullWidth\r\n                            id=\"email\"\r\n                            name=\"email\"\r\n                            label=\"Email\"\r\n                            variant=\"outlined\"\r\n                            error = {formErrors.email && true}\r\n                            value={formValues.email}\r\n                            onChange={handleChange1}\r\n                            className={formErrors.email && \"input-error\"}\r\n\r\n                        />\r\n                        {formErrors.email && (\r\n                            <span className=\"error\">{formErrors.email}</span>\r\n                        )}\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container className={classes.root} spacing={5}>\r\n                    <Grid item xs={4}></Grid>\r\n                    <Grid item xs={4}></Grid>\r\n                    <Grid item xs={4}></Grid>\r\n                </Grid>\r\n                <Grid container className={classes.root} spacing={5} >\r\n                    <Grid item xs={4} style={{ display: 'flex' }}>\r\n                        <FormControl component=\"fieldset\">\r\n                            <Grid container className={classes.root} spacing={4} >\r\n                                <Grid item xs={12} style={{ display: 'flex' }}>\r\n                                    <FormLabel component=\"legend\">Gender</FormLabel>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <RadioGroup aria-label=\"gender\" name=\"gender\" defaultValue=\"female\" onChange={handleChange1}>\r\n                                <Grid container className={classes.root} spacing={2}>\r\n                                    <Grid textalign='left' item xs={6}><FormControlLabel value=\"female\" control={<Radio />} label=\"Female\" /></Grid>\r\n                                    <Grid item xs={6}><FormControlLabel value=\"male\" control={<Radio />} label=\"Male\" /></Grid>\r\n\r\n                                </Grid>\r\n                            </RadioGroup>\r\n                        </FormControl></Grid>\r\n                    <Grid item xs={4}>\r\n                        <TextField\r\n                            fullWidth\r\n                            id=\"date\"\r\n                            variant=\"outlined\"\r\n                            label=\"Birthday\"\r\n                            name=\"dob\"\r\n                            type=\"date\"\r\n                            error = {formErrors.dob && true}\r\n                            value={formValues.dob}\r\n                            onChange={handleChange1}\r\n                            className={formErrors.dob && \"input-error\"}\r\n                            className={classes.textField}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                        />\r\n                        {formErrors.dob && (\r\n                            <span className=\"error\">{formErrors.dob}</span>\r\n                        )}\r\n                    </Grid>\r\n                    <Grid item xs={4} style={{ display: 'flex' }}>\r\n                        {\r\n                            (formValues.photo === null) ?\r\n                                <div>\r\n                                    <input\r\n                                        accept=\"image/*\"\r\n                                        className={classes.input}\r\n                                        name=\"photo\"\r\n                                        id=\"contained-button-file\"\r\n                                        type=\"file\"\r\n                                        onChange={(e) => imgUpload(e)}\r\n                                        style={{ display: 'none' }}\r\n                                    />\r\n                                    <label htmlFor=\"contained-button-file\">\r\n                                        <Button variant=\"contained\" color=\"primary\" component=\"span\" > Upload Profile Picture </Button>\r\n                                    </label>\r\n                                </div>\r\n                                :\r\n                                <div>\r\n                                    <Card className={classes.root}>\r\n                                        <CardContent>\r\n                                            <Grid container className={classes.root} spacing={5}>\r\n                                                <Grid item xs={4}>\r\n                                                    <img src={formValues.photo} alt=\"User profile image\" width=\"35\" height=\"35\" />\r\n                                                </Grid>\r\n                                                <input\r\n                                                    className={classes.input}\r\n                                                    name=\"photo\"\r\n                                                    id=\"photo\"\r\n                                                    type=\"hidden\"\r\n                                                    value={formValues.photo ? formValues.photo : \"\"}\r\n                                                />\r\n                                                <Grid item xs={4}>\r\n                                                    <Typography variant=\"subtitle1\" gutterBottom>\r\n                                                        {formValues.imageName}\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                                <Grid item xs={4}>\r\n                                                    <Button onClick={(e) => removeImg(e)}>\r\n                                                        <FontAwesomeIconComponent classes=\"fa fa-trash\" colorName=\"primary\" fontSize={\"small\"} /></Button>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </CardContent>\r\n                                    </Card>\r\n                                </div>\r\n                        }\r\n\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container className={classes.root} spacing={5}>\r\n                    <Grid item xs={4}><TextField\r\n                        fullWidth id=\"outlined-basic\"\r\n                        name=\"qualification\"\r\n                        label=\"Qualification\"\r\n                        variant=\"outlined\"\r\n                        error = {formErrors.qualification && true}\r\n                        value={formValues.qualification}\r\n                        onChange={handleChange1}\r\n                        className={formErrors.dob && \"input-error\"}\r\n\r\n\r\n                    />\r\n                        {formErrors.qualification && (\r\n                            <span className=\"error\">{formErrors.qualification}</span>\r\n                        )}\r\n                    </Grid>\r\n                    <Grid item xs={4}><TextField\r\n                        fullWidth id=\"outlined-basic\"\r\n                        name=\"last_organization\"\r\n                        label=\"Last Organization\"\r\n                        variant=\"outlined\"\r\n                        error = {formErrors.last_organization && true}\r\n                        value={formValues.last_organization}\r\n                        onChange={handleChange1}\r\n                        className={formErrors.last_organization && \"input-error\"}\r\n\r\n                    />\r\n                        {formErrors.last_organization && (\r\n                            <span className=\"error\">{formErrors.last_organization}</span>\r\n                        )}\r\n                    </Grid>\r\n                    <Grid item xs={4}><TextField\r\n                        fullWidth id=\"outlined-basic\"\r\n                        name=\"password\"\r\n                        type=\"password\"\r\n                        label=\"Password\"\r\n                        variant=\"outlined\"\r\n                        error = {formErrors.password && true}\r\n                        value={formValues.password}\r\n                        onChange={handleChange1}\r\n                        className={formErrors.password && \"input-error\"}\r\n\r\n                    />\r\n                        {formErrors.password && (\r\n                            <span className=\"error\">{formErrors.password}</span>\r\n                        )}\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container className={classes.root} spacing={5}>\r\n                    <Grid item xs={4}>\r\n                        <FormControl variant=\"outlined\" style={{ width: '100%' }}>\r\n                            <InputLabel id=\"demo-simple-select-outlined-label\">Role</InputLabel>\r\n                            <Select\r\n                                labelId=\"demo-simple-select-outlined-label\"\r\n                                id=\"demo-simple-select-outlined\"\r\n                                name=\"roleName\"\r\n                                label=\"Role\"\r\n                                error = {formErrors.roleName && true}\r\n                                value={formValues.roleName}\r\n                                onChange={handleChange1}\r\n                                className={formErrors.roleName && \"input-error\"}\r\n\r\n\r\n                            >\r\n                                {roleOptions}\r\n\r\n                            </Select>\r\n                           \r\n                        </FormControl>\r\n                        {formErrors.roleName && (\r\n                                <span className=\"error\">{formErrors.roleName}</span>\r\n                            )}\r\n\r\n                    </Grid>\r\n                    <Grid item xs={4} ></Grid>\r\n                    <Grid item xs={4} ></Grid>\r\n                </Grid>\r\n                <Grid container className={classes.root} spacing={3}>\r\n                    <Grid item xs={4} style={{ display: 'flex' }}>\r\n                        <Button type=\"submit\" variant=\"contained\"  color=\"primary\">Save</Button>\r\n                        <Button type=\"button\" onClick={(e) => { e.preventDefault(); props.history.push('/users') }}>Cancel</Button>\r\n                    </Grid>\r\n                    <Grid item xs={4}></Grid>\r\n                    <Grid item xs={4}></Grid>\r\n                </Grid>\r\n\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Addform;","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\Forms\\UserForms\\EditForm.js",["292","293","294","295","296","297","298","299","300"],"import React, { useState, useEffect } from 'react';\r\nimport './AddForm.css';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { TextField } from '@material-ui/core';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport AuthApi from '../../../Services/Authapi';\r\nimport FontAwesomeIconComponent from '../../../Layouts/FontAwesomeIconComponent';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nconst iniuser = {\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    email: \"\",\r\n    gender: \"\",\r\n    dob: \"\",\r\n    photo: \"\",\r\n    qualification: \"\",\r\n    last_organization: \"\",\r\n    roleName: \"\",\r\n    uploadedImgName: \"\",\r\n    user: false,\r\n    user_id: 0,\r\n    role: []\r\n\r\n}\r\n\r\nconst EditForm = (props) => {\r\n    const classes = props;\r\n    const [editValues, setEditValues] = useState(iniuser);\r\n    const [formErrors, setFormErrors] = useState({});\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n    const [roleOptions] = React.useState([]);\r\n\r\n\r\n\r\n    const handleChange1 = (e) => {\r\n        const { name, value } = e.target;\r\n        // console.log(value);\r\n        setEditValues({ ...editValues, [name]: value });\r\n        console.log(editValues);\r\n    };\r\n\r\n\r\n    const validate = (values) => {\r\n        let errors = {};\r\n        const regex = /^[a-zA-Z]/;\r\n        const emailRegx = /^[a-zA-Z0-9]+@+[a-zA-Z0-9]+.+[A-z]/;\r\n        const dobRegx = /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/;\r\n\r\n\r\n        if (!values.firstName) {\r\n            errors.firstName = \"Cannot be blank\";\r\n        } else if (!regex.test(values.firstName)) {\r\n            errors.firstName = \"Invalid firstName format\";\r\n        }\r\n\r\n        if (!values.lastName) {\r\n            errors.lastName = \"Cannot be blank\";\r\n        } else if (!regex.test(values.lastName)) {\r\n            errors.lastName = \"Invalid lastName format\";\r\n        }\r\n\r\n        if (!values.email) {\r\n            errors.email = \"Cannot be  blank\";\r\n        } else if (!emailRegx.test(values.email)) {\r\n            errors.email = \"Invalid email format\"\r\n        }\r\n\r\n        if (!values.dob) {\r\n            errors.dob = \"Cannot be  blank\";\r\n        } else if (!dobRegx.test(values.dob)) {\r\n            errors.dob = \"Invalid dob format\"\r\n        }\r\n\r\n        if (!values.qualification) {\r\n            errors.qualification = \"Cannot be blank\";\r\n        } else if (!regex.test(values.qualification)) {\r\n            errors.qualification = \"Invalid qualification format\";\r\n        }\r\n\r\n        if (!values.last_organization) {\r\n            errors.last_organization = \"Cannot be blank\";\r\n        } else if (!regex.test(values.last_organization)) {\r\n            errors.last_organization = \"Invalid last_organization format\";\r\n        }\r\n\r\n        if (!values.roleName) {\r\n            errors.roleName = \"Cannot be blank\";\r\n        }\r\n\r\n        return errors;\r\n    };\r\n\r\n\r\n    const getFormData = async () => {\r\n        let userId = props.history.location.pathname.split('/')[props.history.location.pathname.split('/').length - 1];\r\n        let user = await AuthApi.singleUser(userId);\r\n        // editUser = editValues;\r\n\r\n        let user_id = userId;\r\n        let firstName = (user.status === true && user.data && user.data.firstName && (user.data.firstName !== null || user.data.firstName !== false)) ? user.data.firstName : null;\r\n        let lastName = (user.status === true && user.data && user.data.lastName) ? user.data.lastName : null;\r\n        let email = (user.status === true && user.data && user.data.email) ? user.data.email : null;\r\n        let gender = (user.status === true && user.data && user.data.gender) ? user.data.gender : null;\r\n        let dob = (user.status === true && user.data && user.data.dob) ? user.data.dob : null;\r\n        let photo = (user.status === true && user.data && user.data.photo) ? user.data.photo : null;\r\n        let qualification = (user.status === true && user.data && user.data.qualification) ? user.data.qualification : null;\r\n        let last_organization = (user.status === true && user.data && user.data.last_organization) ? user.data.last_organization : null;\r\n        let userRole = (user.status === true && user.data && user.data.roles && Object.keys(user.data.roles).length > 0) ? user.data.roles : [];\r\n        let roleName = (Object.keys(userRole).length > 0) ? userRole[0].name : null;\r\n        let imageName =  user.data.photo !== null ? user.data.photo.substr(user.data.photo.lastIndexOf('/') + 1) : '';\r\n        let uploadedImgName = imageName;\r\n        setEditValues({\r\n            firstName: firstName,\r\n            lastName: lastName,\r\n            email: email,\r\n            gender: gender,\r\n            dob: dob,\r\n            photo: photo,\r\n            qualification: qualification,\r\n            last_organization: last_organization,\r\n            roleName: roleName,\r\n            uploadedImgName: uploadedImgName,\r\n            user_id: user_id,\r\n\r\n        })\r\n         \r\n\r\n\r\n    }\r\n    useEffect(\r\n        () =>\r\n            setTimeout(\r\n                () => getFormData(),\r\n                1000), []);\r\n\r\n\r\n\r\n    const imgUpload = async (e) => {\r\n        const postData = new FormData();\r\n        postData.append('file', e.target.files[0]);\r\n        let updateImg = await AuthApi.updateImg(postData);\r\n        console.log(updateImg);\r\n        // return false;\r\n        if (updateImg && updateImg.status === true) {\r\n            setEditValues({\r\n                    ...editValues,\r\n                photo: updateImg.data.image_url,\r\n                uploadedImgName: updateImg.data.image_name\r\n            })\r\n            //   console.log(editValues)\r\n        }\r\n    }\r\n\r\n    const removeImg = async (e) => {\r\n        let imageLink = editValues.photo;\r\n        imageLink = imageLink.substr(imageLink.indexOf('/', 7) + 1)\r\n        let remImg = await AuthApi.deleteImg(imageLink);\r\n        if (remImg && remImg.status === true) {\r\n            // setEditValues({\r\n            //     // ...setEditValues,\r\n            //     photo: null,\r\n            //     imageName: null\r\n            // })\r\n            getFormData()\r\n\r\n        } else {\r\n\r\n        }\r\n        // setEditValues({\r\n        //     photo: null,\r\n        //     uploadedImgName: null\r\n        // })\r\n\r\n    }\r\n\r\n\r\n    async function RoleData() {\r\n        let role = await AuthApi.getRole();\r\n\r\n        //    console.log(editValues); \r\n\r\n        if (role && role.status === true) {\r\n            if (Object.keys(role.data).length > 0) {\r\n                Object.keys(role.data).forEach((key) => {\r\n                    roleOptions.push(<MenuItem key={key} value={role.data[key].name}>{role.data[key].name}</MenuItem>)\r\n                })\r\n            }\r\n            else {\r\n                roleOptions.push(<MenuItem value=\"\"><em>Select Role</em></MenuItem>);\r\n            }\r\n\r\n        }\r\n    }\r\n    React.useEffect(() => RoleData(), []);\r\n\r\n    //    const  addRole =(e) =>{\r\n    //         let user = editValues;\r\n    //         console.log(user);\r\n    //         user.roleName = e.target.value;\r\n    //         setEditValues({\r\n    //             editValues: user\r\n    //         })\r\n    //     }\r\n\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setFormErrors(validate(editValues));\r\n        setIsSubmitting(true);\r\n    }\r\n\r\n    useEffect(async () => {\r\n        if (Object.keys(formErrors).length === 0 && isSubmitting) {\r\n            // submitForm();\r\n            await editUser1();\r\n        }\r\n    }, [formErrors]);\r\n\r\n    const editUser1 = async (id) => {\r\n        let status = await AuthApi.updateUser(editValues, editValues.user_id);\r\n        console.log(status);\r\n        if (status && status.status === true) {\r\n            props.history.push('/users');\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // console.log(editValues);\r\n\r\n    return (\r\n        <div>\r\n            <form className={classes.root} onSubmit={handleSubmit}>\r\n                <Grid container className={classes.root} spacing={5}>\r\n                    <Grid item xs={4}><TextField\r\n                        fullWidth\r\n                        id=\"outlined-basic\"\r\n                        name=\"firstName\"\r\n                        label=\"First name\"\r\n                        variant=\"outlined\"\r\n                        error={formErrors.firstName && true}\r\n                        value={(editValues && editValues.firstName !== null) ? editValues.firstName : null}\r\n                        // focused={(editValues && editValues.firstName !== null) ? true : false}\r\n                        onChange={handleChange1}\r\n                        className={formErrors.firstName && \"input-error\"}\r\n                    />\r\n                        {formErrors.firstName && (\r\n                            <span className=\"error\">{formErrors.firstName}</span>\r\n                        )}\r\n                    </Grid>\r\n                    <Grid item xs={4}><TextField\r\n                        fullWidth\r\n                        id=\"outlined-basic\"\r\n                        name=\"lastName\"\r\n                        label=\"Last name\"\r\n                        variant=\"outlined\"\r\n                        value={(editValues && editValues.lastName !== null) ? editValues.lastName : null}\r\n                        // focused={(editValues && editValues.lastName !== null) ? true : false}\r\n                        onChange={handleChange1}\r\n                        className={formErrors.lastName && \"input-error\"}\r\n                        error={formErrors.lastName && true}\r\n                    />\r\n                        {formErrors.lastName && (\r\n                            <span className=\"error\">{formErrors.lastName}</span>\r\n                        )}\r\n                    </Grid>\r\n                    <Grid item xs={4}><TextField\r\n                        fullWidth\r\n                        id=\"outlined-basic\"\r\n                        name=\"email\"\r\n                        label=\"Email-address\"\r\n                        variant=\"outlined\"\r\n                        value={(editValues && editValues.email !== null) ? editValues.email : null}\r\n                        // focused={(editValues && editValues.email !== null) ? true : false}\r\n                        error={formErrors.email && true}\r\n                        onChange={handleChange1}\r\n                        className={formErrors.email && \"input-error\"}\r\n                    />\r\n                        {formErrors.email && (\r\n                            <span className=\"error\">{formErrors.email}</span>\r\n                        )}\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container className={classes.root} spacing={5}>\r\n                    <Grid item xs={4}></Grid>\r\n                    <Grid item xs={4}></Grid>\r\n                    <Grid item xs={4}></Grid>\r\n                </Grid>\r\n                <Grid container className={classes.root} spacing={5} >\r\n                    <Grid item xs={4} style={{ display: 'flex' }}>\r\n                        <FormControl component=\"fieldset\">\r\n                            <Grid container className={classes.root} spacing={4} >\r\n                                <Grid item xs={12} style={{ display: 'flex' }}>\r\n                                    <FormLabel component=\"legend\">Gender</FormLabel>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <RadioGroup aria-label=\"gender\" name=\"gender\"  onChange={handleChange1} value={editValues.gender} \r\n                            // focused={(editValues && editValues.gender !== null) ? true : false}\r\n                            >\r\n                                <Grid container className={classes.root} spacing={2}>\r\n                                    <Grid item xs={6}><FormControlLabel value=\"Female\" control={<Radio />} label=\"Female\" /></Grid>\r\n                                    <Grid item xs={6}><FormControlLabel value=\"Male\" control={<Radio />} label=\"Male\" /></Grid>\r\n                                </Grid>\r\n                            </RadioGroup>\r\n                        </FormControl></Grid>\r\n                    <Grid item xs={4}>\r\n                        <TextField\r\n                            fullWidth\r\n                            id=\"date\"\r\n                            label=\"Birthday\"\r\n                            name=\"dob\"\r\n                            type=\"date\"\r\n                            variant=\"outlined\"\r\n                            // defaultValue=\"2017-05-24\"\r\n                            error={formErrors.dob && true}\r\n                            value={(editValues && editValues.dob !== null) ? editValues.dob : null}\r\n                            // focused={(editValues && editValues.dob !== null) ? true : false}\r\n                            onChange={handleChange1}\r\n                            className={formErrors.dob && \"input-error\"}\r\n                            className={classes.textField}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                        />\r\n                        {formErrors.dob && (\r\n                            <span className=\"error\">{formErrors.dob}</span>\r\n                        )}\r\n                    </Grid>\r\n\r\n\r\n                    <Grid item xs={4} style={{ display: 'flex' }}>\r\n                        {\r\n\r\n                            (editValues.photo === null) ?\r\n                                <div>\r\n                                    <input\r\n                                        accept=\"image/*\"\r\n                                        className={classes.input}\r\n                                        name=\"photo\"\r\n                                        id=\"contained-button-file\"\r\n                                        type=\"file\"\r\n                                        onChange={(e) => imgUpload(e)}\r\n                                        style={{ display: 'none' }}\r\n                                    />\r\n                                    <label htmlFor=\"contained-button-file\">\r\n                                        <Button variant=\"contained\" color=\"primary\" component=\"span\" > Upload Profile Picture </Button>\r\n                                    </label>\r\n                                </div>\r\n                                :\r\n                                <div>\r\n                                    <Card className={classes.root}>\r\n                                        <CardContent>\r\n                                            <Grid container className={classes.root} spacing={5}>\r\n                                                <Grid item xs={4}>\r\n                                                    <img src={editValues.photo} alt=\"User profile imagelllll\" width=\"35\" height=\"35\" />\r\n                                                </Grid>\r\n                                                <Grid item xs={4}>\r\n                                                    <Typography variant=\"subtitle1\" gutterBottom>\r\n                                                        {editValues.uploadedImgName}\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                                <Grid item xs={4}>\r\n                                                    <Button onClick={(e) => { removeImg(e) }} >\r\n                                                        <FontAwesomeIconComponent classes=\"fa fa-trash\" colorName=\"primary\" fontSize={\"small\"} /></Button>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </CardContent>\r\n                                    </Card>\r\n                                </div>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container className={classes.root} spacing={5}>\r\n                    <Grid item xs={4}><TextField\r\n                        fullWidth\r\n                        id=\"outlined-basic\"\r\n                        name=\"qualification\"\r\n                        label=\"Qualification\"\r\n                        variant=\"outlined\"\r\n                        value={(editValues && editValues.qualification !== null) ? editValues.qualification : null}\r\n                        // focused={(editValues && editValues.qualification !== null) ? true : false}\r\n                        error={formErrors.qualification && true}\r\n                        onChange={handleChange1}\r\n                        className={formErrors.dob && \"input-error\"}\r\n                    />\r\n                        {formErrors.qualification && (\r\n                            <span className=\"error\">{formErrors.qualification}</span>\r\n                        )}\r\n                    </Grid>\r\n                    <Grid item xs={4}><TextField\r\n                        fullWidth\r\n                        id=\"outlined-basic\"\r\n                        name=\"last_organization\"\r\n                        label=\"Last Organization\"\r\n                        variant=\"outlined\"\r\n                        value={(editValues && editValues.last_organization !== null) ? editValues.last_organization : null}\r\n                        // focused={(editValues && editValues.last_organization !== null) ? true : false}\r\n                        error={formErrors.last_organization && true}\r\n                        onChange={handleChange1}\r\n                        className={formErrors.last_organization && \"input-error\"}\r\n                    />\r\n                        {formErrors.last_organization && (\r\n                            <span className=\"error\">{formErrors.last_organization}</span>\r\n                        )}\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <FormControl variant=\"outlined\" style={{ width: '100%' }}>\r\n                            <InputLabel id=\"demo-simple-select-outlined-label\">Role</InputLabel>\r\n                            <Select\r\n                                labelId=\"demo-simple-select-outlined-label\"\r\n                                id=\"demo-simple-select-outlined\"\r\n                                name=\"roleName\"\r\n                                label=\"Role\"\r\n                                error={formErrors.roleName && true}\r\n                                className={formErrors.roleName && \"input-error\"}\r\n                                onChange={handleChange1}\r\n                                value={(editValues && editValues.roleName && editValues.roleName !== null) ? editValues.roleName : \"\"}\r\n                                // focused={(editValues && editValues.roleName && editValues.roleName !== null) ? true : false}\r\n\r\n                            >{roleOptions}\r\n                            </Select>\r\n                        </FormControl>\r\n                        {formErrors.roleName && (\r\n                            <span className=\"error\">{formErrors.roleName}</span>\r\n                        )}\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container className={classes.root} spacing={3}>\r\n                    <Grid item xs={4} style={{ display: 'flex' }}>\r\n                        <Button type=\"submit\" variant=\"contained\" color=\"primary\" >Edit User </Button>\r\n                        <Button type=\"button\" onClick={(e) => { e.preventDefault(); props.history.push('/users') }}>Cancel</Button>\r\n                    </Grid>\r\n                    <Grid item xs={4}></Grid>\r\n                    <Grid item xs={4}></Grid>\r\n                </Grid>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EditForm;","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Leaves\\Leaves1.js",[],"C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Leaves\\AddLeaves.js",["301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322"],"import React, { useState, useEffect } from 'react';\r\nimport Header from '../../Layouts/Header';\r\nimport Footer from '../../Layouts/Footer';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Breadcrumb from '../../Layouts/Breadcrumb';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { TextField } from '@material-ui/core';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport LoadderButton from '../../Layouts/LoadderButton';\r\nimport AuthApi from '../../Services/Authapi';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport FontAwesomeIconComponent from '../../Layouts/FontAwesomeIconComponent';\r\nimport { SignalCellularNull } from '@material-ui/icons';\r\nimport Authapi from '../../Services/Authapi';\r\nimport swal from 'sweetalert';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport { now } from 'moment';\r\nimport moment from 'moment';\r\n\r\n\r\nconst inileaves = {\r\n    leaveName: \"\",\r\n    dateRange: \"\",\r\n    startDate: \"\",\r\n    endDate: \"\",\r\n    noOfDays: \"\"\r\n}\r\n\r\n// const inilea = {\r\n//     leaveName: \"dsfsd\",\r\n//     dateRange: [\"14-01-2021\",\"15-01-2021\"],\r\n//     // startDate: null,\r\n//     // endDate: null,\r\n//     noOfDays:2\r\n// }\r\n\r\n\r\n\r\n\r\n\r\nconst AddLeaves = (props) => {\r\n    const classes = props;\r\n    const [leaveValues, setLeaveValues] = useState(inileaves);\r\n    const [formErrors, setFormErrors] = useState({});\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n\r\n\r\n   \r\n    \r\n\r\n      useEffect(() => {\r\n        if (props && props.authToken === false) {\r\n            props.history.push('/login');\r\n          }\r\n        });\r\n\r\n\r\n    //   componentWillReceiveProps(props) {\r\n    //     if (props && props.authToken === false) {\r\n    //       props.history.push('/login');\r\n    //     }\r\n    //   }\r\n    \r\n\r\n\r\n\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setLeaveValues({ ...leaveValues, [name]: value });\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    function dateDiffInDays(startDate, endDate) {\r\n        // round to the nearest whole number\r\n        return Math.round((endDate - startDate) / (1000 * 60 * 60 * 24));\r\n    }\r\n    const daysDiff = dateDiffInDays(new Date(leaveValues.startDate), new Date(leaveValues.endDate));\r\n    const dsp = dateDiffInDays(new Date(), new Date(leaveValues.startDate));\r\n\r\n\r\n\r\n    const validate = (values) => {\r\n        let errors = {};\r\n        const regex = /^[a-zA-Z]/;\r\n        const dateR = /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/;\r\n\r\n\r\n\r\n\r\n        if (!values.leaveName) {\r\n            errors.leaveName = \"Cannot be blank\";\r\n        } else if (!regex.test(values.leaveName)) {\r\n            errors.leaveName = \"Invalid firstName format\";\r\n        }\r\n\r\n        if (!values.startDate) {\r\n            errors.startDate = \"Cannot be  blank\";\r\n        } else if (!dateR.test(values.startDate)) {\r\n            errors.startDate = \"Invalid dob format\"\r\n        }\r\n        else {\r\n\r\n\r\n            if (dsp < 0) {\r\n                errors.startDate = \"you can chooes only Current and future Date\";\r\n\r\n            }\r\n        }\r\n\r\n        if (!values.endDate) {\r\n            errors.endDate = \"Cannot be  blank\";\r\n        } else if (!dateR.test(values.endDate)) {\r\n            errors.endDate = \"Invalid dob format\"\r\n        } else {\r\n\r\n\r\n            if (daysDiff < 0) {\r\n                errors.endDate = \"you can chooes only Current and future Date\";\r\n\r\n            }\r\n        }\r\n\r\n\r\n\r\n        return errors;\r\n    };\r\n\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n\r\n        setFormErrors(validate(leaveValues));\r\n        setIsSubmitting(true);\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    useEffect(async () => {\r\n        if (Object.keys(formErrors).length === 0 && isSubmitting) {\r\n            await createLeaves();\r\n        }\r\n    }, [formErrors]);\r\n\r\n\r\n    const createLeaves = async () => {\r\n        console.log(\"test\");\r\n        let create = await AuthApi.createHoliday(leaveValues)\r\n        console.log(create);\r\n\r\n        if (create && create.status === true) {\r\n            props.history.push('/leaves');\r\n        } else {\r\n            swal({\r\n                title: \"OOPS!\",\r\n                icon: \"fail\",\r\n                message: \"Something went wrong, Please try later!\"\r\n            })\r\n        }\r\n    }\r\n\r\n    function diffday() {\r\n        const a = moment(leaveValues.startDate);\r\n        const b = moment(leaveValues.endDate);\r\n        const dateRangeArr = [];\r\n\r\n        // if(e.target.name == \"startDate\"){\r\n        var startDate = leaveValues.startDate;\r\n        dateRangeArr.push(startDate);\r\n        // }\r\n        // if(e.target.name == \"endDate\"){\r\n        var endDate = leaveValues.endDate;\r\n        dateRangeArr.push(endDate);\r\n        // }\r\n\r\n        leaveValues.dateRange = dateRangeArr;\r\n        leaveValues.noOfDays = b.diff(a, 'days')\r\n\r\n    }\r\n    console.log(leaveValues);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // function convertDate(userDate) {\r\n    //     var date = userDate;\r\n    //     var newdate = date.split(\"-\").reverse().join(\"-\");\r\n    //     return newdate;\r\n    // }\r\n\r\n    //   console.log(convertDate(todaysDate)); // Returns: 2015-08-25\r\n\r\n    return (\r\n        <div>\r\n            <Header\r\n                {...props}\r\n                authUser={props.authUser}\r\n                component={\r\n                    <div>\r\n                        <Card className={classes.root} style={{ marginBottom: '3%' }}>\r\n                            <CardContent>\r\n                                <Breadcrumb\r\n                                    {...props}\r\n                                    primaryPageName=\"Leaves\"\r\n                                    primaryPageLink=\"/leaves\"\r\n                                    isSecondaryPage={true}\r\n                                    secondaryPageName=\"Add\" />\r\n                            </CardContent>\r\n                        </Card>\r\n                        <Grid container className={classes.root} spacing={2}>\r\n                            <Grid item xs={12}>\r\n                                <Card className={classes.root}>\r\n                                    <CardContent>\r\n                                        <Typography variant=\"h2\">Add leave</Typography>\r\n                                        <form className={classes.form} onSubmit={handleSubmit} >\r\n                                            <Grid container className={classes.root} spacing={5}>\r\n                                                <Grid item xs={3}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"leaveName\"\r\n                                                        name=\"leaveName\"\r\n                                                        label=\"LeaveName\"\r\n                                                        variant=\"outlined\"\r\n                                                        error={formErrors.leaveName && true}\r\n                                                        value={leaveValues.leaveName}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.leaveName && \"input-error\"}\r\n\r\n                                                    />\r\n                                                    {formErrors.leaveName && (\r\n                                                        <span className=\"error\">{formErrors.leaveName}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n                                                <Grid item xs={4}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"date\"\r\n                                                        variant=\"outlined\"\r\n                                                        label=\"Start-date\"\r\n                                                        name=\"startDate\"\r\n                                                        type=\"date\"\r\n                                                        error={formErrors.startDate && true}\r\n                                                        value={leaveValues.startDate}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.startDate && \"input-error\"}\r\n                                                        className={classes.textField}\r\n                                                        InputLabelProps={{\r\n                                                            shrink: true,\r\n                                                        }}\r\n                                                    />\r\n                                                    {formErrors.startDate && (\r\n                                                        <span className=\"error\">{formErrors.startDate}</span>\r\n                                                    )}\r\n\r\n                                                </Grid>\r\n                                                <h3 style={{ marginTop: \"30px\" }}>To</h3>\r\n                                                <Grid item xs={4}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"date\"\r\n                                                        variant=\"outlined\"\r\n                                                        label=\"End-date\"\r\n                                                        name=\"endDate\"\r\n                                                        type=\"date\"\r\n                                                        error={formErrors.endDate && true}\r\n                                                        value={leaveValues.endDate}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.endDate && \"input-error\"}\r\n                                                        className={classes.textField}\r\n                                                        InputLabelProps={{\r\n                                                            shrink: true,\r\n                                                        }}\r\n                                                    />\r\n                                                    {formErrors.endDate && (\r\n                                                        <span className=\"error\">{formErrors.endDate}</span>\r\n                                                    )}\r\n\r\n                                                </Grid>\r\n\r\n\r\n\r\n                                            </Grid>\r\n\r\n\r\n\r\n\r\n\r\n                                            <Grid container className={classes.root} spacing={3}>\r\n                                                <Grid item xs={4} style={{ display: 'flex' }}>\r\n                                                    <Button type=\"submit\" onClick={(e) => { diffday() }} style={{marginTop : \"10px\"}} variant=\"contained\" color=\"primary\">Save</Button>\r\n                                                    <Button type=\"button\"  style={{marginTop : \"10px\"}} onClick={(e) => { e.preventDefault(); props.history.push('/leaves') }}>Cancel</Button>\r\n                                                </Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                            </Grid>\r\n                                        </form>\r\n\r\n                                    </CardContent>\r\n                                </Card>\r\n                            </Grid>\r\n                            <Grid item xs={6}></Grid>\r\n                        </Grid>\r\n                    </div>\r\n                } />\r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddLeaves;","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Leaves\\EditLeaves.js",["323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340","341","342","343","344","345","346"],"import React, { useState, useEffect } from 'react';\r\nimport Header from '../../Layouts/Header';\r\nimport Footer from '../../Layouts/Footer';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Breadcrumb from '../../Layouts/Breadcrumb';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { TextField } from '@material-ui/core';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport LoadderButton from '../../Layouts/LoadderButton';\r\nimport AuthApi from '../../Services/Authapi';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport FontAwesomeIconComponent from '../../Layouts/FontAwesomeIconComponent';\r\nimport { SignalCellularNull } from '@material-ui/icons';\r\nimport Authapi from '../../Services/Authapi';\r\nimport swal from 'sweetalert';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport { now } from 'moment';\r\nimport moment from 'moment';\r\n\r\n\r\nconst inileaves = {\r\n    leaveName: \"\",\r\n    dateRange: \"\",\r\n    startDate: \"\",\r\n    endDate: \"\",\r\n    leave_id: 0,\r\n}\r\n\r\n\r\n\r\nconst AddLeaves = (props) => {\r\n    const classes = props;\r\n    const [editValues, setEditValues] = useState(inileaves);\r\n    const [formErrors, setFormErrors] = useState({});\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        if (props && props.authToken === false) {\r\n            props.history.push('/login');\r\n          }\r\n        });\r\n\r\n\r\n\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        // console.log(value);\r\n        setEditValues({ ...editValues, [name]: value });\r\n        // console.log(editValues);\r\n    }\r\n\r\n\r\n    function dateDiffInDays(startDate, endDate) {\r\n        // round to the nearest whole number\r\n        return Math.round((endDate - startDate) / (1000 * 60 * 60 * 24));\r\n    }\r\n    const daysDiff = dateDiffInDays(new Date(editValues.startDate), new Date(editValues.endDate));\r\n    const dsp = dateDiffInDays(new Date(), new Date(editValues.startDate));\r\n\r\n    const validate = (values) => {\r\n        let errors = {};\r\n        const regex = /^[a-zA-Z]/;\r\n        const dateR = /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/;\r\n\r\n\r\n\r\n\r\n        if (!values.leaveName) {\r\n            errors.leaveName = \"Cannot be blank\";\r\n        } else if (!regex.test(values.leaveName)) {\r\n            errors.leaveName = \"Invalid firstName format\";\r\n        }\r\n\r\n        if (!values.startDate) {\r\n            errors.startDate = \"Cannot be  blank\";\r\n        } else if (!dateR.test(values.startDate)) {\r\n            errors.startDate = \"Invalid dob format\"\r\n        }\r\n        else {\r\n          \r\n\r\n            if (dsp < 0) {\r\n                errors.startDate = \"you can chooes only Current and future Date\";\r\n\r\n            }\r\n        }\r\n\r\n        if (!values.endDate) {\r\n            errors.endDate = \"Cannot be  blank\";\r\n        } else if (!dateR.test(values.endDate)) {\r\n            errors.endDate = \"Invalid dob format\"\r\n        } else {\r\n            \r\n\r\n            if (daysDiff < 0) {\r\n                errors.endDate = \"you can chooes only Current and future Date\";\r\n\r\n            }\r\n        }\r\n\r\n\r\n\r\n        return errors;\r\n    };\r\n\r\n    const getLeaveData = async () => {\r\n        let leaveId = props.history.location.pathname.split('/')[props.history.location.pathname.split('/').length - 1];\r\n        let leave = await AuthApi.singleLeave(leaveId);\r\n\r\n        let leave_id = leaveId;\r\n        let leaveName = (leave.status === true && leave.data && leave.data.name && (leave.data.name !== null || leave.data.name !== false)) ? leave.data.name : null;\r\n        let dateRangeArr = (leave.status === true && leave.data && leave.data.date_range) ? leave.data.date_range : null;\r\n        console.log(dateRangeArr[0]);\r\n        console.log(dateRangeArr[1]);\r\n        \r\n        setEditValues({\r\n            // ...editValuesObj,\r\n            leaveName: leaveName,               \r\n            startDate: dateRangeArr[0],\r\n            endDate:   dateRangeArr[1],\r\n            leave_id: leave_id,\r\n        })\r\n         console.log(editValues);\r\n\r\n\r\n    }\r\n    useEffect(\r\n        () =>\r\n            setTimeout(\r\n                () => getLeaveData(),\r\n                500), []);\r\n\r\n   \r\n\r\n    \r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        setFormErrors(validate(editValues));\r\n        setIsSubmitting(true);\r\n\r\n    }\r\n\r\n    useEffect(async () => {\r\n        if (Object.keys(formErrors).length === 0 && isSubmitting) {\r\n            await editUser1();\r\n        }\r\n    }, [formErrors]);\r\n\r\n\r\n    function  diffday() {\r\n        const a = moment(editValues.startDate);\r\n        const b = moment(editValues.endDate);\r\n        const dateRangeArr = [];\r\n\r\n     \r\n            var startDate = editValues.startDate; \r\n            dateRangeArr.push(startDate);\r\n\r\n            var endDate = editValues.endDate; \r\n            dateRangeArr.push(endDate);\r\n        \r\n\r\n        editValues.dateRange = dateRangeArr;\r\n        editValues.noOfDays = b.diff(a, 'days')\r\n\r\n    }\r\n\r\n    const editUser1 = async (id) => {\r\n        let status = await AuthApi.updateLeave(editValues, editValues.leave_id);\r\n        console.log(status);\r\n        if (status && status.status === true) {\r\n            props.history.push('/leaves');\r\n        }\r\n    }\r\n\r\n  \r\n    return (\r\n        <div>\r\n            <Header\r\n                {...props}\r\n                authUser={props.authUser}\r\n                component={\r\n                    <div>\r\n                        <Card className={classes.root} style={{ marginBottom: '3%' }}>\r\n                            <CardContent>\r\n                                <Breadcrumb\r\n                                    {...props}\r\n                                    primaryPageName=\"Leaves\"\r\n                                    primaryPageLink=\"/leaves\"\r\n                                    isSecondaryPage={true}\r\n                                    secondaryPageName=\"edit\" />\r\n                            </CardContent>\r\n                        </Card>\r\n                        <Grid container className={classes.root} spacing={2}>\r\n                            <Grid item xs={12}>\r\n                                <Card className={classes.root}>\r\n                                    <CardContent>\r\n                                        <Typography variant=\"h2\">Edit leave</Typography>\r\n                                        <form className={classes.form} onSubmit={handleSubmit} >\r\n                                            <Grid container className={classes.root} spacing={5}>\r\n                                                <Grid item xs={3}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"leaveName\"\r\n                                                        name=\"leaveName\"\r\n                                                        label=\"LeaveName\"\r\n                                                        variant=\"outlined\"\r\n                                                        error={formErrors.leaveName && true}\r\n                                                        value={(editValues && editValues.leaveName !== null) ? editValues.leaveName : null}\r\n                                                        focused={(editValues && editValues.leaveName !== null) ? true : false}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.leaveName && \"input-error\"}\r\n                                                    />\r\n                                                        {formErrors.leaveName && (\r\n                                                            <span className=\"error\">{formErrors.leaveName}</span>\r\n                                                        )}\r\n                                                </Grid>\r\n                                                <Grid item xs={4}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"date\"\r\n                                                        variant=\"outlined\"\r\n                                                        label=\"Start-date\"\r\n                                                        name=\"startDate\"\r\n                                                        type=\"date\"\r\n                                                        formate=\"yyyy-mm-dd\"\r\n                                                        error={formErrors.startDate && true}\r\n                                                        value={(editValues && editValues.startDate !== null) ? editValues.startDate : null}\r\n                                                        focused={(editValues && editValues.startDate !== null) ? true : false}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.startDate && \"input-error\"}\r\n                                                        className={classes.textField}\r\n                                                        InputLabelProps={{\r\n                                                            shrink: true,\r\n                                                        }}\r\n                                                    />\r\n                                                    {formErrors.startDate && (\r\n                                                        <span className=\"error\">{formErrors.startDate}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n                                                <h3 style={{ marginTop: \"30px\" }}>To</h3>\r\n                                                <Grid item xs={4}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"date\"\r\n                                                        variant=\"outlined\"\r\n                                                        label=\"End-date\"\r\n                                                        name=\"endDate\"\r\n                                                        type=\"date\"\r\n                                                        error={formErrors.endDate && true}\r\n                                                        value={(editValues && editValues.endDate !== null) ? editValues.endDate : null}\r\n                                                        focused={(editValues && editValues.endDate !== null) ? true : false}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.endDate && \"input-error\"}\r\n                                                        className={classes.textField}\r\n                                                        InputLabelProps={{\r\n                                                            shrink: true,\r\n                                                        }}\r\n                                                    />\r\n                                                    {formErrors.endDate && (\r\n                                                        <span className=\"error\">{formErrors.endDate}</span>\r\n                                                    )}\r\n\r\n                                                </Grid>\r\n\r\n\r\n\r\n                                            </Grid>\r\n\r\n\r\n\r\n\r\n\r\n                                            <Grid container className={classes.root} spacing={3}>\r\n                                                <Grid item xs={4} style={{ display: 'flex' }}>\r\n                                                    <Button type=\"submit\"  style={{marginTop : \"10px\"}} onClick={(e) => {diffday()}} variant=\"contained\" color=\"primary\" >Edit Leaves </Button>\r\n                                                    <Button type=\"button\"  style={{marginTop : \"10px\"}} onClick={(e) => { e.preventDefault(); props.history.push('/leaves') }}>Cancel</Button>\r\n                                                </Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                            </Grid>\r\n                                        </form>\r\n\r\n                                    </CardContent>\r\n                                </Card>\r\n                            </Grid>\r\n                            <Grid item xs={6}></Grid>\r\n                        </Grid>\r\n                    </div>\r\n                } />\r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddLeaves;","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\LeavesTicket\\Ticket.js",["347"],"import React, { Component } from 'react';\r\nimport Header from '../../Layouts/Header'\r\nimport Footer from '../../Layouts/Footer';\r\nimport AuthApi from '../../Services/Authapi';\r\nimport TableComponent from '../../Layouts/TableComponent';\r\nimport Breadcrumb from '../../Layouts/Breadcrumb';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport swal from 'sweetalert';\r\n\r\nclass Ticket extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      tickets: [],\r\n      count:0,\r\n      tableTh: [\r\n        { id: 'user_name', numeric: false, disablePadding: true, label: 'Name', sortable: true },\r\n        { id: 'leaveType', numeric: false, disablePadding: true, label: 'LeaveType', sortable: true },\r\n        { id: 'date_range', numeric: false, disablePadding: true, label: 'Date Range', sortable: true },\r\n        { id: 'created_at', numeric: false, disablePadding: true, label: 'Created On', sortable: true },\r\n        { id: 'actions', numeric: false, disablePadding: true, label: 'Actions', sortable: false }\r\n      ]\r\n    }\r\n      this.ticketsData = this.ticketsData.bind(this);\r\n    //  this.removeLeaves = this.removeLeaves.bind(this);\r\n  }\r\n\r\n  componentWillMount() {\r\n    if (this.props && this.props.authToken === false) {\r\n      this.props.history.push('/login');\r\n    }\r\n    this.ticketsData();\r\n  }\r\n\r\n  componentWillReceiveProps(props) {\r\n    if (props && props.authToken === false) {\r\n      props.history.push('/login');\r\n    }\r\n  }\r\n\r\n \r\n\r\n    ticketsData = async (e) => {\r\n      let tickets = await AuthApi.getTickets();\r\n      // console.log(tickets.data);\r\n    \r\n\r\n\r\n      if(tickets && tickets.status === true) {\r\n        const newarr = []\r\n        const ticketsData = tickets.data\r\n        ticketsData.forEach((element,key) => {\r\n          const tempData = {\r\n            'id': element.id,\r\n            'name':element.has_user.name,\r\n            'leaveType':element.leaveType, \r\n            'date_range':element.date_range, \r\n            'created_at': element.created_at\r\n          }\r\n          // console.log(key)\r\n          //  console.log(tempName)\r\n          //  tickets.data[key] = tempName; \r\n          // Array.prototype.push.apply(ticketsData[key], tempName)\r\n          \r\n          newarr.push(tempData)\r\n        });\r\n        \r\n\r\n        this.setState({\r\n          tickets : newarr,\r\n          count: tickets.data.length,\r\n        })\r\n      }\r\n     \r\n    }\r\n\r\n\r\n    // async removeLeaves(id){\r\n    //   swal({\r\n    //         title: \"Are you sure?\",\r\n    //         icon: \"warning\",\r\n    //         buttons: [\"Cancel\", \"Yes\"]\r\n    //       }).then(async (confirm) => {\r\n    //         if (confirm) {\r\n    //           let currentLeave = await AuthApi.leaveDelete(id);\r\n    //           if (currentLeave && currentLeave.status === true) {\r\n    //             this.leaveData();\r\n    //           } else {\r\n    //           }\r\n    //         }\r\n    //       });\r\n    // }\r\n\r\n   \r\n\r\n\r\n  render() {\r\n    const classes = this.props;\r\n    return (\r\n      <div>\r\n        <Header\r\n          {...this.props}\r\n          authUser={this.props.authUser}\r\n          setAutUser={this.props.setAutUser}\r\n          component={\r\n            <div>\r\n              <Card className={classes.root} style={{ marginBottom: '3%' }}>\r\n                <CardContent>\r\n                  <Breadcrumb\r\n                    {...this.props}\r\n                    primaryPageName=\"LeavesTicket\"\r\n                    primaryPageLink=\"/tickets\"\r\n                    isSecondaryPage={false}\r\n                    secondaryPageName=\"\" />\r\n                </CardContent>\r\n              </Card>\r\n              <TableComponent\r\n                {...this.props}\r\n                tableTh={this.state.tableTh}\r\n                tableData={this.state.tickets}\r\n                tableCount={this.state.count}\r\n                colNameToShow={[ 'name', 'leaveType', 'date_range', 'created_at']}\r\n                openPopUp={false}\r\n                removeRow={this.removeLeaves}\r\n                actionBtns={['update']}\r\n                modelName={'LeavesTickets'}\r\n                addRoute={'/tickets/add'}\r\n                updateRoute={'/tickets/edit'}\r\n                openPopUpUpdate={false}\r\n              /></div>\r\n          } />\r\n        <Footer {...this.props} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Ticket;","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\LeavesTicket\\AddTickets.js",["348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365","366"],"import React, { useState, useEffect } from 'react';\r\nimport Header from '../../Layouts/Header';\r\nimport Footer from '../../Layouts/Footer';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Breadcrumb from '../../Layouts/Breadcrumb';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { TextField } from '@material-ui/core';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport LoadderButton from '../../Layouts/LoadderButton';\r\nimport AuthApi from '../../Services/Authapi';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport FontAwesomeIconComponent from '../../Layouts/FontAwesomeIconComponent';\r\nimport { SignalCellularNull } from '@material-ui/icons';\r\nimport Authapi from '../../Services/Authapi';\r\nimport swal from 'sweetalert';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport { now } from 'moment';\r\nimport moment from 'moment';\r\nimport ls from \"local-storage\";\r\n\r\nconst iniTickets = {\r\n    leaveType: \"\",\r\n    ticketMesasge: \"\",\r\n    dateRange: \"\",\r\n    startDate: \"\",\r\n    endDate: \"\",\r\n    noOfDays: \"\",\r\n\r\n}\r\n\r\n\r\nconst AddTickets = (props) => {\r\n    const classes = props;\r\n    const [ticketValues, setTicketsValues] = useState(iniTickets);\r\n    const [formErrors, setFormErrors] = useState({});\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        if (props && props.authToken === false) {\r\n            props.history.push('/login');\r\n        }\r\n    });\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setTicketsValues({ ...ticketValues, [name]: value });\r\n        // console.log(ticketValues);\r\n    };\r\n\r\n\r\n\r\n    function dateDiffInDays(startDate, endDate) {\r\n        // round to the nearest whole number\r\n        return Math.round((endDate - startDate) / (1000 * 60 * 60 * 24));\r\n    }\r\n    const daysDiff = dateDiffInDays(new Date(ticketValues.startDate), new Date(ticketValues.endDate));\r\n    const today = new Date();\r\n    const date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\r\n    const dsp = dateDiffInDays(new Date(date), new Date(ticketValues.startDate));\r\n    // console.log(\"date only==\"+new Date());\r\n    // console.log(\"UTC date==\"+new Date(ticketValues.startDate));\r\n   \r\n\r\n\r\n    const validate = (values) => {\r\n        let errors = {};\r\n        const regex = /^[a-zA-Z]/;\r\n        const dateR = /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/;\r\n\r\n\r\n        if (!values.leaveType) {\r\n            errors.leaveType = \"Cannot be blank\";\r\n        }\r\n\r\n\r\n        if (!values.ticketMesasge) {\r\n            errors.ticketMesasge = \"Cannot be blank\";\r\n        } else if (!regex.test(values.ticketMesasge)) {\r\n            errors.ticketMesasge = \"Invalid ticketMesasge format\";\r\n        }\r\n\r\n        if (!values.startDate) {\r\n            errors.startDate = \"Cannot be  blank\";\r\n        } else if (!dateR.test(values.startDate)) {\r\n            errors.startDate = \"Invalid dob format\"\r\n        } else {\r\n            if (dsp < 0) {\r\n                errors.startDate = \"You can chooes only current and future Date\";\r\n            }\r\n        }\r\n\r\n        if (!values.endDate) {\r\n            errors.endDate = \"Cannot be  blank\";\r\n        } else if (!dateR.test(values.endDate)) {\r\n            errors.endDate = \"Invalid dob format\"\r\n        } else {\r\n            if (daysDiff < 0) {\r\n                errors.endDate = \"You can chooes only current and future Date\";\r\n            }\r\n        }\r\n        return errors;\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        setFormErrors(validate(ticketValues));\r\n        setIsSubmitting(true);\r\n    }\r\n\r\n    useEffect(async () => {\r\n        if (Object.keys(formErrors).length === 0 && isSubmitting) {\r\n            await Tickets();\r\n        }\r\n    }, [formErrors])\r\n\r\n    const Tickets = async () => {\r\n        let create1 = await AuthApi.createTicket(ticketValues);\r\n        console.log(create1)\r\n        if (create1 && create1.status === true) {\r\n            props.history.push('/tickets');\r\n        } else {\r\n            swal({\r\n                title: \"OOPS!\",\r\n                icon: \"fail\",\r\n                message: \"Something went wrong, Please try later!\"\r\n            })\r\n        }\r\n    }\r\n\r\n    function diffday() {\r\n        const a = moment(ticketValues.startDate);\r\n        const b = moment(ticketValues.endDate);\r\n        const dateRangeArr = [];\r\n\r\n        // if(e.target.name == \"startDate\"){\r\n        var startDate = ticketValues.startDate;\r\n        dateRangeArr.push(startDate);\r\n        // }\r\n        // if(e.target.name == \"endDate\"){\r\n        var endDate = ticketValues.endDate;\r\n        dateRangeArr.push(endDate);\r\n        // }\r\n\r\n        ticketValues.dateRange = dateRangeArr;\r\n        ticketValues.noOfDays = b.diff(a, 'days')\r\n        // console.log(ticketValues.noOfDays);\r\n        // console.log( ticketValues.dateRange);\r\n\r\n    }\r\n\r\n    // console.log(ticketValues);\r\n    // const clientTimezoneOffset = new Date().getTimezoneOffset()/60;\r\n   \r\n\r\n\r\n    return (\r\n        <div>\r\n            <Header\r\n                {...props}\r\n                authUser={props.authUser}\r\n                component={\r\n                    <div>\r\n                        <Card className={classes.root} style={{ marginBottom: '3%' }}>\r\n                            <CardContent>\r\n                                <Breadcrumb\r\n                                    {...props}\r\n                                    primaryPageName=\"LeavesTicket\"\r\n                                    primaryPageLink=\"/tickets\"\r\n                                    isSecondaryPage={true}\r\n                                    secondaryPageName=\"Add\" />\r\n                            </CardContent>\r\n                        </Card>\r\n                        <Grid container className={classes.root} spacing={2}>\r\n                            <Grid item xs={12}>\r\n                                <Card className={classes.root}>\r\n                                    <CardContent>\r\n                                        <Typography variant=\"h2\">Add Tickets</Typography>\r\n                                        <form className={classes.form} onSubmit={handleSubmit} >\r\n                                            <Grid container className={classes.root} spacing={5}>\r\n                                                <Grid item xs={3}>\r\n                                                    <FormControl variant=\"outlined\" style={{ width: '100%' }} >\r\n                                                        <InputLabel id=\"demo-simple-select-outlined-label\">Leave-Type</InputLabel>\r\n                                                        <Select\r\n                                                            labelId=\"demo-simple-select-outlined-label\"\r\n                                                            id=\"demo-simple-select-outlined\"\r\n                                                            label=\"leave-Type\"\r\n                                                            name=\"leaveType\"\r\n                                                            error={formErrors.leaveType && true}\r\n                                                            value={ticketValues.leaveType}\r\n                                                            onChange={handleChange}\r\n                                                            className={formErrors.leaveType && \"input-error\"}\r\n                                                        >\r\n                                                            <MenuItem value=\"full-leave\">Full leave</MenuItem>\r\n                                                            <MenuItem value=\"half-leave\">Half leave</MenuItem>\r\n                                                            <MenuItem value=\"sick-leave\">Sick leave</MenuItem>\r\n                                                            <MenuItem value=\"early-leave\">Early leave</MenuItem>\r\n                                                        </Select>\r\n                                                    </FormControl>\r\n                                                    {formErrors.leaveType && (\r\n                                                        <span className=\"error\">{formErrors.leaveType}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n\r\n\r\n                                                <Grid item xs={4}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"date\"\r\n                                                        variant=\"outlined\"\r\n                                                        label=\"Start-date\"\r\n                                                        name=\"startDate\"\r\n                                                        type=\"date\"\r\n                                                        error={formErrors.startDate && true}\r\n                                                        value={ticketValues.startDate}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.startDate && \"input-error\"}\r\n                                                        className={classes.textField}\r\n                                                        InputLabelProps={{\r\n                                                            shrink: true,\r\n                                                        }}\r\n                                                    />\r\n                                                    {formErrors.startDate && (\r\n                                                        <span className=\"error\">{formErrors.startDate}</span>\r\n                                                    )}\r\n\r\n                                                </Grid>\r\n                                                <h3 style={{ marginTop: \"30px\" }}>To</h3>\r\n                                                <Grid item xs={4}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"date\"\r\n                                                        variant=\"outlined\"\r\n                                                        label=\"End-date\"\r\n                                                        name=\"endDate\"\r\n                                                        type=\"date\"\r\n                                                        error={formErrors.endDate && true}\r\n                                                        value={ticketValues.endDate}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.endDate && \"input-error\"}\r\n                                                        className={classes.textField}\r\n                                                        InputLabelProps={{\r\n                                                            shrink: true,\r\n                                                        }}\r\n                                                    />\r\n                                                    {formErrors.endDate && (\r\n                                                        <span className=\"error\">{formErrors.endDate}</span>\r\n                                                    )}\r\n\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={7}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        multiline\r\n                                                        rows={4}\r\n                                                        id=\"ticketMesasge\"\r\n                                                        name=\"ticketMesasge\"\r\n                                                        label=\"Reason for leave\"\r\n                                                        variant=\"outlined\"\r\n                                                        error={formErrors.ticketMesasge && true}\r\n                                                        value={ticketValues.ticketMesasge}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.ticketMesasge && \"input-error\"}\r\n\r\n                                                    />\r\n                                                    {formErrors.ticketMesasge && (\r\n                                                        <span className=\"error\">{formErrors.ticketMesasge}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n\r\n\r\n                                            </Grid>\r\n\r\n\r\n\r\n\r\n\r\n                                            <Grid container className={classes.root} spacing={3}>\r\n                                                <Grid item xs={4} style={{ display: 'flex' }}>\r\n                                                    <Button type=\"submit\" onClick={(e) => {diffday()}} style={{ marginTop: \"10px\" }} variant=\"contained\" color=\"primary\">Save</Button>\r\n                                                    <Button type=\"button\" style={{ marginTop: \"10px\" }} onClick={(e) => { e.preventDefault(); props.history.push('/tickets') }}>Cancel</Button>\r\n                                                </Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                            </Grid>\r\n                                        </form>\r\n\r\n                                    </CardContent>\r\n                                </Card>\r\n                            </Grid>\r\n                            <Grid item xs={6}></Grid>\r\n                        </Grid>\r\n                    </div>\r\n                } />\r\n            <Footer />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default AddTickets;\r\n\r\n\r\n\r\n","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\LeavesTicket\\EditTicket.js",["367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","383"],"import React, { useState, useEffect } from 'react';\r\nimport Header from '../../Layouts/Header';\r\nimport Footer from '../../Layouts/Footer';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Breadcrumb from '../../Layouts/Breadcrumb';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { TextField } from '@material-ui/core';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport LoadderButton from '../../Layouts/LoadderButton';\r\nimport AuthApi from '../../Services/Authapi';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport FontAwesomeIconComponent from '../../Layouts/FontAwesomeIconComponent';\r\nimport { SignalCellularNull } from '@material-ui/icons';\r\nimport Authapi from '../../Services/Authapi';\r\nimport swal from 'sweetalert';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport { now } from 'moment';\r\nimport moment from 'moment';\r\n\r\n\r\nconst inileaves = {\r\n    leaveType: \"\",\r\n    ticketMesasge: \"\",\r\n    dateRange: \"\",\r\n    startDate: \"\",\r\n    endDate: \"\",\r\n    leaveStatus: \"\",\r\n    ticket_Id: 0\r\n}\r\n\r\n\r\n\r\nconst EditTicket = (props) => {\r\n    const classes = props;\r\n    const [editValues, setEditValues] = useState(inileaves);\r\n    const [formErrors, setFormErrors] = useState({});\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        if (props && props.authToken === false) {\r\n            props.history.push('/login');\r\n        }\r\n    });\r\n\r\n\r\n\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        // console.log(value);\r\n        setEditValues({ ...editValues, [name]: value });\r\n        // console.log(editValues);\r\n    }\r\n\r\n\r\n    // function dateDiffInDays(startDate, endDate) {\r\n    //     // round to the nearest whole number\r\n    //     return Math.round((endDate - startDate) / (1000 * 60 * 60 * 24));\r\n    // }\r\n    // const daysDiff = dateDiffInDays(new Date(editValues.startDate), new Date(editValues.endDate));\r\n    // const dsp = dateDiffInDays(new Date(), new Date(editValues.startDate));\r\n\r\n    const validate = (values) => {\r\n        let errors = {};\r\n        const regex = /^[a-zA-Z]/;\r\n        // const dateR = /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/;\r\n\r\n\r\n\r\n\r\n        // if (!values.leaveType) {\r\n        //     errors.leaveType = \"Cannot be blank\";\r\n        // } else if (!regex.test(values.leaveType)) {\r\n        //     errors.leaveType = \"Invalid firstName format\";\r\n        // }\r\n\r\n\r\n        // if (!values.ticketMesasge) {\r\n        //     errors.ticketMesasge = \"Cannot be blank\";\r\n        // } else if (!regex.test(values.ticketMesasge)) {\r\n        //     errors.ticketMesasge = \"Invalid ticketMesasge format\";\r\n        // }\r\n\r\n        // if (!values.startDate) {\r\n        //     errors.startDate = \"Cannot be  blank\";\r\n        // } else if (!dateR.test(values.startDate)) {\r\n        //     errors.startDate = \"Invalid dob format\"\r\n        // }\r\n        // else {\r\n\r\n\r\n        //     if (dsp < 0) {\r\n        //         errors.startDate = \"you can chooes only Current and future Date\";\r\n\r\n        //     }\r\n        // }\r\n\r\n        // if (!values.endDate) {\r\n        //     errors.endDate = \"Cannot be  blank\";\r\n        // } else if (!dateR.test(values.endDate)) {\r\n        //     errors.endDate = \"Invalid dob format\"\r\n        // } else {\r\n\r\n\r\n        //     if (daysDiff < 0) {\r\n        //         errors.endDate = \"you can chooes only Current and future Date\";\r\n\r\n        //     }\r\n        // }\r\n\r\n        if (!values.leaveStatus) {\r\n            errors.leaveStatus = \"Cannot be blank\";\r\n        } else if (!regex.test(values.leaveStatus)) {\r\n            errors.leaveStatus = \"Invalid firstName format\";\r\n        }\r\n\r\n\r\n\r\n        return errors;\r\n    };\r\n\r\n    const getTicketData = async () => {\r\n        let ticketId = props.history.location.pathname.split('/')[props.history.location.pathname.split('/').length - 1];\r\n        let ticket = await AuthApi.singleTicket(ticketId);\r\n        let ticket_Id = ticketId\r\n\r\n        let leaveType = (ticket.status === true && ticket.data[0] && ticket.data[0].leaveType && (ticket.data[0].leaveType !== null || ticket.data[0].leaveType !== false)) ? ticket.data[0].leaveType : null;\r\n        let ticketMesasge = (ticket.status === true && ticket.data[0] && ticket.data[0].ticket_mesasge) ? ticket.data[0].ticket_mesasge : null;\r\n        let dateRangeArr = (ticket.status === true && ticket.data[0] && ticket.data[0].date_range) ? ticket.data[0].date_range : null;\r\n        let Status = (ticket.status === true && ticket.data[0] && ticket.data[0].status) ? ticket.data[0].status : null;\r\n\r\n        setEditValues({\r\n            leaveType: leaveType,\r\n            ticketMesasge: ticketMesasge,\r\n            startDate: dateRangeArr[0],\r\n            endDate: dateRangeArr[1],\r\n            leaveStatus: Status,\r\n            ticket_Id: ticket_Id,\r\n        });\r\n\r\n\r\n    }\r\n    useEffect(\r\n        () =>\r\n            setTimeout(\r\n                () => getTicketData(),\r\n                500), []);\r\n\r\n\r\n\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        setFormErrors(validate(editValues));\r\n        setIsSubmitting(true);\r\n\r\n    }\r\n\r\n    useEffect(async () => {\r\n        if (Object.keys(formErrors).length === 0 && isSubmitting) {\r\n            await editTickets();\r\n        }\r\n    }, [formErrors]);\r\n\r\n\r\n    // function  diffday() {\r\n    //     const a = moment(editValues.startDate);\r\n    //     const b = moment(editValues.endDate);\r\n    //     const dateRangeArr = [];\r\n\r\n\r\n    //         var startDate = editValues.startDate; \r\n    //         dateRangeArr.push(startDate);\r\n\r\n    //         var endDate = editValues.endDate; \r\n    //         dateRangeArr.push(endDate);\r\n\r\n\r\n    //     editValues.dateRange = dateRangeArr;\r\n    //     editValues.noOfDays = b.diff(a, 'days')\r\n\r\n    // }\r\n\r\n    const editTickets = async (id) => {\r\n        let status = await AuthApi.updateTicket(editValues, editValues.ticket_Id);\r\n        if (status && status.status === true) {\r\n            props.history.push('/tickets');\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Header\r\n                {...props}\r\n                authUser={props.authUser}\r\n                component={\r\n                    <div>\r\n                        <Card className={classes.root} style={{ marginBottom: '3%' }}>\r\n                            <CardContent>\r\n                                <Breadcrumb\r\n                                    {...props}\r\n                                    primaryPageName=\"LeavesTicket\"\r\n                                    primaryPageLink=\"/tickets\"\r\n                                    isSecondaryPage={true}\r\n                                    secondaryPageName=\"edit\" />\r\n                            </CardContent>\r\n                        </Card>\r\n                        <Grid container className={classes.root} spacing={2}>\r\n                            <Grid item xs={12}>\r\n                                <Card className={classes.root}>\r\n                                    <CardContent>\r\n                                        <Typography variant=\"h2\">Edit Ticket</Typography>\r\n                                        <form className={classes.form} onSubmit={handleSubmit} >\r\n                                            <Grid container className={classes.root} spacing={5}>\r\n                                                <Grid item xs={3}>\r\n                                                    <FormControl variant=\"outlined\" style={{ width: '100%' }} disabled >\r\n                                                        <InputLabel id=\"demo-simple-select-outlined-label\">Leave-Type</InputLabel>\r\n                                                        <Select\r\n                                                            labelId=\"demo-simple-select-outlined-label\"\r\n                                                            id=\"demo-simple-select-outlined\"\r\n                                                            label=\"leave-Type\"\r\n                                                            name=\"leaveType\"\r\n                                                            // error = {formErrors.leaveType && true}\r\n                                                            value={(editValues && editValues.leaveType !== null) ? editValues.leaveType : \"\"}\r\n                                                            // focused={(editValues && editValues.leaveType !== null) ? true : false}\r\n                                                            className={formErrors.leaveType && \"input-error\"}\r\n                                                        >\r\n\r\n                                                            <MenuItem value=\"full-leave\">Full leave</MenuItem>\r\n                                                            <MenuItem value=\"half-leave\">Half leave</MenuItem>\r\n                                                            <MenuItem value=\"sick-leave\">Sick leave</MenuItem>\r\n                                                            <MenuItem value=\"early-leave\">Early leave</MenuItem>\r\n\r\n\r\n                                                        </Select>\r\n                                                    </FormControl>\r\n                                                    {/* {formErrors.leaveType && (\r\n                                                            <span className=\"error\">{formErrors.leaveType}</span>\r\n                                                        )} */}\r\n                                                </Grid>\r\n\r\n\r\n                                                <Grid item xs={4}>\r\n                                                    <TextField\r\n                                                        disabled\r\n                                                        fullWidth\r\n                                                        id=\"date\"\r\n                                                        variant=\"outlined\"\r\n                                                        label=\"Start-date\"\r\n                                                        name=\"startDate\"\r\n                                                        type=\"date\"\r\n                                                        // error={formErrors.startDate && true}\r\n                                                        value={(editValues && editValues.startDate !== null) ? editValues.startDate : null}\r\n                                                        // focused={(editValues && editValues.startDate !== null) ? true : false}\r\n                                                        // onChange={handleChange}\r\n                                                        className={formErrors.startDate && \"input-error\"}\r\n                                                        className={classes.textField}\r\n                                                        InputLabelProps={{\r\n                                                            shrink: true,\r\n                                                        }}\r\n\r\n                                                    />\r\n                                                    {/* {formErrors.startDate && (\r\n                                                        <span className=\"error\">{formErrors.startDate}</span>\r\n                                                    )} */}\r\n\r\n                                                </Grid>\r\n                                                <h3 style={{ marginTop: \"30px\" }}>To</h3>\r\n                                                <Grid item xs={4}>\r\n                                                    <TextField\r\n                                                        disabled\r\n                                                        fullWidth\r\n                                                        id=\"date\"\r\n                                                        variant=\"outlined\"\r\n                                                        label=\"End-date\"\r\n                                                        name=\"endDate\"\r\n                                                        type=\"date\"\r\n                                                        // error={formErrors.endDate && true}\r\n                                                        value={(editValues && editValues.endDate !== null) ? editValues.endDate : null}\r\n                                                        // focused={(editValues && editValues.endDate !== null) ? true : false}\r\n                                                        // onChange={handleChange}\r\n                                                        className={formErrors.endDate && \"input-error\"}\r\n                                                        className={classes.textField}\r\n                                                        InputLabelProps={{\r\n                                                            shrink: true,\r\n                                                        }}\r\n                                                    />\r\n                                                    {/* {formErrors.endDate && (\r\n                                                        <span className=\"error\">{formErrors.endDate}</span>\r\n                                                    )} */}\r\n\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={7}>\r\n                                                    <TextField\r\n                                                        disabled\r\n                                                        fullWidth\r\n                                                        multiline\r\n                                                        rows={4}\r\n                                                        id=\"ticketMesasge\"\r\n                                                        name=\"ticketMesasge\"\r\n                                                        label=\"Reason for leave\"\r\n                                                        variant=\"outlined\"\r\n                                                        // defaultValue\r\n                                                        // error={formErrors.ticketMesasge && true}\r\n                                                        value={(editValues && editValues.ticketMesasge !== null) ? editValues.ticketMesasge : null}\r\n                                                        // focused={(editValues && editValues.ticketMesasge !== null) ? true : false}\r\n                                                        // onChange={handleChange}\r\n                                                        className={formErrors.ticketMesasge && \"input-error\"}\r\n\r\n                                                    />\r\n                                                    {/* {formErrors.ticketMesasge && (\r\n                                                        <span className=\"error\">{formErrors.ticketMesasge}</span>\r\n                                                    )} */}\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={3}>\r\n                                                    <FormControl variant=\"outlined\" style={{ width: '100%' }} >\r\n                                                        <InputLabel id=\"demo-simple-select-outlined-label1\">Leave-Status</InputLabel>\r\n                                                        <Select\r\n                                                            autoFocus\r\n                                                            labelId=\"demo-simple-select-outlined-label1\"\r\n                                                            id=\"demo-simple-select-outlined1\"\r\n                                                            label=\"leave-status\"\r\n                                                            name=\"leaveStatus\"\r\n                                                            error={formErrors.leaveStatus && true}\r\n                                                            value={(editValues && editValues.leaveStatus !== null) ? editValues.leaveStatus : \"\"}\r\n                                                            // focused={(editValues && editValues.leaveStatus !== null) ? true : false}\r\n                                                            onChange={handleChange}\r\n                                                            className={formErrors.leaveStatus && \"input-error\"}\r\n                                                        >\r\n                                                            <MenuItem value=\"pending\">Pending</MenuItem>\r\n                                                            <MenuItem value=\"approved\">Approved</MenuItem>\r\n                                                            <MenuItem value=\"declined\">Declined</MenuItem>\r\n                                                            <MenuItem value=\"canceled\">Canceled</MenuItem>\r\n                                                        </Select>\r\n                                                    </FormControl>\r\n                                                    {formErrors.leaveStatus && (\r\n                                                        <span className=\"error\">{formErrors.leaveStatus}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n\r\n\r\n                                            </Grid>\r\n\r\n\r\n\r\n\r\n\r\n                                            <Grid container className={classes.root} spacing={3}>\r\n                                                <Grid item xs={4} style={{ display: 'flex' }}>\r\n                                                    <Button type=\"submit\" style={{ marginTop: \"10px\" }} variant=\"contained\" color=\"primary\">Edit</Button>\r\n                                                    <Button type=\"button\" style={{ marginTop: \"10px\" }} onClick={(e) => { e.preventDefault(); props.history.push('/tickets') }}>Cancel</Button>\r\n                                                </Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                            </Grid>\r\n                                        </form>\r\n\r\n                                    </CardContent>\r\n                                </Card>\r\n                            </Grid>\r\n                            <Grid item xs={6}></Grid>\r\n                        </Grid>\r\n                    </div>\r\n                } />\r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EditTicket;","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\Nav.js",[],"C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\ProtectedRoute.js",[],{"ruleId":"384","replacedBy":"385"},{"ruleId":"386","replacedBy":"387"},{"ruleId":"388","severity":1,"message":"389","line":3,"column":50,"nodeType":"390","messageId":"391","endLine":3,"endColumn":58},{"ruleId":"392","severity":1,"message":"393","line":63,"column":3,"nodeType":"394","messageId":"395","endLine":67,"endColumn":4},{"ruleId":"396","severity":1,"message":"397","line":353,"column":35,"nodeType":"398","endLine":353,"endColumn":47},{"ruleId":"384","replacedBy":"399"},{"ruleId":"386","replacedBy":"400"},{"ruleId":"401","severity":1,"message":"402","line":4,"column":3,"nodeType":"394","messageId":"403","endLine":6,"endColumn":4},{"ruleId":"384","replacedBy":"404"},{"ruleId":"386","replacedBy":"405"},{"ruleId":"388","severity":1,"message":"406","line":1,"column":17,"nodeType":"390","messageId":"391","endLine":1,"endColumn":26},{"ruleId":"388","severity":1,"message":"407","line":9,"column":8,"nodeType":"390","messageId":"391","endLine":9,"endColumn":18},{"ruleId":"388","severity":1,"message":"408","line":15,"column":8,"nodeType":"390","messageId":"391","endLine":15,"endColumn":16},{"ruleId":"388","severity":1,"message":"409","line":16,"column":8,"nodeType":"390","messageId":"391","endLine":16,"endColumn":20},{"ruleId":"388","severity":1,"message":"410","line":17,"column":8,"nodeType":"390","messageId":"391","endLine":17,"endColumn":20},{"ruleId":"388","severity":1,"message":"411","line":21,"column":8,"nodeType":"390","messageId":"391","endLine":21,"endColumn":15},{"ruleId":"388","severity":1,"message":"412","line":25,"column":8,"nodeType":"390","messageId":"391","endLine":25,"endColumn":32},{"ruleId":"384","replacedBy":"413"},{"ruleId":"386","replacedBy":"414"},{"ruleId":"415","severity":1,"message":"416","line":77,"column":94,"nodeType":"417","endLine":77,"endColumn":104},{"ruleId":"415","severity":1,"message":"416","line":81,"column":118,"nodeType":"417","endLine":81,"endColumn":128},{"ruleId":"418","severity":1,"message":"419","line":27,"column":34,"nodeType":"420","messageId":"395","endLine":27,"endColumn":36},{"ruleId":"388","severity":1,"message":"421","line":2,"column":8,"nodeType":"390","messageId":"391","endLine":2,"endColumn":14},{"ruleId":"388","severity":1,"message":"422","line":4,"column":8,"nodeType":"390","messageId":"391","endLine":4,"endColumn":19},{"ruleId":"388","severity":1,"message":"423","line":5,"column":8,"nodeType":"390","messageId":"391","endLine":5,"endColumn":13},{"ruleId":"388","severity":1,"message":"424","line":6,"column":10,"nodeType":"390","messageId":"391","endLine":6,"endColumn":19},{"ruleId":"388","severity":1,"message":"425","line":7,"column":8,"nodeType":"390","messageId":"391","endLine":7,"endColumn":18},{"ruleId":"388","severity":1,"message":"426","line":12,"column":8,"nodeType":"390","messageId":"391","endLine":12,"endColumn":12},{"ruleId":"388","severity":1,"message":"427","line":13,"column":8,"nodeType":"390","messageId":"391","endLine":13,"endColumn":24},{"ruleId":"388","severity":1,"message":"428","line":15,"column":14,"nodeType":"390","messageId":"391","endLine":15,"endColumn":17},{"ruleId":"388","severity":1,"message":"429","line":15,"column":19,"nodeType":"390","messageId":"391","endLine":15,"endColumn":22},{"ruleId":"388","severity":1,"message":"430","line":16,"column":10,"nodeType":"390","messageId":"391","endLine":16,"endColumn":17},{"ruleId":"388","severity":1,"message":"431","line":17,"column":8,"nodeType":"390","messageId":"391","endLine":17,"endColumn":21},{"ruleId":"388","severity":1,"message":"432","line":20,"column":8,"nodeType":"390","messageId":"391","endLine":20,"endColumn":12},{"ruleId":"388","severity":1,"message":"433","line":21,"column":10,"nodeType":"390","messageId":"391","endLine":21,"endColumn":16},{"ruleId":"434","severity":1,"message":"435","line":1,"column":1,"nodeType":"436","endLine":36,"endColumn":3},{"ruleId":"388","severity":1,"message":"437","line":2,"column":10,"nodeType":"390","messageId":"391","endLine":2,"endColumn":20},{"ruleId":"388","severity":1,"message":"438","line":9,"column":8,"nodeType":"390","messageId":"391","endLine":9,"endColumn":25},{"ruleId":"401","severity":1,"message":"402","line":181,"column":3,"nodeType":"394","messageId":"403","endLine":183,"endColumn":4},{"ruleId":"388","severity":1,"message":"439","line":2,"column":44,"nodeType":"390","messageId":"391","endLine":2,"endColumn":51},{"ruleId":"388","severity":1,"message":"440","line":20,"column":8,"nodeType":"390","messageId":"391","endLine":20,"endColumn":18},{"ruleId":"388","severity":1,"message":"411","line":22,"column":8,"nodeType":"390","messageId":"391","endLine":22,"endColumn":15},{"ruleId":"388","severity":1,"message":"441","line":33,"column":9,"nodeType":"390","messageId":"391","endLine":33,"endColumn":18},{"ruleId":"388","severity":1,"message":"442","line":15,"column":9,"nodeType":"390","messageId":"391","endLine":15,"endColumn":16},{"ruleId":"384","replacedBy":"443"},{"ruleId":"386","replacedBy":"444"},{"ruleId":"388","severity":1,"message":"445","line":4,"column":8,"nodeType":"390","messageId":"391","endLine":4,"endColumn":17},{"ruleId":"388","severity":1,"message":"438","line":10,"column":8,"nodeType":"390","messageId":"391","endLine":10,"endColumn":25},{"ruleId":"388","severity":1,"message":"446","line":15,"column":8,"nodeType":"390","messageId":"391","endLine":15,"endColumn":17},{"ruleId":"388","severity":1,"message":"447","line":16,"column":8,"nodeType":"390","messageId":"391","endLine":16,"endColumn":24},{"ruleId":"388","severity":1,"message":"448","line":17,"column":8,"nodeType":"390","messageId":"391","endLine":17,"endColumn":16},{"ruleId":"388","severity":1,"message":"449","line":18,"column":8,"nodeType":"390","messageId":"391","endLine":18,"endColumn":17},{"ruleId":"388","severity":1,"message":"450","line":23,"column":8,"nodeType":"390","messageId":"391","endLine":23,"endColumn":18},{"ruleId":"392","severity":1,"message":"451","line":249,"column":3,"nodeType":"394","messageId":"395","endLine":253,"endColumn":4},{"ruleId":"388","severity":1,"message":"442","line":15,"column":9,"nodeType":"390","messageId":"391","endLine":15,"endColumn":16},{"ruleId":"388","severity":1,"message":"424","line":9,"column":10,"nodeType":"390","messageId":"391","endLine":9,"endColumn":19},{"ruleId":"388","severity":1,"message":"452","line":10,"column":8,"nodeType":"390","messageId":"391","endLine":10,"endColumn":13},{"ruleId":"388","severity":1,"message":"453","line":11,"column":8,"nodeType":"390","messageId":"391","endLine":11,"endColumn":18},{"ruleId":"388","severity":1,"message":"447","line":12,"column":8,"nodeType":"390","messageId":"391","endLine":12,"endColumn":24},{"ruleId":"388","severity":1,"message":"422","line":13,"column":8,"nodeType":"390","messageId":"391","endLine":13,"endColumn":19},{"ruleId":"388","severity":1,"message":"449","line":14,"column":8,"nodeType":"390","messageId":"391","endLine":14,"endColumn":17},{"ruleId":"388","severity":1,"message":"421","line":15,"column":8,"nodeType":"390","messageId":"391","endLine":15,"endColumn":14},{"ruleId":"388","severity":1,"message":"431","line":16,"column":8,"nodeType":"390","messageId":"391","endLine":16,"endColumn":21},{"ruleId":"388","severity":1,"message":"454","line":17,"column":8,"nodeType":"390","messageId":"391","endLine":17,"endColumn":15},{"ruleId":"388","severity":1,"message":"455","line":18,"column":8,"nodeType":"390","messageId":"391","endLine":18,"endColumn":13},{"ruleId":"388","severity":1,"message":"412","line":19,"column":8,"nodeType":"390","messageId":"391","endLine":19,"endColumn":32},{"ruleId":"388","severity":1,"message":"456","line":20,"column":10,"nodeType":"390","messageId":"391","endLine":20,"endColumn":28},{"ruleId":"388","severity":1,"message":"457","line":21,"column":8,"nodeType":"390","messageId":"391","endLine":21,"endColumn":15},{"ruleId":"388","severity":1,"message":"458","line":22,"column":8,"nodeType":"390","messageId":"391","endLine":22,"endColumn":12},{"ruleId":"388","severity":1,"message":"425","line":23,"column":8,"nodeType":"390","messageId":"391","endLine":23,"endColumn":18},{"ruleId":"388","severity":1,"message":"459","line":24,"column":8,"nodeType":"390","messageId":"391","endLine":24,"endColumn":16},{"ruleId":"388","severity":1,"message":"460","line":25,"column":8,"nodeType":"390","messageId":"391","endLine":25,"endColumn":14},{"ruleId":"388","severity":1,"message":"461","line":3,"column":8,"nodeType":"390","messageId":"391","endLine":3,"endColumn":14},{"ruleId":"388","severity":1,"message":"462","line":3,"column":18,"nodeType":"390","messageId":"391","endLine":3,"endColumn":21},{"ruleId":"388","severity":1,"message":"463","line":7,"column":8,"nodeType":"390","messageId":"391","endLine":7,"endColumn":10},{"ruleId":"388","severity":1,"message":"464","line":61,"column":13,"nodeType":"390","messageId":"391","endLine":61,"endColumn":17},{"ruleId":"388","severity":1,"message":"465","line":62,"column":13,"nodeType":"390","messageId":"391","endLine":62,"endColumn":20},{"ruleId":"388","severity":1,"message":"466","line":64,"column":13,"nodeType":"390","messageId":"391","endLine":64,"endColumn":21},{"ruleId":"388","severity":1,"message":"467","line":141,"column":17,"nodeType":"390","messageId":"391","endLine":141,"endColumn":26},{"ruleId":"388","severity":1,"message":"468","line":141,"column":28,"nodeType":"390","messageId":"391","endLine":141,"endColumn":30},{"ruleId":"388","severity":1,"message":"469","line":26,"column":7,"nodeType":"390","messageId":"391","endLine":26,"endColumn":18},{"ruleId":"388","severity":1,"message":"470","line":34,"column":11,"nodeType":"390","messageId":"391","endLine":34,"endColumn":23},{"ruleId":"388","severity":1,"message":"424","line":9,"column":10,"nodeType":"390","messageId":"391","endLine":9,"endColumn":19},{"ruleId":"388","severity":1,"message":"452","line":10,"column":8,"nodeType":"390","messageId":"391","endLine":10,"endColumn":13},{"ruleId":"388","severity":1,"message":"453","line":11,"column":8,"nodeType":"390","messageId":"391","endLine":11,"endColumn":18},{"ruleId":"388","severity":1,"message":"447","line":12,"column":8,"nodeType":"390","messageId":"391","endLine":12,"endColumn":24},{"ruleId":"388","severity":1,"message":"422","line":13,"column":8,"nodeType":"390","messageId":"391","endLine":13,"endColumn":19},{"ruleId":"388","severity":1,"message":"449","line":14,"column":8,"nodeType":"390","messageId":"391","endLine":14,"endColumn":17},{"ruleId":"388","severity":1,"message":"421","line":15,"column":8,"nodeType":"390","messageId":"391","endLine":15,"endColumn":14},{"ruleId":"388","severity":1,"message":"431","line":16,"column":8,"nodeType":"390","messageId":"391","endLine":16,"endColumn":21},{"ruleId":"388","severity":1,"message":"454","line":17,"column":8,"nodeType":"390","messageId":"391","endLine":17,"endColumn":15},{"ruleId":"388","severity":1,"message":"412","line":18,"column":8,"nodeType":"390","messageId":"391","endLine":18,"endColumn":32},{"ruleId":"388","severity":1,"message":"425","line":19,"column":8,"nodeType":"390","messageId":"391","endLine":19,"endColumn":18},{"ruleId":"388","severity":1,"message":"459","line":20,"column":8,"nodeType":"390","messageId":"391","endLine":20,"endColumn":16},{"ruleId":"388","severity":1,"message":"460","line":21,"column":8,"nodeType":"390","messageId":"391","endLine":21,"endColumn":14},{"ruleId":"388","severity":1,"message":"463","line":7,"column":8,"nodeType":"390","messageId":"391","endLine":7,"endColumn":10},{"ruleId":"388","severity":1,"message":"471","line":48,"column":11,"nodeType":"390","messageId":"391","endLine":48,"endColumn":21},{"ruleId":"472","severity":1,"message":"473","line":65,"column":33,"nodeType":"474","messageId":"475","endLine":65,"endColumn":34,"suggestions":"476"},{"ruleId":"472","severity":1,"message":"477","line":65,"column":35,"nodeType":"474","messageId":"475","endLine":65,"endColumn":36,"suggestions":"478"},{"ruleId":"472","severity":1,"message":"473","line":65,"column":55,"nodeType":"474","messageId":"475","endLine":65,"endColumn":56,"suggestions":"479"},{"ruleId":"472","severity":1,"message":"477","line":65,"column":57,"nodeType":"474","messageId":"475","endLine":65,"endColumn":58,"suggestions":"480"},{"ruleId":"481","severity":1,"message":"482","line":139,"column":39,"nodeType":"483","endLine":139,"endColumn":41,"suggestions":"484"},{"ruleId":"481","severity":1,"message":"485","line":187,"column":15,"nodeType":"486","endLine":191,"endColumn":6},{"ruleId":"481","severity":1,"message":"487","line":191,"column":8,"nodeType":"483","endLine":191,"endColumn":20,"suggestions":"488"},{"ruleId":"396","severity":1,"message":"397","line":300,"column":29,"nodeType":"398","endLine":300,"endColumn":58},{"ruleId":"489","severity":1,"message":"490","line":332,"column":53,"nodeType":"491","endLine":332,"endColumn":131},{"ruleId":"472","severity":1,"message":"473","line":58,"column":33,"nodeType":"474","messageId":"475","endLine":58,"endColumn":34,"suggestions":"492"},{"ruleId":"472","severity":1,"message":"477","line":58,"column":35,"nodeType":"474","messageId":"475","endLine":58,"endColumn":36,"suggestions":"493"},{"ruleId":"472","severity":1,"message":"473","line":58,"column":55,"nodeType":"474","messageId":"475","endLine":58,"endColumn":56,"suggestions":"494"},{"ruleId":"472","severity":1,"message":"477","line":58,"column":57,"nodeType":"474","messageId":"475","endLine":58,"endColumn":58,"suggestions":"495"},{"ruleId":"481","severity":1,"message":"496","line":145,"column":24,"nodeType":"483","endLine":145,"endColumn":26,"suggestions":"497"},{"ruleId":"481","severity":1,"message":"482","line":205,"column":39,"nodeType":"483","endLine":205,"endColumn":41,"suggestions":"498"},{"ruleId":"481","severity":1,"message":"485","line":223,"column":15,"nodeType":"486","endLine":228,"endColumn":6},{"ruleId":"481","severity":1,"message":"499","line":228,"column":8,"nodeType":"483","endLine":228,"endColumn":20,"suggestions":"500"},{"ruleId":"396","severity":1,"message":"397","line":331,"column":29,"nodeType":"398","endLine":331,"endColumn":58},{"ruleId":"388","severity":1,"message":"452","line":10,"column":8,"nodeType":"390","messageId":"391","endLine":10,"endColumn":13},{"ruleId":"388","severity":1,"message":"453","line":11,"column":8,"nodeType":"390","messageId":"391","endLine":11,"endColumn":18},{"ruleId":"388","severity":1,"message":"447","line":12,"column":8,"nodeType":"390","messageId":"391","endLine":12,"endColumn":24},{"ruleId":"388","severity":1,"message":"422","line":13,"column":8,"nodeType":"390","messageId":"391","endLine":13,"endColumn":19},{"ruleId":"388","severity":1,"message":"449","line":14,"column":8,"nodeType":"390","messageId":"391","endLine":14,"endColumn":17},{"ruleId":"388","severity":1,"message":"431","line":16,"column":8,"nodeType":"390","messageId":"391","endLine":16,"endColumn":21},{"ruleId":"388","severity":1,"message":"455","line":18,"column":8,"nodeType":"390","messageId":"391","endLine":18,"endColumn":13},{"ruleId":"388","severity":1,"message":"412","line":19,"column":8,"nodeType":"390","messageId":"391","endLine":19,"endColumn":32},{"ruleId":"388","severity":1,"message":"456","line":20,"column":10,"nodeType":"390","messageId":"391","endLine":20,"endColumn":28},{"ruleId":"388","severity":1,"message":"457","line":21,"column":8,"nodeType":"390","messageId":"391","endLine":21,"endColumn":15},{"ruleId":"388","severity":1,"message":"425","line":23,"column":8,"nodeType":"390","messageId":"391","endLine":23,"endColumn":18},{"ruleId":"388","severity":1,"message":"459","line":24,"column":8,"nodeType":"390","messageId":"391","endLine":24,"endColumn":16},{"ruleId":"388","severity":1,"message":"460","line":25,"column":8,"nodeType":"390","messageId":"391","endLine":25,"endColumn":14},{"ruleId":"388","severity":1,"message":"501","line":26,"column":10,"nodeType":"390","messageId":"391","endLine":26,"endColumn":13},{"ruleId":"472","severity":1,"message":"473","line":102,"column":31,"nodeType":"474","messageId":"475","endLine":102,"endColumn":32,"suggestions":"502"},{"ruleId":"472","severity":1,"message":"477","line":102,"column":33,"nodeType":"474","messageId":"475","endLine":102,"endColumn":34,"suggestions":"503"},{"ruleId":"472","severity":1,"message":"473","line":102,"column":53,"nodeType":"474","messageId":"475","endLine":102,"endColumn":54,"suggestions":"504"},{"ruleId":"472","severity":1,"message":"477","line":102,"column":55,"nodeType":"474","messageId":"475","endLine":102,"endColumn":56,"suggestions":"505"},{"ruleId":"481","severity":1,"message":"485","line":157,"column":15,"nodeType":"486","endLine":161,"endColumn":6},{"ruleId":"481","severity":1,"message":"506","line":161,"column":8,"nodeType":"483","endLine":161,"endColumn":20,"suggestions":"507"},{"ruleId":"396","severity":1,"message":"397","line":268,"column":57,"nodeType":"398","endLine":268,"endColumn":86},{"ruleId":"396","severity":1,"message":"397","line":291,"column":57,"nodeType":"398","endLine":291,"endColumn":86},{"ruleId":"388","severity":1,"message":"452","line":10,"column":8,"nodeType":"390","messageId":"391","endLine":10,"endColumn":13},{"ruleId":"388","severity":1,"message":"453","line":11,"column":8,"nodeType":"390","messageId":"391","endLine":11,"endColumn":18},{"ruleId":"388","severity":1,"message":"447","line":12,"column":8,"nodeType":"390","messageId":"391","endLine":12,"endColumn":24},{"ruleId":"388","severity":1,"message":"422","line":13,"column":8,"nodeType":"390","messageId":"391","endLine":13,"endColumn":19},{"ruleId":"388","severity":1,"message":"449","line":14,"column":8,"nodeType":"390","messageId":"391","endLine":14,"endColumn":17},{"ruleId":"388","severity":1,"message":"431","line":16,"column":8,"nodeType":"390","messageId":"391","endLine":16,"endColumn":21},{"ruleId":"388","severity":1,"message":"455","line":18,"column":8,"nodeType":"390","messageId":"391","endLine":18,"endColumn":13},{"ruleId":"388","severity":1,"message":"412","line":19,"column":8,"nodeType":"390","messageId":"391","endLine":19,"endColumn":32},{"ruleId":"388","severity":1,"message":"456","line":20,"column":10,"nodeType":"390","messageId":"391","endLine":20,"endColumn":28},{"ruleId":"388","severity":1,"message":"457","line":21,"column":8,"nodeType":"390","messageId":"391","endLine":21,"endColumn":15},{"ruleId":"388","severity":1,"message":"458","line":22,"column":8,"nodeType":"390","messageId":"391","endLine":22,"endColumn":12},{"ruleId":"388","severity":1,"message":"425","line":23,"column":8,"nodeType":"390","messageId":"391","endLine":23,"endColumn":18},{"ruleId":"388","severity":1,"message":"459","line":24,"column":8,"nodeType":"390","messageId":"391","endLine":24,"endColumn":16},{"ruleId":"388","severity":1,"message":"460","line":25,"column":8,"nodeType":"390","messageId":"391","endLine":25,"endColumn":14},{"ruleId":"388","severity":1,"message":"501","line":26,"column":10,"nodeType":"390","messageId":"391","endLine":26,"endColumn":13},{"ruleId":"472","severity":1,"message":"473","line":74,"column":31,"nodeType":"474","messageId":"475","endLine":74,"endColumn":32,"suggestions":"508"},{"ruleId":"472","severity":1,"message":"477","line":74,"column":33,"nodeType":"474","messageId":"475","endLine":74,"endColumn":34,"suggestions":"509"},{"ruleId":"472","severity":1,"message":"473","line":74,"column":53,"nodeType":"474","messageId":"475","endLine":74,"endColumn":54,"suggestions":"510"},{"ruleId":"472","severity":1,"message":"477","line":74,"column":55,"nodeType":"474","messageId":"475","endLine":74,"endColumn":56,"suggestions":"511"},{"ruleId":"481","severity":1,"message":"512","line":142,"column":23,"nodeType":"483","endLine":142,"endColumn":25,"suggestions":"513"},{"ruleId":"481","severity":1,"message":"485","line":154,"column":15,"nodeType":"486","endLine":158,"endColumn":6},{"ruleId":"481","severity":1,"message":"499","line":158,"column":8,"nodeType":"483","endLine":158,"endColumn":20,"suggestions":"514"},{"ruleId":"396","severity":1,"message":"397","line":243,"column":57,"nodeType":"398","endLine":243,"endColumn":86},{"ruleId":"396","severity":1,"message":"397","line":266,"column":57,"nodeType":"398","endLine":266,"endColumn":86},{"ruleId":"388","severity":1,"message":"458","line":9,"column":8,"nodeType":"390","messageId":"391","endLine":9,"endColumn":12},{"ruleId":"388","severity":1,"message":"452","line":10,"column":8,"nodeType":"390","messageId":"391","endLine":10,"endColumn":13},{"ruleId":"388","severity":1,"message":"453","line":11,"column":8,"nodeType":"390","messageId":"391","endLine":11,"endColumn":18},{"ruleId":"388","severity":1,"message":"447","line":12,"column":8,"nodeType":"390","messageId":"391","endLine":12,"endColumn":24},{"ruleId":"388","severity":1,"message":"449","line":14,"column":8,"nodeType":"390","messageId":"391","endLine":14,"endColumn":17},{"ruleId":"388","severity":1,"message":"431","line":16,"column":8,"nodeType":"390","messageId":"391","endLine":16,"endColumn":21},{"ruleId":"388","severity":1,"message":"455","line":18,"column":8,"nodeType":"390","messageId":"391","endLine":18,"endColumn":13},{"ruleId":"388","severity":1,"message":"412","line":19,"column":8,"nodeType":"390","messageId":"391","endLine":19,"endColumn":32},{"ruleId":"388","severity":1,"message":"456","line":20,"column":10,"nodeType":"390","messageId":"391","endLine":20,"endColumn":28},{"ruleId":"388","severity":1,"message":"457","line":21,"column":8,"nodeType":"390","messageId":"391","endLine":21,"endColumn":15},{"ruleId":"388","severity":1,"message":"501","line":26,"column":10,"nodeType":"390","messageId":"391","endLine":26,"endColumn":13},{"ruleId":"388","severity":1,"message":"463","line":28,"column":8,"nodeType":"390","messageId":"391","endLine":28,"endColumn":10},{"ruleId":"472","severity":1,"message":"473","line":78,"column":31,"nodeType":"474","messageId":"475","endLine":78,"endColumn":32,"suggestions":"515"},{"ruleId":"472","severity":1,"message":"477","line":78,"column":33,"nodeType":"474","messageId":"475","endLine":78,"endColumn":34,"suggestions":"516"},{"ruleId":"472","severity":1,"message":"473","line":78,"column":53,"nodeType":"474","messageId":"475","endLine":78,"endColumn":54,"suggestions":"517"},{"ruleId":"472","severity":1,"message":"477","line":78,"column":55,"nodeType":"474","messageId":"475","endLine":78,"endColumn":56,"suggestions":"518"},{"ruleId":"481","severity":1,"message":"485","line":120,"column":15,"nodeType":"486","endLine":124,"endColumn":6},{"ruleId":"481","severity":1,"message":"519","line":124,"column":8,"nodeType":"483","endLine":124,"endColumn":20,"suggestions":"520"},{"ruleId":"396","severity":1,"message":"397","line":227,"column":57,"nodeType":"398","endLine":227,"endColumn":86},{"ruleId":"396","severity":1,"message":"397","line":250,"column":57,"nodeType":"398","endLine":250,"endColumn":86},{"ruleId":"388","severity":1,"message":"452","line":10,"column":8,"nodeType":"390","messageId":"391","endLine":10,"endColumn":13},{"ruleId":"388","severity":1,"message":"453","line":11,"column":8,"nodeType":"390","messageId":"391","endLine":11,"endColumn":18},{"ruleId":"388","severity":1,"message":"447","line":12,"column":8,"nodeType":"390","messageId":"391","endLine":12,"endColumn":24},{"ruleId":"388","severity":1,"message":"449","line":14,"column":8,"nodeType":"390","messageId":"391","endLine":14,"endColumn":17},{"ruleId":"388","severity":1,"message":"431","line":16,"column":8,"nodeType":"390","messageId":"391","endLine":16,"endColumn":21},{"ruleId":"388","severity":1,"message":"455","line":18,"column":8,"nodeType":"390","messageId":"391","endLine":18,"endColumn":13},{"ruleId":"388","severity":1,"message":"412","line":19,"column":8,"nodeType":"390","messageId":"391","endLine":19,"endColumn":32},{"ruleId":"388","severity":1,"message":"456","line":20,"column":10,"nodeType":"390","messageId":"391","endLine":20,"endColumn":28},{"ruleId":"388","severity":1,"message":"457","line":21,"column":8,"nodeType":"390","messageId":"391","endLine":21,"endColumn":15},{"ruleId":"388","severity":1,"message":"458","line":22,"column":8,"nodeType":"390","messageId":"391","endLine":22,"endColumn":12},{"ruleId":"388","severity":1,"message":"501","line":26,"column":10,"nodeType":"390","messageId":"391","endLine":26,"endColumn":13},{"ruleId":"388","severity":1,"message":"461","line":27,"column":8,"nodeType":"390","messageId":"391","endLine":27,"endColumn":14},{"ruleId":"481","severity":1,"message":"521","line":157,"column":23,"nodeType":"483","endLine":157,"endColumn":25,"suggestions":"522"},{"ruleId":"481","severity":1,"message":"485","line":169,"column":15,"nodeType":"486","endLine":173,"endColumn":6},{"ruleId":"481","severity":1,"message":"523","line":173,"column":8,"nodeType":"483","endLine":173,"endColumn":20,"suggestions":"524"},{"ruleId":"396","severity":1,"message":"397","line":268,"column":57,"nodeType":"398","endLine":268,"endColumn":86},{"ruleId":"396","severity":1,"message":"397","line":294,"column":57,"nodeType":"398","endLine":294,"endColumn":86},"no-native-reassign",["525"],"no-negated-in-lhs",["526"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","no-dupe-class-members","Duplicate name 'componentDidMount'.","MethodDefinition","unexpected","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["525"],["526"],"no-useless-constructor","Useless constructor.","noUselessConstructor",["525"],["526"],"'useEffect' is defined but never used.","'Typography' is defined but never used.","'ListItem' is defined but never used.","'ListItemIcon' is defined but never used.","'ListItemText' is defined but never used.","'Tooltip' is defined but never used.","'FontAwesomeIconComponent' is defined but never used.",["525"],["526"],"react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'Button' is defined but never used.","'FormControl' is defined but never used.","'Input' is defined but never used.","'TextField' is defined but never used.","'InputLabel' is defined but never used.","'clsx' is defined but never used.","'CircularProgress' is defined but never used.","'get' is defined but never used.","'set' is defined but never used.","'Textbox' is defined but never used.","'LoadderButton' is defined but never used.","'Grid' is defined but never used.","'Formik' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'makeStyles' is defined but never used.","'DialogContentText' is defined but never used.","'lighten' is defined but never used.","'DeleteIcon' is defined but never used.","'emptyRows' is assigned a value but never used.","'classes' is assigned a value but never used.",["525"],["526"],"'Container' is defined but never used.","'FormGroup' is defined but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'FormLabel' is defined but never used.","'PageLoader' is defined but never used.","Duplicate name 'componentWillReceiveProps'.","'Radio' is defined but never used.","'RadioGroup' is defined but never used.","'AuthApi' is defined but never used.","'Paper' is defined but never used.","'SignalCellularNull' is defined but never used.","'Authapi' is defined but never used.","'swal' is defined but never used.","'MenuItem' is defined but never used.","'Select' is defined but never used.","'moment' is defined but never used.","'min' is defined but never used.","'ls' is defined but never used.","'size' is assigned a value but never used.","'hideDay' is assigned a value but never used.","'dayTitle' is assigned a value but never used.","'className' is assigned a value but never used.","'id' is assigned a value but never used.","'getTimeDays' is assigned a value but never used.","'daysDuration' is assigned a value but never used.","'submitForm' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\/.","Literal","unnecessaryEscape",["527","528"],"Unnecessary escape character: \\-.",["529","530"],["531","532"],["533","534"],"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'RoleData'. Either include it or remove the dependency array.","ArrayExpression",["535"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'createUser' and 'isSubmitting'. Either include them or remove the dependency array.",["536"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement",["537","538"],["539","540"],["541","542"],["543","544"],"React Hook useEffect has a missing dependency: 'getFormData'. Either include it or remove the dependency array.",["545"],["546"],"React Hook useEffect has missing dependencies: 'editUser1' and 'isSubmitting'. Either include them or remove the dependency array.",["547"],"'now' is defined but never used.",["548","549"],["550","551"],["552","553"],["554","555"],"React Hook useEffect has missing dependencies: 'createLeaves' and 'isSubmitting'. Either include them or remove the dependency array.",["556"],["557","558"],["559","560"],["561","562"],["563","564"],"React Hook useEffect has a missing dependency: 'getLeaveData'. Either include it or remove the dependency array.",["565"],["566"],["567","568"],["569","570"],["571","572"],["573","574"],"React Hook useEffect has missing dependencies: 'Tickets' and 'isSubmitting'. Either include them or remove the dependency array.",["575"],"React Hook useEffect has a missing dependency: 'getTicketData'. Either include it or remove the dependency array.",["576"],"React Hook useEffect has missing dependencies: 'editTickets' and 'isSubmitting'. Either include them or remove the dependency array.",["577"],"no-global-assign","no-unsafe-negation",{"messageId":"578","fix":"579","desc":"580"},{"messageId":"581","fix":"582","desc":"583"},{"messageId":"578","fix":"584","desc":"580"},{"messageId":"581","fix":"585","desc":"583"},{"messageId":"578","fix":"586","desc":"580"},{"messageId":"581","fix":"587","desc":"583"},{"messageId":"578","fix":"588","desc":"580"},{"messageId":"581","fix":"589","desc":"583"},{"desc":"590","fix":"591"},{"desc":"592","fix":"593"},{"messageId":"578","fix":"594","desc":"580"},{"messageId":"581","fix":"595","desc":"583"},{"messageId":"578","fix":"596","desc":"580"},{"messageId":"581","fix":"597","desc":"583"},{"messageId":"578","fix":"598","desc":"580"},{"messageId":"581","fix":"599","desc":"583"},{"messageId":"578","fix":"600","desc":"580"},{"messageId":"581","fix":"601","desc":"583"},{"desc":"602","fix":"603"},{"desc":"590","fix":"604"},{"desc":"605","fix":"606"},{"messageId":"578","fix":"607","desc":"580"},{"messageId":"581","fix":"608","desc":"583"},{"messageId":"578","fix":"609","desc":"580"},{"messageId":"581","fix":"610","desc":"583"},{"messageId":"578","fix":"611","desc":"580"},{"messageId":"581","fix":"612","desc":"583"},{"messageId":"578","fix":"613","desc":"580"},{"messageId":"581","fix":"614","desc":"583"},{"desc":"615","fix":"616"},{"messageId":"578","fix":"617","desc":"580"},{"messageId":"581","fix":"618","desc":"583"},{"messageId":"578","fix":"619","desc":"580"},{"messageId":"581","fix":"620","desc":"583"},{"messageId":"578","fix":"621","desc":"580"},{"messageId":"581","fix":"622","desc":"583"},{"messageId":"578","fix":"623","desc":"580"},{"messageId":"581","fix":"624","desc":"583"},{"desc":"625","fix":"626"},{"desc":"605","fix":"627"},{"messageId":"578","fix":"628","desc":"580"},{"messageId":"581","fix":"629","desc":"583"},{"messageId":"578","fix":"630","desc":"580"},{"messageId":"581","fix":"631","desc":"583"},{"messageId":"578","fix":"632","desc":"580"},{"messageId":"581","fix":"633","desc":"583"},{"messageId":"578","fix":"634","desc":"580"},{"messageId":"581","fix":"635","desc":"583"},{"desc":"636","fix":"637"},{"desc":"638","fix":"639"},{"desc":"640","fix":"641"},"removeEscape",{"range":"642","text":"643"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"644","text":"645"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"646","text":"643"},{"range":"647","text":"645"},{"range":"648","text":"643"},{"range":"649","text":"645"},{"range":"650","text":"643"},{"range":"651","text":"645"},"Update the dependencies array to be: [RoleData]",{"range":"652","text":"653"},"Update the dependencies array to be: [createUser, formErrors, isSubmitting]",{"range":"654","text":"655"},{"range":"656","text":"643"},{"range":"657","text":"645"},{"range":"658","text":"643"},{"range":"659","text":"645"},{"range":"660","text":"643"},{"range":"661","text":"645"},{"range":"662","text":"643"},{"range":"663","text":"645"},"Update the dependencies array to be: [getFormData]",{"range":"664","text":"665"},{"range":"666","text":"653"},"Update the dependencies array to be: [editUser1, formErrors, isSubmitting]",{"range":"667","text":"668"},{"range":"669","text":"643"},{"range":"670","text":"645"},{"range":"671","text":"643"},{"range":"672","text":"645"},{"range":"673","text":"643"},{"range":"674","text":"645"},{"range":"675","text":"643"},{"range":"676","text":"645"},"Update the dependencies array to be: [createLeaves, formErrors, isSubmitting]",{"range":"677","text":"678"},{"range":"679","text":"643"},{"range":"680","text":"645"},{"range":"681","text":"643"},{"range":"682","text":"645"},{"range":"683","text":"643"},{"range":"684","text":"645"},{"range":"685","text":"643"},{"range":"686","text":"645"},"Update the dependencies array to be: [getLeaveData]",{"range":"687","text":"688"},{"range":"689","text":"668"},{"range":"690","text":"643"},{"range":"691","text":"645"},{"range":"692","text":"643"},{"range":"693","text":"645"},{"range":"694","text":"643"},{"range":"695","text":"645"},{"range":"696","text":"643"},{"range":"697","text":"645"},"Update the dependencies array to be: [Tickets, formErrors, isSubmitting]",{"range":"698","text":"699"},"Update the dependencies array to be: [getTicketData]",{"range":"700","text":"701"},"Update the dependencies array to be: [editTickets, formErrors, isSubmitting]",{"range":"702","text":"703"},[2068,2069],"",[2068,2068],"\\",[2070,2071],[2070,2070],[2090,2091],[2090,2090],[2092,2093],[2092,2092],[4414,4416],"[RoleData]",[5641,5653],"[createUser, formErrors, isSubmitting]",[1922,1923],[1922,1922],[1924,1925],[1924,1924],[1944,1945],[1944,1944],[1946,1947],[1946,1946],[5586,5588],"[getFormData]",[7375,7377],[7981,7993],"[editUser1, formErrors, isSubmitting]",[2917,2918],[2917,2917],[2919,2920],[2919,2919],[2939,2940],[2939,2939],[2941,2942],[2941,2941],[4265,4277],"[createLeaves, formErrors, isSubmitting]",[2584,2585],[2584,2584],[2586,2587],[2586,2586],[2606,2607],[2606,2606],[2608,2609],[2608,2608],[4665,4667],"[getLeaveData]",[4992,5004],[2861,2862],[2861,2861],[2863,2864],[2863,2863],[2883,2884],[2883,2883],[2885,2886],[2885,2885],[4282,4294],"[Tickets, formErrors, isSubmitting]",[5480,5482],"[getTicketData]",[5802,5814],"[editTickets, formErrors, isSubmitting]"]